Terminals unused in grammar

   l_symb


State 2 conflicts: 27 shift/reduce
State 5 conflicts: 1 shift/reduce
State 19 conflicts: 27 shift/reduce
State 24 conflicts: 27 shift/reduce
State 31 conflicts: 27 shift/reduce
State 53 conflicts: 1 shift/reduce
State 57 conflicts: 49 reduce/reduce
State 58 conflicts: 1 shift/reduce
State 61 conflicts: 1 shift/reduce
State 64 conflicts: 1 shift/reduce, 74 reduce/reduce
State 66 conflicts: 24 shift/reduce
State 68 conflicts: 4 shift/reduce
State 74 conflicts: 2 shift/reduce
State 77 conflicts: 1 shift/reduce
State 84 conflicts: 2 shift/reduce
State 86 conflicts: 1 shift/reduce
State 92 conflicts: 1 shift/reduce
State 95 conflicts: 2 shift/reduce
State 97 conflicts: 1 shift/reduce
State 101 conflicts: 1 shift/reduce
State 104 conflicts: 1 shift/reduce
State 106 conflicts: 4 shift/reduce
State 111 conflicts: 1 shift/reduce
State 113 conflicts: 1 shift/reduce
State 115 conflicts: 2 shift/reduce
State 116 conflicts: 2 shift/reduce
State 119 conflicts: 1 shift/reduce
State 120 conflicts: 1 shift/reduce, 2 reduce/reduce
State 121 conflicts: 1 shift/reduce
State 224 conflicts: 3 reduce/reduce
State 225 conflicts: 3 reduce/reduce
State 226 conflicts: 3 reduce/reduce
State 231 conflicts: 6 reduce/reduce
State 234 conflicts: 1 shift/reduce
State 238 conflicts: 2 reduce/reduce
State 315 conflicts: 1 shift/reduce
State 336 conflicts: 1 shift/reduce
State 350 conflicts: 1 shift/reduce
State 362 conflicts: 1 shift/reduce
State 377 conflicts: 4 shift/reduce
State 403 conflicts: 1 shift/reduce
State 439 conflicts: 1 shift/reduce
State 455 conflicts: 1 shift/reduce
State 461 conflicts: 1 shift/reduce
State 469 conflicts: 97 reduce/reduce
State 514 conflicts: 1 shift/reduce
State 523 conflicts: 1 shift/reduce
State 531 conflicts: 1 shift/reduce
State 606 conflicts: 2 reduce/reduce
State 622 conflicts: 74 reduce/reduce
State 629 conflicts: 2 reduce/reduce
State 638 conflicts: 74 reduce/reduce


Grammar

    0 $accept: START $end

    1 START: CODE

    2 CODE: ANYTHING
    3     | CODE ANYTHING

    4 INTERNAL_CODE: %empty
    5              | CODE

    6 CODE_MARK_LIST: CODE
    7               | CODE_MARK_LIST l_name ':' CODE

    8 ANYTHING: VAR_DEF ';'
    9         | VAR_DEF
   10         | '{' CODE_MARK_LIST '}'
   11         | EXPR_LIST ';'
   12         | EXPR_LIST
   13         | FUNC_DEF
   14         | CLASS_DEF
   15         | SWITCH_DEF
   16         | WHILE_DEF
   17         | FOR_DEF
   18         | IF_DEF
   19         | TRY_CATCH_DEF
   20         | l_continue ';'
   21         | l_continue
   22         | l_break ';'
   23         | l_break
   24         | l_yield ';'
   25         | l_yield
   26         | l_throw ';'
   27         | l_throw
   28         | l_return ';'
   29         | l_return
   30         | l_break EXPR_LIST ';'
   31         | l_break EXPR_LIST
   32         | l_yield EXPR_LIST ';'
   33         | l_yield EXPR_LIST
   34         | l_throw EXPR_LIST ';'
   35         | l_throw EXPR_LIST
   36         | l_return EXPR_LIST ';'
   37         | l_return EXPR_LIST
   38         | DO_WHILE_DEF ';'
   39         | DO_WHILE_DEF
   40         | IMPORT_DEF
   41         | EXPORT_DEF
   42         | ';'

   43 EXPORT_DEF: l_export l_name
   44           | l_export l_name l_from l_str
   45           | l_export '{' NAME_LIST '}'
   46           | l_export '{' NAME_LIST '}' l_from l_str

   47 IMPORT_DEF: l_import l_name
   48           | l_import l_name l_from l_str
   49           | l_import '{' NAME_LIST '}'
   50           | l_import '{' NAME_LIST '}' l_from l_str

   51 NAME_LIST: l_name
   52          | NAME_LIST ',' l_name

   53 TRY_CATCH_DEF: l_try '{' INTERNAL_CODE '}' l_catch '(' EXPR ')' '{' INTERNAL_CODE '}'

   54 IF_DEF: l_if '(' EXPR_LIST ')' ANYTHING
   55       | l_if '(' EXPR_LIST ')' ANYTHING l_else ANYTHING

   56 EMPTY_OR_EXPR: %empty
   57              | EXPR_LIST

   58 FOR_DEF: l_for '(' ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   59        | l_for '(' VAR_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   60        | l_for '(' EXPR_LIST ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   61        | l_for '(' FUNC_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   62        | l_for '(' CLASS_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   63        | l_for '(' INEXPR ')' ANYTHING
   64        | l_for '(' l_var l_name l_in EXPR ')' ANYTHING
   65        | l_for '(' l_let l_name l_in EXPR ')' ANYTHING

   66 DO_WHILE_DEF: l_do '{' CODE '}' l_while '(' EXPR_LIST ')'

   67 WHILE_DEF: l_while '(' EXPR_LIST ')' ANYTHING

   68 SWITCH_DEF: l_switch '(' EXPR_LIST ')' '{' SWITCH_INTERNAL '}'

   69 SWITCH_INTERNAL: SWITCH_UNIT
   70                | SWITCH_INTERNAL SWITCH_UNIT

   71 SWITCH_UNIT: l_case EXPR ':' INTERNAL_CODE
   72            | l_default ':' INTERNAL_CODE

   73 CLASS_DEF: l_class l_name '{' '}'
   74          | l_class l_name '{' CLASS_INTERNAL '}'
   75          | l_class l_name l_extends VAR_TERM '{' '}'
   76          | l_class l_name l_extends VAR_TERM '{' CLASS_INTERNAL '}'

   77 CLASS_INTERNAL: CLASS_UNIT
   78               | CLASS_INTERNAL ',' CLASS_UNIT
   79               | CLASS_INTERNAL CLASS_UNIT

   80 CLASS_UNIT: CLASS_FUNC
   81           | CLASS_CONSTRUCT
   82           | l_static CLASS_FUNC
   83           | l_static CLASS_CONSTRUCT
   84           | CLASS_GSET_UNIT
   85           | ';'

   86 CLASS_GSET_UNIT: l_get CLASS_FUNC
   87                | l_set CLASS_FUNC
   88                | l_static l_get CLASS_FUNC
   89                | l_static l_set CLASS_FUNC

   90 CLASS_FUNC: KEY_NAME '(' ')' '{' INTERNAL_CODE '}'
   91           | KEY_NAME '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

   92 CLASS_CONSTRUCT: l_constructor '(' ')' '{' INTERNAL_CODE '}'
   93                | l_constructor '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

   94 FUNC_DEF: l_function l_name '(' ')' '{' INTERNAL_CODE '}'
   95         | l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'
   96         | l_async l_function l_name '(' ')' '{' INTERNAL_CODE '}'
   97         | l_async l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'
   98         | '(' FUNC_OBJ ')' '(' EXPR_LIST ')'
   99         | '(' FUNC_OBJ ')' '(' ')'
  100         | FUNC_OBJ '(' EXPR_LIST ')'
  101         | FUNC_OBJ '(' ')'

  102 VAR_DEF: l_var VAR_DEF_LIST
  103        | l_let VAR_DEF_LIST
  104        | l_const VAR_DEF_LIST

  105 VAR_DEF_LIST: l_name
  106             | l_name '=' EXPR
  107             | '[' NAME_LIST ']'
  108             | '[' NAME_LIST ']' '=' EXPR
  109             | '{' NAME_LIST '}'
  110             | '{' NAME_LIST '}' '=' EXPR
  111             | VAR_DEF_LIST ',' l_name
  112             | VAR_DEF_LIST ',' l_name '=' EXPR

  113 OBJECT: '{' '}'
  114       | '{' OBJECT_FLD_LIST '}'
  115       | '{' CLASS_INTERNAL '}'

  116 OBJECT_FLD_LIST: OBJECT_FLD
  117                | OBJECT_FLD ','
  118                | OBJECT_FLD ',' OBJECT_FLD_LIST

  119 OBJECT_FLD: KEY_NAME
  120           | KEY_NAME ':' EXPR
  121           | KEY_NAME '(' ')' '{' INTERNAL_CODE '}'
  122           | KEY_NAME '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'
  123           | CLASS_GSET_UNIT

  124 KEY_NAME: l_name
  125         | l_num
  126         | l_str
  127         | '[' EXPR ']'

  128 ARRAY: '[' ']'
  129      | '[' ARRAY_EXPR_LIST ']'

  130 ARRAY_EXPR_LIST: EXPR
  131                | ARRAY_EXPR_LIST ',' EXPR
  132                | ARRAY_EXPR_LIST ','

  133 EXPR_LIST: EXPR
  134          | EXPR_LIST ',' EXPR

  135 EXPR: NUM_EXPR
  136     | FUNC_EXPR

  137 FUNC_EXPR: FUNC_OBJ
  138          | l_async FUNC_OBJ
  139          | VAR_TERM '=' FUNC_EXPR

  140 FUNC_OBJ: l_function '(' ')' '{' INTERNAL_CODE '}'
  141         | l_function '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'
  142         | '(' ')' o_arrow EXPR
  143         | '(' EXPR_LIST ')' o_arrow EXPR
  144         | '(' ')' o_arrow '{' INTERNAL_CODE '}'
  145         | '(' EXPR_LIST ')' o_arrow '{' INTERNAL_CODE '}'
  146         | '(' FUNC_EXPR ')'
  147         | VAR_TERM o_arrow EXPR
  148         | VAR_TERM o_arrow '{' INTERNAL_CODE '}'
  149         | FUNC_DEF

  150 INEXPR: NUM_EXPR l_in NUM_EXPR

  151 NUM_EXPR: TERM
  152         | NUM_EXPR '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR o_or NUM_EXPR
  154         | NUM_EXPR o_rsh NUM_EXPR
  155         | NUM_EXPR '|' NUM_EXPR
  156         | NUM_EXPR '^' NUM_EXPR
  157         | NUM_EXPR '/' NUM_EXPR
  158         | NUM_EXPR '%' NUM_EXPR
  159         | NUM_EXPR o_and NUM_EXPR
  160         | NUM_EXPR o_lsh NUM_EXPR
  161         | NUM_EXPR '+' NUM_EXPR
  162         | NUM_EXPR '*' NUM_EXPR
  163         | NUM_EXPR '&' NUM_EXPR
  164         | NUM_EXPR '-' NUM_EXPR
  165         | NUM_EXPR o_rshsh NUM_EXPR
  166         | NUM_EXPR '<' NUM_EXPR
  167         | NUM_EXPR '>' NUM_EXPR
  168         | NUM_EXPR o_moreeq NUM_EXPR
  169         | NUM_EXPR o_lesseq NUM_EXPR
  170         | NUM_EXPR o_eqeq NUM_EXPR
  171         | NUM_EXPR o_noteq NUM_EXPR
  172         | NUM_EXPR o_eqeqeq NUM_EXPR
  173         | NUM_EXPR o_noteqeq NUM_EXPR
  174         | NUM_EXPR l_instanceof NUM_EXPR
  175         | INEXPR
  176         | VAR_TERM '=' NUM_EXPR
  177         | VAR_TERM o_lsheq NUM_EXPR
  178         | VAR_TERM o_oreq NUM_EXPR
  179         | VAR_TERM o_xoreq NUM_EXPR
  180         | VAR_TERM o_rsheq NUM_EXPR
  181         | VAR_TERM o_diveq NUM_EXPR
  182         | VAR_TERM o_subeq NUM_EXPR
  183         | VAR_TERM o_addeq NUM_EXPR
  184         | VAR_TERM o_mlteq NUM_EXPR
  185         | VAR_TERM o_andeq NUM_EXPR
  186         | VAR_TERM o_modeq NUM_EXPR
  187         | VAR_TERM o_rshsheq NUM_EXPR

  188 TERM: l_num
  189     | l_str
  190     | REGSTR
  191     | l_null
  192     | l_true
  193     | l_false
  194     | VAR_TERM
  195     | o_inc VAR_TERM
  196     | o_dec VAR_TERM
  197     | VAR_TERM o_inc
  198     | VAR_TERM o_dec
  199     | UNOOP TERM
  200     | l_void TERM
  201     | l_typeof TERM
  202     | l_new VAR_TERM
  203     | l_delete VAR_TERM
  204     | l_await VAR_TERM
  205     | FUNC_OBJ

  206 VAR_TERM: l_name
  207         | l_this
  208         | l_super
  209         | l_str '.' l_name
  210         | ARRAY
  211         | OBJECT
  212         | VAR_TERM '.' l_name
  213         | VAR_TERM '.' l_get
  214         | VAR_TERM '.' l_set
  215         | VAR_TERM '.' l_constructor
  216         | VAR_TERM '.' l_from
  217         | VAR_TERM '.' l_new
  218         | VAR_TERM '.' l_delete
  219         | VAR_TERM '.' l_async
  220         | VAR_TERM '(' ')'
  221         | VAR_TERM '(' EXPR_LIST ')'
  222         | VAR_TERM '[' NUM_EXPR ']'
  223         | '(' NUM_EXPR ')'
  224         | '(' EXPR_LIST ')'
  225         | l_from

  226 REGSTR: '/' REGSTRSYMB_INS '/'
  227       | '/' REGSTRSYMB_INS '/' l_name

  228 REGSTRSYMB_INS: REGSTRSYMB
  229               | REGSTRSYMB_INS REGSTRSYMB

  230 REGSTRSYMB: SOME_LEXEMS
  231           | '\\' SOME_LEXEMS
  232           | '\\' '['
  233           | '\\' '/'
  234           | '\\' '\\'
  235           | '[' REG_SET ']'

  236 REG_SET: REG_SET_SYMB
  237        | REG_SET REG_SET_SYMB

  238 REG_SET_SYMB: SOME_LEXEMS
  239             | '\\' SOME_LEXEMS
  240             | '\\' '['
  241             | '\\' '/'
  242             | '\\' '\\'
  243             | '['
  244             | '/'

  245 SOME_LEXEMS: l_num
  246            | l_await
  247            | l_break
  248            | l_case
  249            | l_catch
  250            | l_class
  251            | l_const
  252            | l_constructor
  253            | l_continue
  254            | l_debugger
  255            | l_default
  256            | l_delete
  257            | l_do
  258            | l_else
  259            | l_enum
  260            | l_export
  261            | l_extends
  262            | l_false
  263            | l_finally
  264            | l_for
  265            | l_function
  266            | l_get
  267            | l_if
  268            | l_import
  269            | l_in
  270            | l_instanceof
  271            | l_let
  272            | l_new
  273            | l_null
  274            | l_return
  275            | l_set
  276            | l_static
  277            | l_super
  278            | l_switch
  279            | l_this
  280            | l_throw
  281            | l_true
  282            | l_try
  283            | l_typeof
  284            | l_var
  285            | l_void
  286            | l_while
  287            | l_with
  288            | l_yield
  289            | l_name
  290            | '~'
  291            | o_or
  292            | o_oreq
  293            | '|'
  294            | o_xoreq
  295            | '^'
  296            | '?'
  297            | o_rshsheq
  298            | o_rshsh
  299            | o_rsheq
  300            | o_rsh
  301            | o_moreeq
  302            | '>'
  303            | o_eqeqeq
  304            | o_eqeq
  305            | o_arrow
  306            | '='
  307            | o_lesseq
  308            | o_lsheq
  309            | o_lsh
  310            | '<'
  311            | o_dblcolon
  312            | ':'
  313            | ';'
  314            | '.'
  315            | o_subeq
  316            | o_dec
  317            | '-'
  318            | ','
  319            | o_addeq
  320            | o_inc
  321            | '+'
  322            | o_mlteq
  323            | '*'
  324            | ')'
  325            | '('
  326            | o_andeq
  327            | '&'
  328            | o_and
  329            | o_modeq
  330            | '%'
  331            | o_noteqeq
  332            | o_noteq
  333            | '!'
  334            | '}'
  335            | '{'
  336            | ']'
  337            | l_str
  338            | l_any_char

  339 UNOOP: '-'
  340      | '+'
  341      | '!'
  342      | '~'


Terminals, with rules where they appear

$end (0) 0
'!' (33) 333 341
'%' (37) 158 330
'&' (38) 163 327
'(' (40) 53 54 55 58 59 60 61 62 63 64 65 66 67 68 90 91 92 93 94 95
    96 97 98 99 100 101 121 122 140 141 142 143 144 145 146 220 221
    223 224 325
')' (41) 53 54 55 58 59 60 61 62 63 64 65 66 67 68 90 91 92 93 94 95
    96 97 98 99 100 101 121 122 140 141 142 143 144 145 146 220 221
    223 224 324
'*' (42) 162 323
'+' (43) 161 321 340
',' (44) 52 78 111 112 117 118 131 132 134 318
'-' (45) 164 317 339
'.' (46) 209 212 213 214 215 216 217 218 219 314
'/' (47) 157 226 227 233 241 244
':' (58) 7 71 72 120 152 312
';' (59) 8 11 20 22 24 26 28 30 32 34 36 38 42 58 59 60 61 62 85 313
'<' (60) 166 310
'=' (61) 106 108 110 112 139 176 306
'>' (62) 167 302
'?' (63) 152 296
'[' (91) 107 108 127 128 129 222 232 235 240 243
'\\' (92) 231 232 233 234 239 240 241 242
']' (93) 107 108 127 128 129 222 235 336
'^' (94) 156 295
'{' (123) 10 45 46 49 50 53 66 68 73 74 75 76 90 91 92 93 94 95 96
    97 109 110 113 114 115 121 122 140 141 144 145 148 335
'|' (124) 155 293
'}' (125) 10 45 46 49 50 53 66 68 73 74 75 76 90 91 92 93 94 95 96
    97 109 110 113 114 115 121 122 140 141 144 145 148 334
'~' (126) 290 342
error (256)
l_await (258) 204 246
l_break (259) 22 23 30 31 247
l_case (260) 71 248
l_catch (261) 53 249
l_class (262) 73 74 75 76 250
l_const (263) 104 251
l_continue (264) 20 21 253
l_debugger (265) 254
l_default (266) 72 255
l_delete (267) 203 218 256
l_do (268) 66 257
l_else (269) 55 258
l_enum (270) 259
l_export (271) 43 44 45 46 260
l_extends (272) 75 76 261
l_false (273) 193 262
l_finally (274) 263
l_for (275) 58 59 60 61 62 63 64 65 264
l_function (276) 94 95 96 97 140 141 265
l_if (277) 54 55 267
l_import (278) 47 48 49 50 268
l_in (279) 64 65 150 269
l_instanceof (280) 174 270
l_let (281) 65 103 271
l_name (282) 7 43 44 47 48 51 52 64 65 73 74 75 76 94 95 96 97 105
    106 111 112 124 206 209 212 227 289
l_new (283) 202 217 272
l_null (284) 191 273
l_num (285) 125 188 245
l_return (286) 28 29 36 37 274
l_str (287) 44 46 48 50 126 189 209 337
l_super (288) 208 277
l_switch (289) 68 278
l_symb (290)
l_this (291) 207 279
l_throw (292) 26 27 34 35 280
l_true (293) 192 281
l_try (294) 53 282
l_typeof (295) 201 283
l_var (296) 64 102 284
l_void (297) 200 285
l_while (298) 66 67 286
l_with (299) 287
l_yield (300) 24 25 32 33 288
l_constructor (301) 92 93 215 252
l_get (302) 86 88 213 266
l_set (303) 87 89 214 275
l_static (304) 82 83 88 89 276
l_any_char (305) 338
l_from (306) 44 46 48 50 216 225
l_async (307) 96 97 138 219
o_addeq (308) 183 319
o_and (309) 159 328
o_andeq (310) 185 326
o_arrow (311) 142 143 144 145 147 148 305
o_dblcolon (312) 311
o_dec (313) 196 198 316
o_diveq (314) 181
o_eqeq (315) 170 304
o_inc (316) 195 197 320
o_lesseq (317) 169 307
o_lsh (318) 160 309
o_lsheq (319) 177 308
o_mlteq (320) 184 322
o_modeq (321) 186 329
o_moreeq (322) 168 301
o_noteq (323) 171 332
o_or (324) 153 291
o_oreq (325) 178 292
o_rsh (326) 154 300
o_rsheq (327) 180 299
o_subeq (328) 182 315
o_xoreq (329) 179 294
o_noteqeq (330) 173 331
o_eqeqeq (331) 172 303
o_rshsh (332) 165 298
o_rshsheq (333) 187 297


Nonterminals, with rules where they appear

$accept (104)
    on left: 0
START (105)
    on left: 1, on right: 0
CODE (106)
    on left: 2 3, on right: 1 3 5 6 7 66
INTERNAL_CODE (107)
    on left: 4 5, on right: 53 71 72 90 91 92 93 94 95 96 97 121 122
    140 141 144 145 148
CODE_MARK_LIST (108)
    on left: 6 7, on right: 7 10
ANYTHING (109)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42, on right: 2 3
    54 55 58 59 60 61 62 63 64 65 67
EXPORT_DEF (110)
    on left: 43 44 45 46, on right: 41
IMPORT_DEF (111)
    on left: 47 48 49 50, on right: 40
NAME_LIST (112)
    on left: 51 52, on right: 45 46 49 50 52 107 108 109 110
TRY_CATCH_DEF (113)
    on left: 53, on right: 19
IF_DEF (114)
    on left: 54 55, on right: 18
EMPTY_OR_EXPR (115)
    on left: 56 57, on right: 58 59 60 61 62
FOR_DEF (116)
    on left: 58 59 60 61 62 63 64 65, on right: 17
DO_WHILE_DEF (117)
    on left: 66, on right: 38 39
WHILE_DEF (118)
    on left: 67, on right: 16
SWITCH_DEF (119)
    on left: 68, on right: 15
SWITCH_INTERNAL (120)
    on left: 69 70, on right: 68 70
SWITCH_UNIT (121)
    on left: 71 72, on right: 69 70
CLASS_DEF (122)
    on left: 73 74 75 76, on right: 14 62
CLASS_INTERNAL (123)
    on left: 77 78 79, on right: 74 76 78 79 115
CLASS_UNIT (124)
    on left: 80 81 82 83 84 85, on right: 77 78 79
CLASS_GSET_UNIT (125)
    on left: 86 87 88 89, on right: 84 123
CLASS_FUNC (126)
    on left: 90 91, on right: 80 82 86 87 88 89
CLASS_CONSTRUCT (127)
    on left: 92 93, on right: 81 83
FUNC_DEF (128)
    on left: 94 95 96 97 98 99 100 101, on right: 13 61 149
VAR_DEF (129)
    on left: 102 103 104, on right: 8 9 59
VAR_DEF_LIST (130)
    on left: 105 106 107 108 109 110 111 112, on right: 102 103 104
    111 112
OBJECT (131)
    on left: 113 114 115, on right: 211
OBJECT_FLD_LIST (132)
    on left: 116 117 118, on right: 114 118
OBJECT_FLD (133)
    on left: 119 120 121 122 123, on right: 116 117 118
KEY_NAME (134)
    on left: 124 125 126 127, on right: 90 91 119 120 121 122
ARRAY (135)
    on left: 128 129, on right: 210
ARRAY_EXPR_LIST (136)
    on left: 130 131 132, on right: 129 131 132
EXPR_LIST (137)
    on left: 133 134, on right: 11 12 30 31 32 33 34 35 36 37 54 55
    57 60 66 67 68 91 93 95 97 98 100 122 134 141 143 145 221 224
EXPR (138)
    on left: 135 136, on right: 53 64 65 71 106 108 110 112 120 127
    130 131 133 134 142 143 147
FUNC_EXPR (139)
    on left: 137 138 139, on right: 136 139 146
FUNC_OBJ (140)
    on left: 140 141 142 143 144 145 146 147 148 149, on right: 98
    99 100 101 137 138 205
INEXPR (141)
    on left: 150, on right: 63 175
NUM_EXPR (142)
    on left: 151 152 153 154 155 156 157 158 159 160 161 162 163 164
    165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
    181 182 183 184 185 186 187, on right: 135 150 152 153 154 155
    156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171
    172 173 174 176 177 178 179 180 181 182 183 184 185 186 187 222
    223
TERM (143)
    on left: 188 189 190 191 192 193 194 195 196 197 198 199 200 201
    202 203 204 205, on right: 151 199 200 201
VAR_TERM (144)
    on left: 206 207 208 209 210 211 212 213 214 215 216 217 218 219
    220 221 222 223 224 225, on right: 75 76 139 147 148 176 177 178
    179 180 181 182 183 184 185 186 187 194 195 196 197 198 202 203
    204 212 213 214 215 216 217 218 219 220 221 222
REGSTR (145)
    on left: 226 227, on right: 190
REGSTRSYMB_INS (146)
    on left: 228 229, on right: 226 227 229
REGSTRSYMB (147)
    on left: 230 231 232 233 234 235, on right: 228 229
REG_SET (148)
    on left: 236 237, on right: 235 237
REG_SET_SYMB (149)
    on left: 238 239 240 241 242 243 244, on right: 236 237
SOME_LEXEMS (150)
    on left: 245 246 247 248 249 250 251 252 253 254 255 256 257 258
    259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274
    275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290
    291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306
    307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322
    323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338,
    on right: 230 231 238 239
UNOOP (151)
    on left: 339 340 341 342, on right: 199


State 0

    0 $accept: . START $end

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    START          go to state 45
    CODE           go to state 46
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 1

  204 TERM: l_await . VAR_TERM

    l_name   shift, and go to state 15
    l_str    shift, and go to state 71
    l_super  shift, and go to state 21
    l_this   shift, and go to state 23
    l_from   shift, and go to state 32
    '('      shift, and go to state 72
    '['      shift, and go to state 42
    '{'      shift, and go to state 73

    OBJECT    go to state 59
    ARRAY     go to state 60
    VAR_TERM  go to state 74


State 2

   22 ANYTHING: l_break . ';'
   23         | l_break .
   30         | l_break . EXPR_LIST ';'
   31         | l_break . EXPR_LIST

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 75
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    l_await     [reduce using rule 23 (ANYTHING)]
    l_delete    [reduce using rule 23 (ANYTHING)]
    l_false     [reduce using rule 23 (ANYTHING)]
    l_function  [reduce using rule 23 (ANYTHING)]
    l_name      [reduce using rule 23 (ANYTHING)]
    l_new       [reduce using rule 23 (ANYTHING)]
    l_null      [reduce using rule 23 (ANYTHING)]
    l_num       [reduce using rule 23 (ANYTHING)]
    l_str       [reduce using rule 23 (ANYTHING)]
    l_super     [reduce using rule 23 (ANYTHING)]
    l_this      [reduce using rule 23 (ANYTHING)]
    l_true      [reduce using rule 23 (ANYTHING)]
    l_typeof    [reduce using rule 23 (ANYTHING)]
    l_void      [reduce using rule 23 (ANYTHING)]
    l_from      [reduce using rule 23 (ANYTHING)]
    l_async     [reduce using rule 23 (ANYTHING)]
    o_dec       [reduce using rule 23 (ANYTHING)]
    o_inc       [reduce using rule 23 (ANYTHING)]
    '!'         [reduce using rule 23 (ANYTHING)]
    '('         [reduce using rule 23 (ANYTHING)]
    '+'         [reduce using rule 23 (ANYTHING)]
    '-'         [reduce using rule 23 (ANYTHING)]
    '/'         [reduce using rule 23 (ANYTHING)]
    ';'         [reduce using rule 23 (ANYTHING)]
    '['         [reduce using rule 23 (ANYTHING)]
    '{'         [reduce using rule 23 (ANYTHING)]
    '~'         [reduce using rule 23 (ANYTHING)]
    $default    reduce using rule 23 (ANYTHING)

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 77
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 3

   73 CLASS_DEF: l_class . l_name '{' '}'
   74          | l_class . l_name '{' CLASS_INTERNAL '}'
   75          | l_class . l_name l_extends VAR_TERM '{' '}'
   76          | l_class . l_name l_extends VAR_TERM '{' CLASS_INTERNAL '}'

    l_name  shift, and go to state 78


State 4

  104 VAR_DEF: l_const . VAR_DEF_LIST

    l_name  shift, and go to state 79
    '['     shift, and go to state 80
    '{'     shift, and go to state 81

    VAR_DEF_LIST  go to state 82


State 5

   20 ANYTHING: l_continue . ';'
   21         | l_continue .

    ';'  shift, and go to state 83

    ';'       [reduce using rule 21 (ANYTHING)]
    $default  reduce using rule 21 (ANYTHING)


State 6

  203 TERM: l_delete . VAR_TERM

    l_name   shift, and go to state 15
    l_str    shift, and go to state 71
    l_super  shift, and go to state 21
    l_this   shift, and go to state 23
    l_from   shift, and go to state 32
    '('      shift, and go to state 72
    '['      shift, and go to state 42
    '{'      shift, and go to state 73

    OBJECT    go to state 59
    ARRAY     go to state 60
    VAR_TERM  go to state 84


State 7

   66 DO_WHILE_DEF: l_do . '{' CODE '}' l_while '(' EXPR_LIST ')'

    '{'  shift, and go to state 85


State 8

   43 EXPORT_DEF: l_export . l_name
   44           | l_export . l_name l_from l_str
   45           | l_export . '{' NAME_LIST '}'
   46           | l_export . '{' NAME_LIST '}' l_from l_str

    l_name  shift, and go to state 86
    '{'     shift, and go to state 87


State 9

  193 TERM: l_false .

    $default  reduce using rule 193 (TERM)


State 10

   58 FOR_DEF: l_for . '(' ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   59        | l_for . '(' VAR_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   60        | l_for . '(' EXPR_LIST ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   61        | l_for . '(' FUNC_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   62        | l_for . '(' CLASS_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   63        | l_for . '(' INEXPR ')' ANYTHING
   64        | l_for . '(' l_var l_name l_in EXPR ')' ANYTHING
   65        | l_for . '(' l_let l_name l_in EXPR ')' ANYTHING

    '('  shift, and go to state 88


State 11

   94 FUNC_DEF: l_function . l_name '(' ')' '{' INTERNAL_CODE '}'
   95         | l_function . l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'
  140 FUNC_OBJ: l_function . '(' ')' '{' INTERNAL_CODE '}'
  141         | l_function . '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_name  shift, and go to state 89
    '('     shift, and go to state 90


State 12

   54 IF_DEF: l_if . '(' EXPR_LIST ')' ANYTHING
   55       | l_if . '(' EXPR_LIST ')' ANYTHING l_else ANYTHING

    '('  shift, and go to state 91


State 13

   47 IMPORT_DEF: l_import . l_name
   48           | l_import . l_name l_from l_str
   49           | l_import . '{' NAME_LIST '}'
   50           | l_import . '{' NAME_LIST '}' l_from l_str

    l_name  shift, and go to state 92
    '{'     shift, and go to state 93


State 14

  103 VAR_DEF: l_let . VAR_DEF_LIST

    l_name  shift, and go to state 79
    '['     shift, and go to state 80
    '{'     shift, and go to state 81

    VAR_DEF_LIST  go to state 94


State 15

  206 VAR_TERM: l_name .

    $default  reduce using rule 206 (VAR_TERM)


State 16

  202 TERM: l_new . VAR_TERM

    l_name   shift, and go to state 15
    l_str    shift, and go to state 71
    l_super  shift, and go to state 21
    l_this   shift, and go to state 23
    l_from   shift, and go to state 32
    '('      shift, and go to state 72
    '['      shift, and go to state 42
    '{'      shift, and go to state 73

    OBJECT    go to state 59
    ARRAY     go to state 60
    VAR_TERM  go to state 95


State 17

  191 TERM: l_null .

    $default  reduce using rule 191 (TERM)


State 18

  188 TERM: l_num .

    $default  reduce using rule 188 (TERM)


State 19

   28 ANYTHING: l_return . ';'
   29         | l_return .
   36         | l_return . EXPR_LIST ';'
   37         | l_return . EXPR_LIST

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 96
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    l_await     [reduce using rule 29 (ANYTHING)]
    l_delete    [reduce using rule 29 (ANYTHING)]
    l_false     [reduce using rule 29 (ANYTHING)]
    l_function  [reduce using rule 29 (ANYTHING)]
    l_name      [reduce using rule 29 (ANYTHING)]
    l_new       [reduce using rule 29 (ANYTHING)]
    l_null      [reduce using rule 29 (ANYTHING)]
    l_num       [reduce using rule 29 (ANYTHING)]
    l_str       [reduce using rule 29 (ANYTHING)]
    l_super     [reduce using rule 29 (ANYTHING)]
    l_this      [reduce using rule 29 (ANYTHING)]
    l_true      [reduce using rule 29 (ANYTHING)]
    l_typeof    [reduce using rule 29 (ANYTHING)]
    l_void      [reduce using rule 29 (ANYTHING)]
    l_from      [reduce using rule 29 (ANYTHING)]
    l_async     [reduce using rule 29 (ANYTHING)]
    o_dec       [reduce using rule 29 (ANYTHING)]
    o_inc       [reduce using rule 29 (ANYTHING)]
    '!'         [reduce using rule 29 (ANYTHING)]
    '('         [reduce using rule 29 (ANYTHING)]
    '+'         [reduce using rule 29 (ANYTHING)]
    '-'         [reduce using rule 29 (ANYTHING)]
    '/'         [reduce using rule 29 (ANYTHING)]
    ';'         [reduce using rule 29 (ANYTHING)]
    '['         [reduce using rule 29 (ANYTHING)]
    '{'         [reduce using rule 29 (ANYTHING)]
    '~'         [reduce using rule 29 (ANYTHING)]
    $default    reduce using rule 29 (ANYTHING)

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 97
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 20

  189 TERM: l_str .
  209 VAR_TERM: l_str . '.' l_name

    '.'  shift, and go to state 98

    $default  reduce using rule 189 (TERM)


State 21

  208 VAR_TERM: l_super .

    $default  reduce using rule 208 (VAR_TERM)


State 22

   68 SWITCH_DEF: l_switch . '(' EXPR_LIST ')' '{' SWITCH_INTERNAL '}'

    '('  shift, and go to state 99


State 23

  207 VAR_TERM: l_this .

    $default  reduce using rule 207 (VAR_TERM)


State 24

   26 ANYTHING: l_throw . ';'
   27         | l_throw .
   34         | l_throw . EXPR_LIST ';'
   35         | l_throw . EXPR_LIST

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 100
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    l_await     [reduce using rule 27 (ANYTHING)]
    l_delete    [reduce using rule 27 (ANYTHING)]
    l_false     [reduce using rule 27 (ANYTHING)]
    l_function  [reduce using rule 27 (ANYTHING)]
    l_name      [reduce using rule 27 (ANYTHING)]
    l_new       [reduce using rule 27 (ANYTHING)]
    l_null      [reduce using rule 27 (ANYTHING)]
    l_num       [reduce using rule 27 (ANYTHING)]
    l_str       [reduce using rule 27 (ANYTHING)]
    l_super     [reduce using rule 27 (ANYTHING)]
    l_this      [reduce using rule 27 (ANYTHING)]
    l_true      [reduce using rule 27 (ANYTHING)]
    l_typeof    [reduce using rule 27 (ANYTHING)]
    l_void      [reduce using rule 27 (ANYTHING)]
    l_from      [reduce using rule 27 (ANYTHING)]
    l_async     [reduce using rule 27 (ANYTHING)]
    o_dec       [reduce using rule 27 (ANYTHING)]
    o_inc       [reduce using rule 27 (ANYTHING)]
    '!'         [reduce using rule 27 (ANYTHING)]
    '('         [reduce using rule 27 (ANYTHING)]
    '+'         [reduce using rule 27 (ANYTHING)]
    '-'         [reduce using rule 27 (ANYTHING)]
    '/'         [reduce using rule 27 (ANYTHING)]
    ';'         [reduce using rule 27 (ANYTHING)]
    '['         [reduce using rule 27 (ANYTHING)]
    '{'         [reduce using rule 27 (ANYTHING)]
    '~'         [reduce using rule 27 (ANYTHING)]
    $default    reduce using rule 27 (ANYTHING)

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 101
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 25

  192 TERM: l_true .

    $default  reduce using rule 192 (TERM)


State 26

   53 TRY_CATCH_DEF: l_try . '{' INTERNAL_CODE '}' l_catch '(' EXPR ')' '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 102


State 27

  201 TERM: l_typeof . TERM

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    TERM      go to state 105
    VAR_TERM  go to state 106
    REGSTR    go to state 69
    UNOOP     go to state 70


State 28

  102 VAR_DEF: l_var . VAR_DEF_LIST

    l_name  shift, and go to state 79
    '['     shift, and go to state 80
    '{'     shift, and go to state 81

    VAR_DEF_LIST  go to state 107


State 29

  200 TERM: l_void . TERM

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    TERM      go to state 108
    VAR_TERM  go to state 106
    REGSTR    go to state 69
    UNOOP     go to state 70


State 30

   67 WHILE_DEF: l_while . '(' EXPR_LIST ')' ANYTHING

    '('  shift, and go to state 109


State 31

   24 ANYTHING: l_yield . ';'
   25         | l_yield .
   32         | l_yield . EXPR_LIST ';'
   33         | l_yield . EXPR_LIST

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 110
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    l_await     [reduce using rule 25 (ANYTHING)]
    l_delete    [reduce using rule 25 (ANYTHING)]
    l_false     [reduce using rule 25 (ANYTHING)]
    l_function  [reduce using rule 25 (ANYTHING)]
    l_name      [reduce using rule 25 (ANYTHING)]
    l_new       [reduce using rule 25 (ANYTHING)]
    l_null      [reduce using rule 25 (ANYTHING)]
    l_num       [reduce using rule 25 (ANYTHING)]
    l_str       [reduce using rule 25 (ANYTHING)]
    l_super     [reduce using rule 25 (ANYTHING)]
    l_this      [reduce using rule 25 (ANYTHING)]
    l_true      [reduce using rule 25 (ANYTHING)]
    l_typeof    [reduce using rule 25 (ANYTHING)]
    l_void      [reduce using rule 25 (ANYTHING)]
    l_from      [reduce using rule 25 (ANYTHING)]
    l_async     [reduce using rule 25 (ANYTHING)]
    o_dec       [reduce using rule 25 (ANYTHING)]
    o_inc       [reduce using rule 25 (ANYTHING)]
    '!'         [reduce using rule 25 (ANYTHING)]
    '('         [reduce using rule 25 (ANYTHING)]
    '+'         [reduce using rule 25 (ANYTHING)]
    '-'         [reduce using rule 25 (ANYTHING)]
    '/'         [reduce using rule 25 (ANYTHING)]
    ';'         [reduce using rule 25 (ANYTHING)]
    '['         [reduce using rule 25 (ANYTHING)]
    '{'         [reduce using rule 25 (ANYTHING)]
    '~'         [reduce using rule 25 (ANYTHING)]
    $default    reduce using rule 25 (ANYTHING)

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 111
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 32

  225 VAR_TERM: l_from .

    $default  reduce using rule 225 (VAR_TERM)


State 33

   96 FUNC_DEF: l_async . l_function l_name '(' ')' '{' INTERNAL_CODE '}'
   97         | l_async . l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'
  138 FUNC_EXPR: l_async . FUNC_OBJ

    l_function  shift, and go to state 112
    l_name      shift, and go to state 15
    l_str       shift, and go to state 71
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    '('         shift, and go to state 37
    '['         shift, and go to state 42
    '{'         shift, and go to state 73

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 113
    VAR_TERM  go to state 114


State 34

  196 TERM: o_dec . VAR_TERM

    l_name   shift, and go to state 15
    l_str    shift, and go to state 71
    l_super  shift, and go to state 21
    l_this   shift, and go to state 23
    l_from   shift, and go to state 32
    '('      shift, and go to state 72
    '['      shift, and go to state 42
    '{'      shift, and go to state 73

    OBJECT    go to state 59
    ARRAY     go to state 60
    VAR_TERM  go to state 115


State 35

  195 TERM: o_inc . VAR_TERM

    l_name   shift, and go to state 15
    l_str    shift, and go to state 71
    l_super  shift, and go to state 21
    l_this   shift, and go to state 23
    l_from   shift, and go to state 32
    '('      shift, and go to state 72
    '['      shift, and go to state 42
    '{'      shift, and go to state 73

    OBJECT    go to state 59
    ARRAY     go to state 60
    VAR_TERM  go to state 116


State 36

  341 UNOOP: '!' .

    $default  reduce using rule 341 (UNOOP)


State 37

   98 FUNC_DEF: '(' . FUNC_OBJ ')' '(' EXPR_LIST ')'
   99         | '(' . FUNC_OBJ ')' '(' ')'
  142 FUNC_OBJ: '(' . ')' o_arrow EXPR
  143         | '(' . EXPR_LIST ')' o_arrow EXPR
  144         | '(' . ')' o_arrow '{' INTERNAL_CODE '}'
  145         | '(' . EXPR_LIST ')' o_arrow '{' INTERNAL_CODE '}'
  146         | '(' . FUNC_EXPR ')'
  223 VAR_TERM: '(' . NUM_EXPR ')'
  224         | '(' . EXPR_LIST ')'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 117
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 118
    EXPR       go to state 62
    FUNC_EXPR  go to state 119
    FUNC_OBJ   go to state 120
    INEXPR     go to state 65
    NUM_EXPR   go to state 121
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 38

  340 UNOOP: '+' .

    $default  reduce using rule 340 (UNOOP)


State 39

  339 UNOOP: '-' .

    $default  reduce using rule 339 (UNOOP)


State 40

  226 REGSTR: '/' . REGSTRSYMB_INS '/'
  227       | '/' . REGSTRSYMB_INS '/' l_name

    l_await        shift, and go to state 122
    l_break        shift, and go to state 123
    l_case         shift, and go to state 124
    l_catch        shift, and go to state 125
    l_class        shift, and go to state 126
    l_const        shift, and go to state 127
    l_continue     shift, and go to state 128
    l_debugger     shift, and go to state 129
    l_default      shift, and go to state 130
    l_delete       shift, and go to state 131
    l_do           shift, and go to state 132
    l_else         shift, and go to state 133
    l_enum         shift, and go to state 134
    l_export       shift, and go to state 135
    l_extends      shift, and go to state 136
    l_false        shift, and go to state 137
    l_finally      shift, and go to state 138
    l_for          shift, and go to state 139
    l_function     shift, and go to state 140
    l_if           shift, and go to state 141
    l_import       shift, and go to state 142
    l_in           shift, and go to state 143
    l_instanceof   shift, and go to state 144
    l_let          shift, and go to state 145
    l_name         shift, and go to state 146
    l_new          shift, and go to state 147
    l_null         shift, and go to state 148
    l_num          shift, and go to state 149
    l_return       shift, and go to state 150
    l_str          shift, and go to state 151
    l_super        shift, and go to state 152
    l_switch       shift, and go to state 153
    l_this         shift, and go to state 154
    l_throw        shift, and go to state 155
    l_true         shift, and go to state 156
    l_try          shift, and go to state 157
    l_typeof       shift, and go to state 158
    l_var          shift, and go to state 159
    l_void         shift, and go to state 160
    l_while        shift, and go to state 161
    l_with         shift, and go to state 162
    l_yield        shift, and go to state 163
    l_constructor  shift, and go to state 164
    l_get          shift, and go to state 165
    l_set          shift, and go to state 166
    l_static       shift, and go to state 167
    l_any_char     shift, and go to state 168
    o_addeq        shift, and go to state 169
    o_and          shift, and go to state 170
    o_andeq        shift, and go to state 171
    o_arrow        shift, and go to state 172
    o_dblcolon     shift, and go to state 173
    o_dec          shift, and go to state 174
    o_eqeq         shift, and go to state 175
    o_inc          shift, and go to state 176
    o_lesseq       shift, and go to state 177
    o_lsh          shift, and go to state 178
    o_lsheq        shift, and go to state 179
    o_mlteq        shift, and go to state 180
    o_modeq        shift, and go to state 181
    o_moreeq       shift, and go to state 182
    o_noteq        shift, and go to state 183
    o_or           shift, and go to state 184
    o_oreq         shift, and go to state 185
    o_rsh          shift, and go to state 186
    o_rsheq        shift, and go to state 187
    o_subeq        shift, and go to state 188
    o_xoreq        shift, and go to state 189
    o_noteqeq      shift, and go to state 190
    o_eqeqeq       shift, and go to state 191
    o_rshsh        shift, and go to state 192
    o_rshsheq      shift, and go to state 193
    '!'            shift, and go to state 194
    '%'            shift, and go to state 195
    '&'            shift, and go to state 196
    '('            shift, and go to state 197
    ')'            shift, and go to state 198
    '*'            shift, and go to state 199
    '+'            shift, and go to state 200
    ','            shift, and go to state 201
    '-'            shift, and go to state 202
    '.'            shift, and go to state 203
    ':'            shift, and go to state 204
    ';'            shift, and go to state 205
    '<'            shift, and go to state 206
    '='            shift, and go to state 207
    '>'            shift, and go to state 208
    '?'            shift, and go to state 209
    '['            shift, and go to state 210
    '\\'           shift, and go to state 211
    ']'            shift, and go to state 212
    '^'            shift, and go to state 213
    '{'            shift, and go to state 214
    '|'            shift, and go to state 215
    '}'            shift, and go to state 216
    '~'            shift, and go to state 217

    REGSTRSYMB_INS  go to state 218
    REGSTRSYMB      go to state 219
    SOME_LEXEMS     go to state 220


State 41

   42 ANYTHING: ';' .

    $default  reduce using rule 42 (ANYTHING)


State 42

  128 ARRAY: '[' . ']'
  129      | '[' . ARRAY_EXPR_LIST ']'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    ']'         shift, and go to state 221
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF         go to state 76
    OBJECT           go to state 59
    ARRAY            go to state 60
    ARRAY_EXPR_LIST  go to state 222
    EXPR             go to state 223
    FUNC_EXPR        go to state 63
    FUNC_OBJ         go to state 64
    INEXPR           go to state 65
    NUM_EXPR         go to state 66
    TERM             go to state 67
    VAR_TERM         go to state 68
    REGSTR           go to state 69
    UNOOP            go to state 70


State 43

   10 ANYTHING: '{' . CODE_MARK_LIST '}'
  113 OBJECT: '{' . '}'
  114       | '{' . OBJECT_FLD_LIST '}'
  115       | '{' . CLASS_INTERNAL '}'

    l_await        shift, and go to state 1
    l_break        shift, and go to state 2
    l_class        shift, and go to state 3
    l_const        shift, and go to state 4
    l_continue     shift, and go to state 5
    l_delete       shift, and go to state 6
    l_do           shift, and go to state 7
    l_export       shift, and go to state 8
    l_false        shift, and go to state 9
    l_for          shift, and go to state 10
    l_function     shift, and go to state 11
    l_if           shift, and go to state 12
    l_import       shift, and go to state 13
    l_let          shift, and go to state 14
    l_name         shift, and go to state 224
    l_new          shift, and go to state 16
    l_null         shift, and go to state 17
    l_num          shift, and go to state 225
    l_return       shift, and go to state 19
    l_str          shift, and go to state 226
    l_super        shift, and go to state 21
    l_switch       shift, and go to state 22
    l_this         shift, and go to state 23
    l_throw        shift, and go to state 24
    l_true         shift, and go to state 25
    l_try          shift, and go to state 26
    l_typeof       shift, and go to state 27
    l_var          shift, and go to state 28
    l_void         shift, and go to state 29
    l_while        shift, and go to state 30
    l_yield        shift, and go to state 31
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 228
    l_set          shift, and go to state 229
    l_static       shift, and go to state 230
    l_from         shift, and go to state 32
    l_async        shift, and go to state 33
    o_dec          shift, and go to state 34
    o_inc          shift, and go to state 35
    '!'            shift, and go to state 36
    '('            shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '/'            shift, and go to state 40
    ';'            shift, and go to state 231
    '['            shift, and go to state 232
    '{'            shift, and go to state 43
    '}'            shift, and go to state 233
    '~'            shift, and go to state 44

    CODE             go to state 234
    CODE_MARK_LIST   go to state 235
    ANYTHING         go to state 47
    EXPORT_DEF       go to state 48
    IMPORT_DEF       go to state 49
    TRY_CATCH_DEF    go to state 50
    IF_DEF           go to state 51
    FOR_DEF          go to state 52
    DO_WHILE_DEF     go to state 53
    WHILE_DEF        go to state 54
    SWITCH_DEF       go to state 55
    CLASS_DEF        go to state 56
    CLASS_INTERNAL   go to state 236
    CLASS_UNIT       go to state 237
    CLASS_GSET_UNIT  go to state 238
    CLASS_FUNC       go to state 239
    CLASS_CONSTRUCT  go to state 240
    FUNC_DEF         go to state 57
    VAR_DEF          go to state 58
    OBJECT           go to state 59
    OBJECT_FLD_LIST  go to state 241
    OBJECT_FLD       go to state 242
    KEY_NAME         go to state 243
    ARRAY            go to state 60
    EXPR_LIST        go to state 61
    EXPR             go to state 62
    FUNC_EXPR        go to state 63
    FUNC_OBJ         go to state 64
    INEXPR           go to state 65
    NUM_EXPR         go to state 66
    TERM             go to state 67
    VAR_TERM         go to state 68
    REGSTR           go to state 69
    UNOOP            go to state 70


State 44

  342 UNOOP: '~' .

    $default  reduce using rule 342 (UNOOP)


State 45

    0 $accept: START . $end

    $end  shift, and go to state 244


State 46

    1 START: CODE .
    3 CODE: CODE . ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 1 (START)

    ANYTHING       go to state 245
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 47

    2 CODE: ANYTHING .

    $default  reduce using rule 2 (CODE)


State 48

   41 ANYTHING: EXPORT_DEF .

    $default  reduce using rule 41 (ANYTHING)


State 49

   40 ANYTHING: IMPORT_DEF .

    $default  reduce using rule 40 (ANYTHING)


State 50

   19 ANYTHING: TRY_CATCH_DEF .

    $default  reduce using rule 19 (ANYTHING)


State 51

   18 ANYTHING: IF_DEF .

    $default  reduce using rule 18 (ANYTHING)


State 52

   17 ANYTHING: FOR_DEF .

    $default  reduce using rule 17 (ANYTHING)


State 53

   38 ANYTHING: DO_WHILE_DEF . ';'
   39         | DO_WHILE_DEF .

    ';'  shift, and go to state 246

    ';'       [reduce using rule 39 (ANYTHING)]
    $default  reduce using rule 39 (ANYTHING)


State 54

   16 ANYTHING: WHILE_DEF .

    $default  reduce using rule 16 (ANYTHING)


State 55

   15 ANYTHING: SWITCH_DEF .

    $default  reduce using rule 15 (ANYTHING)


State 56

   14 ANYTHING: CLASS_DEF .

    $default  reduce using rule 14 (ANYTHING)


State 57

   13 ANYTHING: FUNC_DEF .
  149 FUNC_OBJ: FUNC_DEF .

    $end          reduce using rule 13 (ANYTHING)
    $end          [reduce using rule 149 (FUNC_OBJ)]
    l_await       reduce using rule 13 (ANYTHING)
    l_await       [reduce using rule 149 (FUNC_OBJ)]
    l_break       reduce using rule 13 (ANYTHING)
    l_break       [reduce using rule 149 (FUNC_OBJ)]
    l_case        reduce using rule 13 (ANYTHING)
    l_case        [reduce using rule 149 (FUNC_OBJ)]
    l_class       reduce using rule 13 (ANYTHING)
    l_class       [reduce using rule 149 (FUNC_OBJ)]
    l_const       reduce using rule 13 (ANYTHING)
    l_const       [reduce using rule 149 (FUNC_OBJ)]
    l_continue    reduce using rule 13 (ANYTHING)
    l_continue    [reduce using rule 149 (FUNC_OBJ)]
    l_default     reduce using rule 13 (ANYTHING)
    l_default     [reduce using rule 149 (FUNC_OBJ)]
    l_delete      reduce using rule 13 (ANYTHING)
    l_delete      [reduce using rule 149 (FUNC_OBJ)]
    l_do          reduce using rule 13 (ANYTHING)
    l_do          [reduce using rule 149 (FUNC_OBJ)]
    l_else        reduce using rule 13 (ANYTHING)
    l_else        [reduce using rule 149 (FUNC_OBJ)]
    l_export      reduce using rule 13 (ANYTHING)
    l_export      [reduce using rule 149 (FUNC_OBJ)]
    l_false       reduce using rule 13 (ANYTHING)
    l_false       [reduce using rule 149 (FUNC_OBJ)]
    l_for         reduce using rule 13 (ANYTHING)
    l_for         [reduce using rule 149 (FUNC_OBJ)]
    l_function    reduce using rule 13 (ANYTHING)
    l_function    [reduce using rule 149 (FUNC_OBJ)]
    l_if          reduce using rule 13 (ANYTHING)
    l_if          [reduce using rule 149 (FUNC_OBJ)]
    l_import      reduce using rule 13 (ANYTHING)
    l_import      [reduce using rule 149 (FUNC_OBJ)]
    l_in          reduce using rule 149 (FUNC_OBJ)
    l_instanceof  reduce using rule 149 (FUNC_OBJ)
    l_let         reduce using rule 13 (ANYTHING)
    l_let         [reduce using rule 149 (FUNC_OBJ)]
    l_name        reduce using rule 13 (ANYTHING)
    l_name        [reduce using rule 149 (FUNC_OBJ)]
    l_new         reduce using rule 13 (ANYTHING)
    l_new         [reduce using rule 149 (FUNC_OBJ)]
    l_null        reduce using rule 13 (ANYTHING)
    l_null        [reduce using rule 149 (FUNC_OBJ)]
    l_num         reduce using rule 13 (ANYTHING)
    l_num         [reduce using rule 149 (FUNC_OBJ)]
    l_return      reduce using rule 13 (ANYTHING)
    l_return      [reduce using rule 149 (FUNC_OBJ)]
    l_str         reduce using rule 13 (ANYTHING)
    l_str         [reduce using rule 149 (FUNC_OBJ)]
    l_super       reduce using rule 13 (ANYTHING)
    l_super       [reduce using rule 149 (FUNC_OBJ)]
    l_switch      reduce using rule 13 (ANYTHING)
    l_switch      [reduce using rule 149 (FUNC_OBJ)]
    l_this        reduce using rule 13 (ANYTHING)
    l_this        [reduce using rule 149 (FUNC_OBJ)]
    l_throw       reduce using rule 13 (ANYTHING)
    l_throw       [reduce using rule 149 (FUNC_OBJ)]
    l_true        reduce using rule 13 (ANYTHING)
    l_true        [reduce using rule 149 (FUNC_OBJ)]
    l_try         reduce using rule 13 (ANYTHING)
    l_try         [reduce using rule 149 (FUNC_OBJ)]
    l_typeof      reduce using rule 13 (ANYTHING)
    l_typeof      [reduce using rule 149 (FUNC_OBJ)]
    l_var         reduce using rule 13 (ANYTHING)
    l_var         [reduce using rule 149 (FUNC_OBJ)]
    l_void        reduce using rule 13 (ANYTHING)
    l_void        [reduce using rule 149 (FUNC_OBJ)]
    l_while       reduce using rule 13 (ANYTHING)
    l_while       [reduce using rule 149 (FUNC_OBJ)]
    l_yield       reduce using rule 13 (ANYTHING)
    l_yield       [reduce using rule 149 (FUNC_OBJ)]
    l_from        reduce using rule 13 (ANYTHING)
    l_from        [reduce using rule 149 (FUNC_OBJ)]
    l_async       reduce using rule 13 (ANYTHING)
    l_async       [reduce using rule 149 (FUNC_OBJ)]
    o_and         reduce using rule 149 (FUNC_OBJ)
    o_dec         reduce using rule 13 (ANYTHING)
    o_dec         [reduce using rule 149 (FUNC_OBJ)]
    o_eqeq        reduce using rule 149 (FUNC_OBJ)
    o_inc         reduce using rule 13 (ANYTHING)
    o_inc         [reduce using rule 149 (FUNC_OBJ)]
    o_lesseq      reduce using rule 149 (FUNC_OBJ)
    o_lsh         reduce using rule 149 (FUNC_OBJ)
    o_moreeq      reduce using rule 149 (FUNC_OBJ)
    o_noteq       reduce using rule 149 (FUNC_OBJ)
    o_or          reduce using rule 149 (FUNC_OBJ)
    o_rsh         reduce using rule 149 (FUNC_OBJ)
    o_noteqeq     reduce using rule 149 (FUNC_OBJ)
    o_eqeqeq      reduce using rule 149 (FUNC_OBJ)
    o_rshsh       reduce using rule 149 (FUNC_OBJ)
    '!'           reduce using rule 13 (ANYTHING)
    '!'           [reduce using rule 149 (FUNC_OBJ)]
    '%'           reduce using rule 149 (FUNC_OBJ)
    '&'           reduce using rule 149 (FUNC_OBJ)
    '('           reduce using rule 13 (ANYTHING)
    '('           [reduce using rule 149 (FUNC_OBJ)]
    '*'           reduce using rule 149 (FUNC_OBJ)
    '+'           reduce using rule 13 (ANYTHING)
    '+'           [reduce using rule 149 (FUNC_OBJ)]
    ','           reduce using rule 149 (FUNC_OBJ)
    '-'           reduce using rule 13 (ANYTHING)
    '-'           [reduce using rule 149 (FUNC_OBJ)]
    '/'           reduce using rule 13 (ANYTHING)
    '/'           [reduce using rule 149 (FUNC_OBJ)]
    ';'           reduce using rule 13 (ANYTHING)
    ';'           [reduce using rule 149 (FUNC_OBJ)]
    '<'           reduce using rule 149 (FUNC_OBJ)
    '>'           reduce using rule 149 (FUNC_OBJ)
    '?'           reduce using rule 149 (FUNC_OBJ)
    '['           reduce using rule 13 (ANYTHING)
    '['           [reduce using rule 149 (FUNC_OBJ)]
    '^'           reduce using rule 149 (FUNC_OBJ)
    '{'           reduce using rule 13 (ANYTHING)
    '{'           [reduce using rule 149 (FUNC_OBJ)]
    '|'           reduce using rule 149 (FUNC_OBJ)
    '}'           reduce using rule 13 (ANYTHING)
    '}'           [reduce using rule 149 (FUNC_OBJ)]
    '~'           reduce using rule 13 (ANYTHING)
    '~'           [reduce using rule 149 (FUNC_OBJ)]
    $default      reduce using rule 13 (ANYTHING)


State 58

    8 ANYTHING: VAR_DEF . ';'
    9         | VAR_DEF .

    ';'  shift, and go to state 247

    ';'       [reduce using rule 9 (ANYTHING)]
    $default  reduce using rule 9 (ANYTHING)


State 59

  211 VAR_TERM: OBJECT .

    $default  reduce using rule 211 (VAR_TERM)


State 60

  210 VAR_TERM: ARRAY .

    $default  reduce using rule 210 (VAR_TERM)


State 61

   11 ANYTHING: EXPR_LIST . ';'
   12         | EXPR_LIST .
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ','  shift, and go to state 248
    ';'  shift, and go to state 249

    ';'       [reduce using rule 12 (ANYTHING)]
    $default  reduce using rule 12 (ANYTHING)


State 62

  133 EXPR_LIST: EXPR .

    $default  reduce using rule 133 (EXPR_LIST)


State 63

  136 EXPR: FUNC_EXPR .

    $default  reduce using rule 136 (EXPR)


State 64

  100 FUNC_DEF: FUNC_OBJ . '(' EXPR_LIST ')'
  101         | FUNC_OBJ . '(' ')'
  137 FUNC_EXPR: FUNC_OBJ .
  205 TERM: FUNC_OBJ .

    '('  shift, and go to state 250

    $end          reduce using rule 137 (FUNC_EXPR)
    $end          [reduce using rule 205 (TERM)]
    l_await       reduce using rule 137 (FUNC_EXPR)
    l_await       [reduce using rule 205 (TERM)]
    l_break       reduce using rule 137 (FUNC_EXPR)
    l_break       [reduce using rule 205 (TERM)]
    l_case        reduce using rule 137 (FUNC_EXPR)
    l_case        [reduce using rule 205 (TERM)]
    l_class       reduce using rule 137 (FUNC_EXPR)
    l_class       [reduce using rule 205 (TERM)]
    l_const       reduce using rule 137 (FUNC_EXPR)
    l_const       [reduce using rule 205 (TERM)]
    l_continue    reduce using rule 137 (FUNC_EXPR)
    l_continue    [reduce using rule 205 (TERM)]
    l_default     reduce using rule 137 (FUNC_EXPR)
    l_default     [reduce using rule 205 (TERM)]
    l_delete      reduce using rule 137 (FUNC_EXPR)
    l_delete      [reduce using rule 205 (TERM)]
    l_do          reduce using rule 137 (FUNC_EXPR)
    l_do          [reduce using rule 205 (TERM)]
    l_else        reduce using rule 137 (FUNC_EXPR)
    l_else        [reduce using rule 205 (TERM)]
    l_export      reduce using rule 137 (FUNC_EXPR)
    l_export      [reduce using rule 205 (TERM)]
    l_false       reduce using rule 137 (FUNC_EXPR)
    l_false       [reduce using rule 205 (TERM)]
    l_for         reduce using rule 137 (FUNC_EXPR)
    l_for         [reduce using rule 205 (TERM)]
    l_function    reduce using rule 137 (FUNC_EXPR)
    l_function    [reduce using rule 205 (TERM)]
    l_if          reduce using rule 137 (FUNC_EXPR)
    l_if          [reduce using rule 205 (TERM)]
    l_import      reduce using rule 137 (FUNC_EXPR)
    l_import      [reduce using rule 205 (TERM)]
    l_in          reduce using rule 137 (FUNC_EXPR)
    l_in          [reduce using rule 205 (TERM)]
    l_instanceof  reduce using rule 137 (FUNC_EXPR)
    l_instanceof  [reduce using rule 205 (TERM)]
    l_let         reduce using rule 137 (FUNC_EXPR)
    l_let         [reduce using rule 205 (TERM)]
    l_name        reduce using rule 137 (FUNC_EXPR)
    l_name        [reduce using rule 205 (TERM)]
    l_new         reduce using rule 137 (FUNC_EXPR)
    l_new         [reduce using rule 205 (TERM)]
    l_null        reduce using rule 137 (FUNC_EXPR)
    l_null        [reduce using rule 205 (TERM)]
    l_num         reduce using rule 137 (FUNC_EXPR)
    l_num         [reduce using rule 205 (TERM)]
    l_return      reduce using rule 137 (FUNC_EXPR)
    l_return      [reduce using rule 205 (TERM)]
    l_str         reduce using rule 137 (FUNC_EXPR)
    l_str         [reduce using rule 205 (TERM)]
    l_super       reduce using rule 137 (FUNC_EXPR)
    l_super       [reduce using rule 205 (TERM)]
    l_switch      reduce using rule 137 (FUNC_EXPR)
    l_switch      [reduce using rule 205 (TERM)]
    l_this        reduce using rule 137 (FUNC_EXPR)
    l_this        [reduce using rule 205 (TERM)]
    l_throw       reduce using rule 137 (FUNC_EXPR)
    l_throw       [reduce using rule 205 (TERM)]
    l_true        reduce using rule 137 (FUNC_EXPR)
    l_true        [reduce using rule 205 (TERM)]
    l_try         reduce using rule 137 (FUNC_EXPR)
    l_try         [reduce using rule 205 (TERM)]
    l_typeof      reduce using rule 137 (FUNC_EXPR)
    l_typeof      [reduce using rule 205 (TERM)]
    l_var         reduce using rule 137 (FUNC_EXPR)
    l_var         [reduce using rule 205 (TERM)]
    l_void        reduce using rule 137 (FUNC_EXPR)
    l_void        [reduce using rule 205 (TERM)]
    l_while       reduce using rule 137 (FUNC_EXPR)
    l_while       [reduce using rule 205 (TERM)]
    l_yield       reduce using rule 137 (FUNC_EXPR)
    l_yield       [reduce using rule 205 (TERM)]
    l_from        reduce using rule 137 (FUNC_EXPR)
    l_from        [reduce using rule 205 (TERM)]
    l_async       reduce using rule 137 (FUNC_EXPR)
    l_async       [reduce using rule 205 (TERM)]
    o_and         reduce using rule 137 (FUNC_EXPR)
    o_and         [reduce using rule 205 (TERM)]
    o_dec         reduce using rule 137 (FUNC_EXPR)
    o_dec         [reduce using rule 205 (TERM)]
    o_eqeq        reduce using rule 137 (FUNC_EXPR)
    o_eqeq        [reduce using rule 205 (TERM)]
    o_inc         reduce using rule 137 (FUNC_EXPR)
    o_inc         [reduce using rule 205 (TERM)]
    o_lesseq      reduce using rule 137 (FUNC_EXPR)
    o_lesseq      [reduce using rule 205 (TERM)]
    o_lsh         reduce using rule 137 (FUNC_EXPR)
    o_lsh         [reduce using rule 205 (TERM)]
    o_moreeq      reduce using rule 137 (FUNC_EXPR)
    o_moreeq      [reduce using rule 205 (TERM)]
    o_noteq       reduce using rule 137 (FUNC_EXPR)
    o_noteq       [reduce using rule 205 (TERM)]
    o_or          reduce using rule 137 (FUNC_EXPR)
    o_or          [reduce using rule 205 (TERM)]
    o_rsh         reduce using rule 137 (FUNC_EXPR)
    o_rsh         [reduce using rule 205 (TERM)]
    o_noteqeq     reduce using rule 137 (FUNC_EXPR)
    o_noteqeq     [reduce using rule 205 (TERM)]
    o_eqeqeq      reduce using rule 137 (FUNC_EXPR)
    o_eqeqeq      [reduce using rule 205 (TERM)]
    o_rshsh       reduce using rule 137 (FUNC_EXPR)
    o_rshsh       [reduce using rule 205 (TERM)]
    '!'           reduce using rule 137 (FUNC_EXPR)
    '!'           [reduce using rule 205 (TERM)]
    '%'           reduce using rule 137 (FUNC_EXPR)
    '%'           [reduce using rule 205 (TERM)]
    '&'           reduce using rule 137 (FUNC_EXPR)
    '&'           [reduce using rule 205 (TERM)]
    '('           [reduce using rule 137 (FUNC_EXPR)]
    '('           [reduce using rule 205 (TERM)]
    ')'           reduce using rule 137 (FUNC_EXPR)
    ')'           [reduce using rule 205 (TERM)]
    '*'           reduce using rule 137 (FUNC_EXPR)
    '*'           [reduce using rule 205 (TERM)]
    '+'           reduce using rule 137 (FUNC_EXPR)
    '+'           [reduce using rule 205 (TERM)]
    ','           reduce using rule 137 (FUNC_EXPR)
    ','           [reduce using rule 205 (TERM)]
    '-'           reduce using rule 137 (FUNC_EXPR)
    '-'           [reduce using rule 205 (TERM)]
    '/'           reduce using rule 137 (FUNC_EXPR)
    '/'           [reduce using rule 205 (TERM)]
    ':'           reduce using rule 137 (FUNC_EXPR)
    ':'           [reduce using rule 205 (TERM)]
    ';'           reduce using rule 137 (FUNC_EXPR)
    ';'           [reduce using rule 205 (TERM)]
    '<'           reduce using rule 137 (FUNC_EXPR)
    '<'           [reduce using rule 205 (TERM)]
    '>'           reduce using rule 137 (FUNC_EXPR)
    '>'           [reduce using rule 205 (TERM)]
    '?'           reduce using rule 137 (FUNC_EXPR)
    '?'           [reduce using rule 205 (TERM)]
    '['           reduce using rule 137 (FUNC_EXPR)
    '['           [reduce using rule 205 (TERM)]
    ']'           reduce using rule 137 (FUNC_EXPR)
    ']'           [reduce using rule 205 (TERM)]
    '^'           reduce using rule 137 (FUNC_EXPR)
    '^'           [reduce using rule 205 (TERM)]
    '{'           reduce using rule 137 (FUNC_EXPR)
    '{'           [reduce using rule 205 (TERM)]
    '|'           reduce using rule 137 (FUNC_EXPR)
    '|'           [reduce using rule 205 (TERM)]
    '}'           reduce using rule 137 (FUNC_EXPR)
    '}'           [reduce using rule 205 (TERM)]
    '~'           reduce using rule 137 (FUNC_EXPR)
    '~'           [reduce using rule 205 (TERM)]
    $default      reduce using rule 137 (FUNC_EXPR)


State 65

  175 NUM_EXPR: INEXPR .

    $default  reduce using rule 175 (NUM_EXPR)


State 66

  135 EXPR: NUM_EXPR .
  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    l_in          [reduce using rule 135 (EXPR)]
    l_instanceof  [reduce using rule 135 (EXPR)]
    o_and         [reduce using rule 135 (EXPR)]
    o_eqeq        [reduce using rule 135 (EXPR)]
    o_lesseq      [reduce using rule 135 (EXPR)]
    o_lsh         [reduce using rule 135 (EXPR)]
    o_moreeq      [reduce using rule 135 (EXPR)]
    o_noteq       [reduce using rule 135 (EXPR)]
    o_or          [reduce using rule 135 (EXPR)]
    o_rsh         [reduce using rule 135 (EXPR)]
    o_noteqeq     [reduce using rule 135 (EXPR)]
    o_eqeqeq      [reduce using rule 135 (EXPR)]
    o_rshsh       [reduce using rule 135 (EXPR)]
    '%'           [reduce using rule 135 (EXPR)]
    '&'           [reduce using rule 135 (EXPR)]
    '*'           [reduce using rule 135 (EXPR)]
    '+'           [reduce using rule 135 (EXPR)]
    '-'           [reduce using rule 135 (EXPR)]
    '/'           [reduce using rule 135 (EXPR)]
    '<'           [reduce using rule 135 (EXPR)]
    '>'           [reduce using rule 135 (EXPR)]
    '?'           [reduce using rule 135 (EXPR)]
    '^'           [reduce using rule 135 (EXPR)]
    '|'           [reduce using rule 135 (EXPR)]
    $default      reduce using rule 135 (EXPR)


State 67

  151 NUM_EXPR: TERM .

    $default  reduce using rule 151 (NUM_EXPR)


State 68

  139 FUNC_EXPR: VAR_TERM . '=' FUNC_EXPR
  147 FUNC_OBJ: VAR_TERM . o_arrow EXPR
  148         | VAR_TERM . o_arrow '{' INTERNAL_CODE '}'
  176 NUM_EXPR: VAR_TERM . '=' NUM_EXPR
  177         | VAR_TERM . o_lsheq NUM_EXPR
  178         | VAR_TERM . o_oreq NUM_EXPR
  179         | VAR_TERM . o_xoreq NUM_EXPR
  180         | VAR_TERM . o_rsheq NUM_EXPR
  181         | VAR_TERM . o_diveq NUM_EXPR
  182         | VAR_TERM . o_subeq NUM_EXPR
  183         | VAR_TERM . o_addeq NUM_EXPR
  184         | VAR_TERM . o_mlteq NUM_EXPR
  185         | VAR_TERM . o_andeq NUM_EXPR
  186         | VAR_TERM . o_modeq NUM_EXPR
  187         | VAR_TERM . o_rshsheq NUM_EXPR
  194 TERM: VAR_TERM .
  197     | VAR_TERM . o_inc
  198     | VAR_TERM . o_dec
  212 VAR_TERM: VAR_TERM . '.' l_name
  213         | VAR_TERM . '.' l_get
  214         | VAR_TERM . '.' l_set
  215         | VAR_TERM . '.' l_constructor
  216         | VAR_TERM . '.' l_from
  217         | VAR_TERM . '.' l_new
  218         | VAR_TERM . '.' l_delete
  219         | VAR_TERM . '.' l_async
  220         | VAR_TERM . '(' ')'
  221         | VAR_TERM . '(' EXPR_LIST ')'
  222         | VAR_TERM . '[' NUM_EXPR ']'

    o_addeq    shift, and go to state 275
    o_andeq    shift, and go to state 276
    o_arrow    shift, and go to state 277
    o_dec      shift, and go to state 278
    o_diveq    shift, and go to state 279
    o_inc      shift, and go to state 280
    o_lsheq    shift, and go to state 281
    o_mlteq    shift, and go to state 282
    o_modeq    shift, and go to state 283
    o_oreq     shift, and go to state 284
    o_rsheq    shift, and go to state 285
    o_subeq    shift, and go to state 286
    o_xoreq    shift, and go to state 287
    o_rshsheq  shift, and go to state 288
    '('        shift, and go to state 289
    '.'        shift, and go to state 290
    '='        shift, and go to state 291
    '['        shift, and go to state 292

    o_dec     [reduce using rule 194 (TERM)]
    o_inc     [reduce using rule 194 (TERM)]
    '('       [reduce using rule 194 (TERM)]
    '['       [reduce using rule 194 (TERM)]
    $default  reduce using rule 194 (TERM)


State 69

  190 TERM: REGSTR .

    $default  reduce using rule 190 (TERM)


State 70

  199 TERM: UNOOP . TERM

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    TERM      go to state 293
    VAR_TERM  go to state 106
    REGSTR    go to state 69
    UNOOP     go to state 70


State 71

  209 VAR_TERM: l_str . '.' l_name

    '.'  shift, and go to state 98


State 72

  223 VAR_TERM: '(' . NUM_EXPR ')'
  224         | '(' . EXPR_LIST ')'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 294
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 121
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 73

  113 OBJECT: '{' . '}'
  114       | '{' . OBJECT_FLD_LIST '}'
  115       | '{' . CLASS_INTERNAL '}'

    l_name         shift, and go to state 295
    l_num          shift, and go to state 296
    l_str          shift, and go to state 297
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 228
    l_set          shift, and go to state 229
    l_static       shift, and go to state 230
    ';'            shift, and go to state 298
    '['            shift, and go to state 299
    '}'            shift, and go to state 233

    CLASS_INTERNAL   go to state 236
    CLASS_UNIT       go to state 237
    CLASS_GSET_UNIT  go to state 238
    CLASS_FUNC       go to state 239
    CLASS_CONSTRUCT  go to state 240
    OBJECT_FLD_LIST  go to state 241
    OBJECT_FLD       go to state 242
    KEY_NAME         go to state 243


State 74

  204 TERM: l_await VAR_TERM .
  212 VAR_TERM: VAR_TERM . '.' l_name
  213         | VAR_TERM . '.' l_get
  214         | VAR_TERM . '.' l_set
  215         | VAR_TERM . '.' l_constructor
  216         | VAR_TERM . '.' l_from
  217         | VAR_TERM . '.' l_new
  218         | VAR_TERM . '.' l_delete
  219         | VAR_TERM . '.' l_async
  220         | VAR_TERM . '(' ')'
  221         | VAR_TERM . '(' EXPR_LIST ')'
  222         | VAR_TERM . '[' NUM_EXPR ']'

    '('  shift, and go to state 289
    '.'  shift, and go to state 290
    '['  shift, and go to state 292

    '('       [reduce using rule 204 (TERM)]
    '['       [reduce using rule 204 (TERM)]
    $default  reduce using rule 204 (TERM)


State 75

   22 ANYTHING: l_break ';' .

    $default  reduce using rule 22 (ANYTHING)


State 76

  149 FUNC_OBJ: FUNC_DEF .

    $default  reduce using rule 149 (FUNC_OBJ)


State 77

   30 ANYTHING: l_break EXPR_LIST . ';'
   31         | l_break EXPR_LIST .
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ','  shift, and go to state 248
    ';'  shift, and go to state 300

    ';'       [reduce using rule 31 (ANYTHING)]
    $default  reduce using rule 31 (ANYTHING)


State 78

   73 CLASS_DEF: l_class l_name . '{' '}'
   74          | l_class l_name . '{' CLASS_INTERNAL '}'
   75          | l_class l_name . l_extends VAR_TERM '{' '}'
   76          | l_class l_name . l_extends VAR_TERM '{' CLASS_INTERNAL '}'

    l_extends  shift, and go to state 301
    '{'        shift, and go to state 302


State 79

  105 VAR_DEF_LIST: l_name .
  106             | l_name . '=' EXPR

    '='  shift, and go to state 303

    $default  reduce using rule 105 (VAR_DEF_LIST)


State 80

  107 VAR_DEF_LIST: '[' . NAME_LIST ']'
  108             | '[' . NAME_LIST ']' '=' EXPR

    l_name  shift, and go to state 304

    NAME_LIST  go to state 305


State 81

  109 VAR_DEF_LIST: '{' . NAME_LIST '}'
  110             | '{' . NAME_LIST '}' '=' EXPR

    l_name  shift, and go to state 304

    NAME_LIST  go to state 306


State 82

  104 VAR_DEF: l_const VAR_DEF_LIST .
  111 VAR_DEF_LIST: VAR_DEF_LIST . ',' l_name
  112             | VAR_DEF_LIST . ',' l_name '=' EXPR

    ','  shift, and go to state 307

    $default  reduce using rule 104 (VAR_DEF)


State 83

   20 ANYTHING: l_continue ';' .

    $default  reduce using rule 20 (ANYTHING)


State 84

  203 TERM: l_delete VAR_TERM .
  212 VAR_TERM: VAR_TERM . '.' l_name
  213         | VAR_TERM . '.' l_get
  214         | VAR_TERM . '.' l_set
  215         | VAR_TERM . '.' l_constructor
  216         | VAR_TERM . '.' l_from
  217         | VAR_TERM . '.' l_new
  218         | VAR_TERM . '.' l_delete
  219         | VAR_TERM . '.' l_async
  220         | VAR_TERM . '(' ')'
  221         | VAR_TERM . '(' EXPR_LIST ')'
  222         | VAR_TERM . '[' NUM_EXPR ']'

    '('  shift, and go to state 289
    '.'  shift, and go to state 290
    '['  shift, and go to state 292

    '('       [reduce using rule 203 (TERM)]
    '['       [reduce using rule 203 (TERM)]
    $default  reduce using rule 203 (TERM)


State 85

   66 DO_WHILE_DEF: l_do '{' . CODE '}' l_while '(' EXPR_LIST ')'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    CODE           go to state 308
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 86

   43 EXPORT_DEF: l_export l_name .
   44           | l_export l_name . l_from l_str

    l_from  shift, and go to state 309

    l_from    [reduce using rule 43 (EXPORT_DEF)]
    $default  reduce using rule 43 (EXPORT_DEF)


State 87

   45 EXPORT_DEF: l_export '{' . NAME_LIST '}'
   46           | l_export '{' . NAME_LIST '}' l_from l_str

    l_name  shift, and go to state 304

    NAME_LIST  go to state 310


State 88

   58 FOR_DEF: l_for '(' . ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   59        | l_for '(' . VAR_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   60        | l_for '(' . EXPR_LIST ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   61        | l_for '(' . FUNC_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   62        | l_for '(' . CLASS_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
   63        | l_for '(' . INEXPR ')' ANYTHING
   64        | l_for '(' . l_var l_name l_in EXPR ')' ANYTHING
   65        | l_for '(' . l_let l_name l_in EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_let       shift, and go to state 311
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 312
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 313
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    CLASS_DEF  go to state 314
    FUNC_DEF   go to state 315
    VAR_DEF    go to state 316
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 317
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 318
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 89

   94 FUNC_DEF: l_function l_name . '(' ')' '{' INTERNAL_CODE '}'
   95         | l_function l_name . '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

    '('  shift, and go to state 319


State 90

  140 FUNC_OBJ: l_function '(' . ')' '{' INTERNAL_CODE '}'
  141         | l_function '(' . EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 320
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 321
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 91

   54 IF_DEF: l_if '(' . EXPR_LIST ')' ANYTHING
   55       | l_if '(' . EXPR_LIST ')' ANYTHING l_else ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 322
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 92

   47 IMPORT_DEF: l_import l_name .
   48           | l_import l_name . l_from l_str

    l_from  shift, and go to state 323

    l_from    [reduce using rule 47 (IMPORT_DEF)]
    $default  reduce using rule 47 (IMPORT_DEF)


State 93

   49 IMPORT_DEF: l_import '{' . NAME_LIST '}'
   50           | l_import '{' . NAME_LIST '}' l_from l_str

    l_name  shift, and go to state 304

    NAME_LIST  go to state 324


State 94

  103 VAR_DEF: l_let VAR_DEF_LIST .
  111 VAR_DEF_LIST: VAR_DEF_LIST . ',' l_name
  112             | VAR_DEF_LIST . ',' l_name '=' EXPR

    ','  shift, and go to state 307

    $default  reduce using rule 103 (VAR_DEF)


State 95

  202 TERM: l_new VAR_TERM .
  212 VAR_TERM: VAR_TERM . '.' l_name
  213         | VAR_TERM . '.' l_get
  214         | VAR_TERM . '.' l_set
  215         | VAR_TERM . '.' l_constructor
  216         | VAR_TERM . '.' l_from
  217         | VAR_TERM . '.' l_new
  218         | VAR_TERM . '.' l_delete
  219         | VAR_TERM . '.' l_async
  220         | VAR_TERM . '(' ')'
  221         | VAR_TERM . '(' EXPR_LIST ')'
  222         | VAR_TERM . '[' NUM_EXPR ']'

    '('  shift, and go to state 289
    '.'  shift, and go to state 290
    '['  shift, and go to state 292

    '('       [reduce using rule 202 (TERM)]
    '['       [reduce using rule 202 (TERM)]
    $default  reduce using rule 202 (TERM)


State 96

   28 ANYTHING: l_return ';' .

    $default  reduce using rule 28 (ANYTHING)


State 97

   36 ANYTHING: l_return EXPR_LIST . ';'
   37         | l_return EXPR_LIST .
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ','  shift, and go to state 248
    ';'  shift, and go to state 325

    ';'       [reduce using rule 37 (ANYTHING)]
    $default  reduce using rule 37 (ANYTHING)


State 98

  209 VAR_TERM: l_str '.' . l_name

    l_name  shift, and go to state 326


State 99

   68 SWITCH_DEF: l_switch '(' . EXPR_LIST ')' '{' SWITCH_INTERNAL '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 327
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 100

   26 ANYTHING: l_throw ';' .

    $default  reduce using rule 26 (ANYTHING)


State 101

   34 ANYTHING: l_throw EXPR_LIST . ';'
   35         | l_throw EXPR_LIST .
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ','  shift, and go to state 248
    ';'  shift, and go to state 328

    ';'       [reduce using rule 35 (ANYTHING)]
    $default  reduce using rule 35 (ANYTHING)


State 102

   53 TRY_CATCH_DEF: l_try '{' . INTERNAL_CODE '}' l_catch '(' EXPR ')' '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 330
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 103

   96 FUNC_DEF: l_async . l_function l_name '(' ')' '{' INTERNAL_CODE '}'
   97         | l_async . l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_function  shift, and go to state 331


State 104

  100 FUNC_DEF: FUNC_OBJ . '(' EXPR_LIST ')'
  101         | FUNC_OBJ . '(' ')'
  205 TERM: FUNC_OBJ .

    '('  shift, and go to state 250

    '('       [reduce using rule 205 (TERM)]
    $default  reduce using rule 205 (TERM)


State 105

  201 TERM: l_typeof TERM .

    $default  reduce using rule 201 (TERM)


State 106

  147 FUNC_OBJ: VAR_TERM . o_arrow EXPR
  148         | VAR_TERM . o_arrow '{' INTERNAL_CODE '}'
  194 TERM: VAR_TERM .
  197     | VAR_TERM . o_inc
  198     | VAR_TERM . o_dec
  212 VAR_TERM: VAR_TERM . '.' l_name
  213         | VAR_TERM . '.' l_get
  214         | VAR_TERM . '.' l_set
  215         | VAR_TERM . '.' l_constructor
  216         | VAR_TERM . '.' l_from
  217         | VAR_TERM . '.' l_new
  218         | VAR_TERM . '.' l_delete
  219         | VAR_TERM . '.' l_async
  220         | VAR_TERM . '(' ')'
  221         | VAR_TERM . '(' EXPR_LIST ')'
  222         | VAR_TERM . '[' NUM_EXPR ']'

    o_arrow  shift, and go to state 277
    o_dec    shift, and go to state 278
    o_inc    shift, and go to state 280
    '('      shift, and go to state 289
    '.'      shift, and go to state 290
    '['      shift, and go to state 292

    o_dec     [reduce using rule 194 (TERM)]
    o_inc     [reduce using rule 194 (TERM)]
    '('       [reduce using rule 194 (TERM)]
    '['       [reduce using rule 194 (TERM)]
    $default  reduce using rule 194 (TERM)


State 107

  102 VAR_DEF: l_var VAR_DEF_LIST .
  111 VAR_DEF_LIST: VAR_DEF_LIST . ',' l_name
  112             | VAR_DEF_LIST . ',' l_name '=' EXPR

    ','  shift, and go to state 307

    $default  reduce using rule 102 (VAR_DEF)


State 108

  200 TERM: l_void TERM .

    $default  reduce using rule 200 (TERM)


State 109

   67 WHILE_DEF: l_while '(' . EXPR_LIST ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 332
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 110

   24 ANYTHING: l_yield ';' .

    $default  reduce using rule 24 (ANYTHING)


State 111

   32 ANYTHING: l_yield EXPR_LIST . ';'
   33         | l_yield EXPR_LIST .
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ','  shift, and go to state 248
    ';'  shift, and go to state 333

    ';'       [reduce using rule 33 (ANYTHING)]
    $default  reduce using rule 33 (ANYTHING)


State 112

   94 FUNC_DEF: l_function . l_name '(' ')' '{' INTERNAL_CODE '}'
   95         | l_function . l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'
   96         | l_async l_function . l_name '(' ')' '{' INTERNAL_CODE '}'
   97         | l_async l_function . l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'
  140 FUNC_OBJ: l_function . '(' ')' '{' INTERNAL_CODE '}'
  141         | l_function . '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_name  shift, and go to state 334
    '('     shift, and go to state 90


State 113

  100 FUNC_DEF: FUNC_OBJ . '(' EXPR_LIST ')'
  101         | FUNC_OBJ . '(' ')'
  138 FUNC_EXPR: l_async FUNC_OBJ .

    '('  shift, and go to state 250

    '('       [reduce using rule 138 (FUNC_EXPR)]
    $default  reduce using rule 138 (FUNC_EXPR)


State 114

  147 FUNC_OBJ: VAR_TERM . o_arrow EXPR
  148         | VAR_TERM . o_arrow '{' INTERNAL_CODE '}'
  212 VAR_TERM: VAR_TERM . '.' l_name
  213         | VAR_TERM . '.' l_get
  214         | VAR_TERM . '.' l_set
  215         | VAR_TERM . '.' l_constructor
  216         | VAR_TERM . '.' l_from
  217         | VAR_TERM . '.' l_new
  218         | VAR_TERM . '.' l_delete
  219         | VAR_TERM . '.' l_async
  220         | VAR_TERM . '(' ')'
  221         | VAR_TERM . '(' EXPR_LIST ')'
  222         | VAR_TERM . '[' NUM_EXPR ']'

    o_arrow  shift, and go to state 277
    '('      shift, and go to state 289
    '.'      shift, and go to state 290
    '['      shift, and go to state 292


State 115

  196 TERM: o_dec VAR_TERM .
  212 VAR_TERM: VAR_TERM . '.' l_name
  213         | VAR_TERM . '.' l_get
  214         | VAR_TERM . '.' l_set
  215         | VAR_TERM . '.' l_constructor
  216         | VAR_TERM . '.' l_from
  217         | VAR_TERM . '.' l_new
  218         | VAR_TERM . '.' l_delete
  219         | VAR_TERM . '.' l_async
  220         | VAR_TERM . '(' ')'
  221         | VAR_TERM . '(' EXPR_LIST ')'
  222         | VAR_TERM . '[' NUM_EXPR ']'

    '('  shift, and go to state 289
    '.'  shift, and go to state 290
    '['  shift, and go to state 292

    '('       [reduce using rule 196 (TERM)]
    '['       [reduce using rule 196 (TERM)]
    $default  reduce using rule 196 (TERM)


State 116

  195 TERM: o_inc VAR_TERM .
  212 VAR_TERM: VAR_TERM . '.' l_name
  213         | VAR_TERM . '.' l_get
  214         | VAR_TERM . '.' l_set
  215         | VAR_TERM . '.' l_constructor
  216         | VAR_TERM . '.' l_from
  217         | VAR_TERM . '.' l_new
  218         | VAR_TERM . '.' l_delete
  219         | VAR_TERM . '.' l_async
  220         | VAR_TERM . '(' ')'
  221         | VAR_TERM . '(' EXPR_LIST ')'
  222         | VAR_TERM . '[' NUM_EXPR ']'

    '('  shift, and go to state 289
    '.'  shift, and go to state 290
    '['  shift, and go to state 292

    '('       [reduce using rule 195 (TERM)]
    '['       [reduce using rule 195 (TERM)]
    $default  reduce using rule 195 (TERM)


State 117

  142 FUNC_OBJ: '(' ')' . o_arrow EXPR
  144         | '(' ')' . o_arrow '{' INTERNAL_CODE '}'

    o_arrow  shift, and go to state 335


State 118

  134 EXPR_LIST: EXPR_LIST . ',' EXPR
  143 FUNC_OBJ: '(' EXPR_LIST . ')' o_arrow EXPR
  145         | '(' EXPR_LIST . ')' o_arrow '{' INTERNAL_CODE '}'
  224 VAR_TERM: '(' EXPR_LIST . ')'

    ')'  shift, and go to state 336
    ','  shift, and go to state 248


State 119

  136 EXPR: FUNC_EXPR .
  146 FUNC_OBJ: '(' FUNC_EXPR . ')'

    ')'  shift, and go to state 337

    ')'       [reduce using rule 136 (EXPR)]
    $default  reduce using rule 136 (EXPR)


State 120

   98 FUNC_DEF: '(' FUNC_OBJ . ')' '(' EXPR_LIST ')'
   99         | '(' FUNC_OBJ . ')' '(' ')'
  100         | FUNC_OBJ . '(' EXPR_LIST ')'
  101         | FUNC_OBJ . '(' ')'
  137 FUNC_EXPR: FUNC_OBJ .
  205 TERM: FUNC_OBJ .

    '('  shift, and go to state 250
    ')'  shift, and go to state 338

    ')'       [reduce using rule 137 (FUNC_EXPR)]
    ')'       [reduce using rule 205 (TERM)]
    ','       reduce using rule 137 (FUNC_EXPR)
    ','       [reduce using rule 205 (TERM)]
    $default  reduce using rule 205 (TERM)


State 121

  135 EXPR: NUM_EXPR .
  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  223 VAR_TERM: '(' NUM_EXPR . ')'

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    ')'           shift, and go to state 339
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    ')'       [reduce using rule 135 (EXPR)]
    $default  reduce using rule 135 (EXPR)


State 122

  246 SOME_LEXEMS: l_await .

    $default  reduce using rule 246 (SOME_LEXEMS)


State 123

  247 SOME_LEXEMS: l_break .

    $default  reduce using rule 247 (SOME_LEXEMS)


State 124

  248 SOME_LEXEMS: l_case .

    $default  reduce using rule 248 (SOME_LEXEMS)


State 125

  249 SOME_LEXEMS: l_catch .

    $default  reduce using rule 249 (SOME_LEXEMS)


State 126

  250 SOME_LEXEMS: l_class .

    $default  reduce using rule 250 (SOME_LEXEMS)


State 127

  251 SOME_LEXEMS: l_const .

    $default  reduce using rule 251 (SOME_LEXEMS)


State 128

  253 SOME_LEXEMS: l_continue .

    $default  reduce using rule 253 (SOME_LEXEMS)


State 129

  254 SOME_LEXEMS: l_debugger .

    $default  reduce using rule 254 (SOME_LEXEMS)


State 130

  255 SOME_LEXEMS: l_default .

    $default  reduce using rule 255 (SOME_LEXEMS)


State 131

  256 SOME_LEXEMS: l_delete .

    $default  reduce using rule 256 (SOME_LEXEMS)


State 132

  257 SOME_LEXEMS: l_do .

    $default  reduce using rule 257 (SOME_LEXEMS)


State 133

  258 SOME_LEXEMS: l_else .

    $default  reduce using rule 258 (SOME_LEXEMS)


State 134

  259 SOME_LEXEMS: l_enum .

    $default  reduce using rule 259 (SOME_LEXEMS)


State 135

  260 SOME_LEXEMS: l_export .

    $default  reduce using rule 260 (SOME_LEXEMS)


State 136

  261 SOME_LEXEMS: l_extends .

    $default  reduce using rule 261 (SOME_LEXEMS)


State 137

  262 SOME_LEXEMS: l_false .

    $default  reduce using rule 262 (SOME_LEXEMS)


State 138

  263 SOME_LEXEMS: l_finally .

    $default  reduce using rule 263 (SOME_LEXEMS)


State 139

  264 SOME_LEXEMS: l_for .

    $default  reduce using rule 264 (SOME_LEXEMS)


State 140

  265 SOME_LEXEMS: l_function .

    $default  reduce using rule 265 (SOME_LEXEMS)


State 141

  267 SOME_LEXEMS: l_if .

    $default  reduce using rule 267 (SOME_LEXEMS)


State 142

  268 SOME_LEXEMS: l_import .

    $default  reduce using rule 268 (SOME_LEXEMS)


State 143

  269 SOME_LEXEMS: l_in .

    $default  reduce using rule 269 (SOME_LEXEMS)


State 144

  270 SOME_LEXEMS: l_instanceof .

    $default  reduce using rule 270 (SOME_LEXEMS)


State 145

  271 SOME_LEXEMS: l_let .

    $default  reduce using rule 271 (SOME_LEXEMS)


State 146

  289 SOME_LEXEMS: l_name .

    $default  reduce using rule 289 (SOME_LEXEMS)


State 147

  272 SOME_LEXEMS: l_new .

    $default  reduce using rule 272 (SOME_LEXEMS)


State 148

  273 SOME_LEXEMS: l_null .

    $default  reduce using rule 273 (SOME_LEXEMS)


State 149

  245 SOME_LEXEMS: l_num .

    $default  reduce using rule 245 (SOME_LEXEMS)


State 150

  274 SOME_LEXEMS: l_return .

    $default  reduce using rule 274 (SOME_LEXEMS)


State 151

  337 SOME_LEXEMS: l_str .

    $default  reduce using rule 337 (SOME_LEXEMS)


State 152

  277 SOME_LEXEMS: l_super .

    $default  reduce using rule 277 (SOME_LEXEMS)


State 153

  278 SOME_LEXEMS: l_switch .

    $default  reduce using rule 278 (SOME_LEXEMS)


State 154

  279 SOME_LEXEMS: l_this .

    $default  reduce using rule 279 (SOME_LEXEMS)


State 155

  280 SOME_LEXEMS: l_throw .

    $default  reduce using rule 280 (SOME_LEXEMS)


State 156

  281 SOME_LEXEMS: l_true .

    $default  reduce using rule 281 (SOME_LEXEMS)


State 157

  282 SOME_LEXEMS: l_try .

    $default  reduce using rule 282 (SOME_LEXEMS)


State 158

  283 SOME_LEXEMS: l_typeof .

    $default  reduce using rule 283 (SOME_LEXEMS)


State 159

  284 SOME_LEXEMS: l_var .

    $default  reduce using rule 284 (SOME_LEXEMS)


State 160

  285 SOME_LEXEMS: l_void .

    $default  reduce using rule 285 (SOME_LEXEMS)


State 161

  286 SOME_LEXEMS: l_while .

    $default  reduce using rule 286 (SOME_LEXEMS)


State 162

  287 SOME_LEXEMS: l_with .

    $default  reduce using rule 287 (SOME_LEXEMS)


State 163

  288 SOME_LEXEMS: l_yield .

    $default  reduce using rule 288 (SOME_LEXEMS)


State 164

  252 SOME_LEXEMS: l_constructor .

    $default  reduce using rule 252 (SOME_LEXEMS)


State 165

  266 SOME_LEXEMS: l_get .

    $default  reduce using rule 266 (SOME_LEXEMS)


State 166

  275 SOME_LEXEMS: l_set .

    $default  reduce using rule 275 (SOME_LEXEMS)


State 167

  276 SOME_LEXEMS: l_static .

    $default  reduce using rule 276 (SOME_LEXEMS)


State 168

  338 SOME_LEXEMS: l_any_char .

    $default  reduce using rule 338 (SOME_LEXEMS)


State 169

  319 SOME_LEXEMS: o_addeq .

    $default  reduce using rule 319 (SOME_LEXEMS)


State 170

  328 SOME_LEXEMS: o_and .

    $default  reduce using rule 328 (SOME_LEXEMS)


State 171

  326 SOME_LEXEMS: o_andeq .

    $default  reduce using rule 326 (SOME_LEXEMS)


State 172

  305 SOME_LEXEMS: o_arrow .

    $default  reduce using rule 305 (SOME_LEXEMS)


State 173

  311 SOME_LEXEMS: o_dblcolon .

    $default  reduce using rule 311 (SOME_LEXEMS)


State 174

  316 SOME_LEXEMS: o_dec .

    $default  reduce using rule 316 (SOME_LEXEMS)


State 175

  304 SOME_LEXEMS: o_eqeq .

    $default  reduce using rule 304 (SOME_LEXEMS)


State 176

  320 SOME_LEXEMS: o_inc .

    $default  reduce using rule 320 (SOME_LEXEMS)


State 177

  307 SOME_LEXEMS: o_lesseq .

    $default  reduce using rule 307 (SOME_LEXEMS)


State 178

  309 SOME_LEXEMS: o_lsh .

    $default  reduce using rule 309 (SOME_LEXEMS)


State 179

  308 SOME_LEXEMS: o_lsheq .

    $default  reduce using rule 308 (SOME_LEXEMS)


State 180

  322 SOME_LEXEMS: o_mlteq .

    $default  reduce using rule 322 (SOME_LEXEMS)


State 181

  329 SOME_LEXEMS: o_modeq .

    $default  reduce using rule 329 (SOME_LEXEMS)


State 182

  301 SOME_LEXEMS: o_moreeq .

    $default  reduce using rule 301 (SOME_LEXEMS)


State 183

  332 SOME_LEXEMS: o_noteq .

    $default  reduce using rule 332 (SOME_LEXEMS)


State 184

  291 SOME_LEXEMS: o_or .

    $default  reduce using rule 291 (SOME_LEXEMS)


State 185

  292 SOME_LEXEMS: o_oreq .

    $default  reduce using rule 292 (SOME_LEXEMS)


State 186

  300 SOME_LEXEMS: o_rsh .

    $default  reduce using rule 300 (SOME_LEXEMS)


State 187

  299 SOME_LEXEMS: o_rsheq .

    $default  reduce using rule 299 (SOME_LEXEMS)


State 188

  315 SOME_LEXEMS: o_subeq .

    $default  reduce using rule 315 (SOME_LEXEMS)


State 189

  294 SOME_LEXEMS: o_xoreq .

    $default  reduce using rule 294 (SOME_LEXEMS)


State 190

  331 SOME_LEXEMS: o_noteqeq .

    $default  reduce using rule 331 (SOME_LEXEMS)


State 191

  303 SOME_LEXEMS: o_eqeqeq .

    $default  reduce using rule 303 (SOME_LEXEMS)


State 192

  298 SOME_LEXEMS: o_rshsh .

    $default  reduce using rule 298 (SOME_LEXEMS)


State 193

  297 SOME_LEXEMS: o_rshsheq .

    $default  reduce using rule 297 (SOME_LEXEMS)


State 194

  333 SOME_LEXEMS: '!' .

    $default  reduce using rule 333 (SOME_LEXEMS)


State 195

  330 SOME_LEXEMS: '%' .

    $default  reduce using rule 330 (SOME_LEXEMS)


State 196

  327 SOME_LEXEMS: '&' .

    $default  reduce using rule 327 (SOME_LEXEMS)


State 197

  325 SOME_LEXEMS: '(' .

    $default  reduce using rule 325 (SOME_LEXEMS)


State 198

  324 SOME_LEXEMS: ')' .

    $default  reduce using rule 324 (SOME_LEXEMS)


State 199

  323 SOME_LEXEMS: '*' .

    $default  reduce using rule 323 (SOME_LEXEMS)


State 200

  321 SOME_LEXEMS: '+' .

    $default  reduce using rule 321 (SOME_LEXEMS)


State 201

  318 SOME_LEXEMS: ',' .

    $default  reduce using rule 318 (SOME_LEXEMS)


State 202

  317 SOME_LEXEMS: '-' .

    $default  reduce using rule 317 (SOME_LEXEMS)


State 203

  314 SOME_LEXEMS: '.' .

    $default  reduce using rule 314 (SOME_LEXEMS)


State 204

  312 SOME_LEXEMS: ':' .

    $default  reduce using rule 312 (SOME_LEXEMS)


State 205

  313 SOME_LEXEMS: ';' .

    $default  reduce using rule 313 (SOME_LEXEMS)


State 206

  310 SOME_LEXEMS: '<' .

    $default  reduce using rule 310 (SOME_LEXEMS)


State 207

  306 SOME_LEXEMS: '=' .

    $default  reduce using rule 306 (SOME_LEXEMS)


State 208

  302 SOME_LEXEMS: '>' .

    $default  reduce using rule 302 (SOME_LEXEMS)


State 209

  296 SOME_LEXEMS: '?' .

    $default  reduce using rule 296 (SOME_LEXEMS)


State 210

  235 REGSTRSYMB: '[' . REG_SET ']'

    l_await        shift, and go to state 122
    l_break        shift, and go to state 123
    l_case         shift, and go to state 124
    l_catch        shift, and go to state 125
    l_class        shift, and go to state 126
    l_const        shift, and go to state 127
    l_continue     shift, and go to state 128
    l_debugger     shift, and go to state 129
    l_default      shift, and go to state 130
    l_delete       shift, and go to state 131
    l_do           shift, and go to state 132
    l_else         shift, and go to state 133
    l_enum         shift, and go to state 134
    l_export       shift, and go to state 135
    l_extends      shift, and go to state 136
    l_false        shift, and go to state 137
    l_finally      shift, and go to state 138
    l_for          shift, and go to state 139
    l_function     shift, and go to state 140
    l_if           shift, and go to state 141
    l_import       shift, and go to state 142
    l_in           shift, and go to state 143
    l_instanceof   shift, and go to state 144
    l_let          shift, and go to state 145
    l_name         shift, and go to state 146
    l_new          shift, and go to state 147
    l_null         shift, and go to state 148
    l_num          shift, and go to state 149
    l_return       shift, and go to state 150
    l_str          shift, and go to state 151
    l_super        shift, and go to state 152
    l_switch       shift, and go to state 153
    l_this         shift, and go to state 154
    l_throw        shift, and go to state 155
    l_true         shift, and go to state 156
    l_try          shift, and go to state 157
    l_typeof       shift, and go to state 158
    l_var          shift, and go to state 159
    l_void         shift, and go to state 160
    l_while        shift, and go to state 161
    l_with         shift, and go to state 162
    l_yield        shift, and go to state 163
    l_constructor  shift, and go to state 164
    l_get          shift, and go to state 165
    l_set          shift, and go to state 166
    l_static       shift, and go to state 167
    l_any_char     shift, and go to state 168
    o_addeq        shift, and go to state 169
    o_and          shift, and go to state 170
    o_andeq        shift, and go to state 171
    o_arrow        shift, and go to state 172
    o_dblcolon     shift, and go to state 173
    o_dec          shift, and go to state 174
    o_eqeq         shift, and go to state 175
    o_inc          shift, and go to state 176
    o_lesseq       shift, and go to state 177
    o_lsh          shift, and go to state 178
    o_lsheq        shift, and go to state 179
    o_mlteq        shift, and go to state 180
    o_modeq        shift, and go to state 181
    o_moreeq       shift, and go to state 182
    o_noteq        shift, and go to state 183
    o_or           shift, and go to state 184
    o_oreq         shift, and go to state 185
    o_rsh          shift, and go to state 186
    o_rsheq        shift, and go to state 187
    o_subeq        shift, and go to state 188
    o_xoreq        shift, and go to state 189
    o_noteqeq      shift, and go to state 190
    o_eqeqeq       shift, and go to state 191
    o_rshsh        shift, and go to state 192
    o_rshsheq      shift, and go to state 193
    '!'            shift, and go to state 194
    '%'            shift, and go to state 195
    '&'            shift, and go to state 196
    '('            shift, and go to state 197
    ')'            shift, and go to state 198
    '*'            shift, and go to state 199
    '+'            shift, and go to state 200
    ','            shift, and go to state 201
    '-'            shift, and go to state 202
    '.'            shift, and go to state 203
    '/'            shift, and go to state 340
    ':'            shift, and go to state 204
    ';'            shift, and go to state 205
    '<'            shift, and go to state 206
    '='            shift, and go to state 207
    '>'            shift, and go to state 208
    '?'            shift, and go to state 209
    '['            shift, and go to state 341
    '\\'           shift, and go to state 342
    ']'            shift, and go to state 212
    '^'            shift, and go to state 213
    '{'            shift, and go to state 214
    '|'            shift, and go to state 215
    '}'            shift, and go to state 216
    '~'            shift, and go to state 217

    REG_SET       go to state 343
    REG_SET_SYMB  go to state 344
    SOME_LEXEMS   go to state 345


State 211

  231 REGSTRSYMB: '\\' . SOME_LEXEMS
  232           | '\\' . '['
  233           | '\\' . '/'
  234           | '\\' . '\\'

    l_await        shift, and go to state 122
    l_break        shift, and go to state 123
    l_case         shift, and go to state 124
    l_catch        shift, and go to state 125
    l_class        shift, and go to state 126
    l_const        shift, and go to state 127
    l_continue     shift, and go to state 128
    l_debugger     shift, and go to state 129
    l_default      shift, and go to state 130
    l_delete       shift, and go to state 131
    l_do           shift, and go to state 132
    l_else         shift, and go to state 133
    l_enum         shift, and go to state 134
    l_export       shift, and go to state 135
    l_extends      shift, and go to state 136
    l_false        shift, and go to state 137
    l_finally      shift, and go to state 138
    l_for          shift, and go to state 139
    l_function     shift, and go to state 140
    l_if           shift, and go to state 141
    l_import       shift, and go to state 142
    l_in           shift, and go to state 143
    l_instanceof   shift, and go to state 144
    l_let          shift, and go to state 145
    l_name         shift, and go to state 146
    l_new          shift, and go to state 147
    l_null         shift, and go to state 148
    l_num          shift, and go to state 149
    l_return       shift, and go to state 150
    l_str          shift, and go to state 151
    l_super        shift, and go to state 152
    l_switch       shift, and go to state 153
    l_this         shift, and go to state 154
    l_throw        shift, and go to state 155
    l_true         shift, and go to state 156
    l_try          shift, and go to state 157
    l_typeof       shift, and go to state 158
    l_var          shift, and go to state 159
    l_void         shift, and go to state 160
    l_while        shift, and go to state 161
    l_with         shift, and go to state 162
    l_yield        shift, and go to state 163
    l_constructor  shift, and go to state 164
    l_get          shift, and go to state 165
    l_set          shift, and go to state 166
    l_static       shift, and go to state 167
    l_any_char     shift, and go to state 168
    o_addeq        shift, and go to state 169
    o_and          shift, and go to state 170
    o_andeq        shift, and go to state 171
    o_arrow        shift, and go to state 172
    o_dblcolon     shift, and go to state 173
    o_dec          shift, and go to state 174
    o_eqeq         shift, and go to state 175
    o_inc          shift, and go to state 176
    o_lesseq       shift, and go to state 177
    o_lsh          shift, and go to state 178
    o_lsheq        shift, and go to state 179
    o_mlteq        shift, and go to state 180
    o_modeq        shift, and go to state 181
    o_moreeq       shift, and go to state 182
    o_noteq        shift, and go to state 183
    o_or           shift, and go to state 184
    o_oreq         shift, and go to state 185
    o_rsh          shift, and go to state 186
    o_rsheq        shift, and go to state 187
    o_subeq        shift, and go to state 188
    o_xoreq        shift, and go to state 189
    o_noteqeq      shift, and go to state 190
    o_eqeqeq       shift, and go to state 191
    o_rshsh        shift, and go to state 192
    o_rshsheq      shift, and go to state 193
    '!'            shift, and go to state 194
    '%'            shift, and go to state 195
    '&'            shift, and go to state 196
    '('            shift, and go to state 197
    ')'            shift, and go to state 198
    '*'            shift, and go to state 199
    '+'            shift, and go to state 200
    ','            shift, and go to state 201
    '-'            shift, and go to state 202
    '.'            shift, and go to state 203
    '/'            shift, and go to state 346
    ':'            shift, and go to state 204
    ';'            shift, and go to state 205
    '<'            shift, and go to state 206
    '='            shift, and go to state 207
    '>'            shift, and go to state 208
    '?'            shift, and go to state 209
    '['            shift, and go to state 347
    '\\'           shift, and go to state 348
    ']'            shift, and go to state 212
    '^'            shift, and go to state 213
    '{'            shift, and go to state 214
    '|'            shift, and go to state 215
    '}'            shift, and go to state 216
    '~'            shift, and go to state 217

    SOME_LEXEMS  go to state 349


State 212

  336 SOME_LEXEMS: ']' .

    $default  reduce using rule 336 (SOME_LEXEMS)


State 213

  295 SOME_LEXEMS: '^' .

    $default  reduce using rule 295 (SOME_LEXEMS)


State 214

  335 SOME_LEXEMS: '{' .

    $default  reduce using rule 335 (SOME_LEXEMS)


State 215

  293 SOME_LEXEMS: '|' .

    $default  reduce using rule 293 (SOME_LEXEMS)


State 216

  334 SOME_LEXEMS: '}' .

    $default  reduce using rule 334 (SOME_LEXEMS)


State 217

  290 SOME_LEXEMS: '~' .

    $default  reduce using rule 290 (SOME_LEXEMS)


State 218

  226 REGSTR: '/' REGSTRSYMB_INS . '/'
  227       | '/' REGSTRSYMB_INS . '/' l_name
  229 REGSTRSYMB_INS: REGSTRSYMB_INS . REGSTRSYMB

    l_await        shift, and go to state 122
    l_break        shift, and go to state 123
    l_case         shift, and go to state 124
    l_catch        shift, and go to state 125
    l_class        shift, and go to state 126
    l_const        shift, and go to state 127
    l_continue     shift, and go to state 128
    l_debugger     shift, and go to state 129
    l_default      shift, and go to state 130
    l_delete       shift, and go to state 131
    l_do           shift, and go to state 132
    l_else         shift, and go to state 133
    l_enum         shift, and go to state 134
    l_export       shift, and go to state 135
    l_extends      shift, and go to state 136
    l_false        shift, and go to state 137
    l_finally      shift, and go to state 138
    l_for          shift, and go to state 139
    l_function     shift, and go to state 140
    l_if           shift, and go to state 141
    l_import       shift, and go to state 142
    l_in           shift, and go to state 143
    l_instanceof   shift, and go to state 144
    l_let          shift, and go to state 145
    l_name         shift, and go to state 146
    l_new          shift, and go to state 147
    l_null         shift, and go to state 148
    l_num          shift, and go to state 149
    l_return       shift, and go to state 150
    l_str          shift, and go to state 151
    l_super        shift, and go to state 152
    l_switch       shift, and go to state 153
    l_this         shift, and go to state 154
    l_throw        shift, and go to state 155
    l_true         shift, and go to state 156
    l_try          shift, and go to state 157
    l_typeof       shift, and go to state 158
    l_var          shift, and go to state 159
    l_void         shift, and go to state 160
    l_while        shift, and go to state 161
    l_with         shift, and go to state 162
    l_yield        shift, and go to state 163
    l_constructor  shift, and go to state 164
    l_get          shift, and go to state 165
    l_set          shift, and go to state 166
    l_static       shift, and go to state 167
    l_any_char     shift, and go to state 168
    o_addeq        shift, and go to state 169
    o_and          shift, and go to state 170
    o_andeq        shift, and go to state 171
    o_arrow        shift, and go to state 172
    o_dblcolon     shift, and go to state 173
    o_dec          shift, and go to state 174
    o_eqeq         shift, and go to state 175
    o_inc          shift, and go to state 176
    o_lesseq       shift, and go to state 177
    o_lsh          shift, and go to state 178
    o_lsheq        shift, and go to state 179
    o_mlteq        shift, and go to state 180
    o_modeq        shift, and go to state 181
    o_moreeq       shift, and go to state 182
    o_noteq        shift, and go to state 183
    o_or           shift, and go to state 184
    o_oreq         shift, and go to state 185
    o_rsh          shift, and go to state 186
    o_rsheq        shift, and go to state 187
    o_subeq        shift, and go to state 188
    o_xoreq        shift, and go to state 189
    o_noteqeq      shift, and go to state 190
    o_eqeqeq       shift, and go to state 191
    o_rshsh        shift, and go to state 192
    o_rshsheq      shift, and go to state 193
    '!'            shift, and go to state 194
    '%'            shift, and go to state 195
    '&'            shift, and go to state 196
    '('            shift, and go to state 197
    ')'            shift, and go to state 198
    '*'            shift, and go to state 199
    '+'            shift, and go to state 200
    ','            shift, and go to state 201
    '-'            shift, and go to state 202
    '.'            shift, and go to state 203
    '/'            shift, and go to state 350
    ':'            shift, and go to state 204
    ';'            shift, and go to state 205
    '<'            shift, and go to state 206
    '='            shift, and go to state 207
    '>'            shift, and go to state 208
    '?'            shift, and go to state 209
    '['            shift, and go to state 210
    '\\'           shift, and go to state 211
    ']'            shift, and go to state 212
    '^'            shift, and go to state 213
    '{'            shift, and go to state 214
    '|'            shift, and go to state 215
    '}'            shift, and go to state 216
    '~'            shift, and go to state 217

    REGSTRSYMB   go to state 351
    SOME_LEXEMS  go to state 220


State 219

  228 REGSTRSYMB_INS: REGSTRSYMB .

    $default  reduce using rule 228 (REGSTRSYMB_INS)


State 220

  230 REGSTRSYMB: SOME_LEXEMS .

    $default  reduce using rule 230 (REGSTRSYMB)


State 221

  128 ARRAY: '[' ']' .

    $default  reduce using rule 128 (ARRAY)


State 222

  129 ARRAY: '[' ARRAY_EXPR_LIST . ']'
  131 ARRAY_EXPR_LIST: ARRAY_EXPR_LIST . ',' EXPR
  132                | ARRAY_EXPR_LIST . ','

    ','  shift, and go to state 352
    ']'  shift, and go to state 353


State 223

  130 ARRAY_EXPR_LIST: EXPR .

    $default  reduce using rule 130 (ARRAY_EXPR_LIST)


State 224

  124 KEY_NAME: l_name .
  206 VAR_TERM: l_name .

    '('       reduce using rule 124 (KEY_NAME)
    '('       [reduce using rule 206 (VAR_TERM)]
    ','       reduce using rule 124 (KEY_NAME)
    ','       [reduce using rule 206 (VAR_TERM)]
    ':'       reduce using rule 124 (KEY_NAME)
    '}'       reduce using rule 124 (KEY_NAME)
    '}'       [reduce using rule 206 (VAR_TERM)]
    $default  reduce using rule 206 (VAR_TERM)


State 225

  125 KEY_NAME: l_num .
  188 TERM: l_num .

    '('       reduce using rule 125 (KEY_NAME)
    '('       [reduce using rule 188 (TERM)]
    ','       reduce using rule 125 (KEY_NAME)
    ','       [reduce using rule 188 (TERM)]
    ':'       reduce using rule 125 (KEY_NAME)
    '}'       reduce using rule 125 (KEY_NAME)
    '}'       [reduce using rule 188 (TERM)]
    $default  reduce using rule 188 (TERM)


State 226

  126 KEY_NAME: l_str .
  189 TERM: l_str .
  209 VAR_TERM: l_str . '.' l_name

    '.'  shift, and go to state 98

    '('       reduce using rule 126 (KEY_NAME)
    '('       [reduce using rule 189 (TERM)]
    ','       reduce using rule 126 (KEY_NAME)
    ','       [reduce using rule 189 (TERM)]
    ':'       reduce using rule 126 (KEY_NAME)
    '}'       reduce using rule 126 (KEY_NAME)
    '}'       [reduce using rule 189 (TERM)]
    $default  reduce using rule 189 (TERM)


State 227

   92 CLASS_CONSTRUCT: l_constructor . '(' ')' '{' INTERNAL_CODE '}'
   93                | l_constructor . '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

    '('  shift, and go to state 354


State 228

   86 CLASS_GSET_UNIT: l_get . CLASS_FUNC

    l_name  shift, and go to state 295
    l_num   shift, and go to state 296
    l_str   shift, and go to state 297
    '['     shift, and go to state 299

    CLASS_FUNC  go to state 355
    KEY_NAME    go to state 356


State 229

   87 CLASS_GSET_UNIT: l_set . CLASS_FUNC

    l_name  shift, and go to state 295
    l_num   shift, and go to state 296
    l_str   shift, and go to state 297
    '['     shift, and go to state 299

    CLASS_FUNC  go to state 357
    KEY_NAME    go to state 356


State 230

   82 CLASS_UNIT: l_static . CLASS_FUNC
   83           | l_static . CLASS_CONSTRUCT
   88 CLASS_GSET_UNIT: l_static . l_get CLASS_FUNC
   89                | l_static . l_set CLASS_FUNC

    l_name         shift, and go to state 295
    l_num          shift, and go to state 296
    l_str          shift, and go to state 297
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 358
    l_set          shift, and go to state 359
    '['            shift, and go to state 299

    CLASS_FUNC       go to state 360
    CLASS_CONSTRUCT  go to state 361
    KEY_NAME         go to state 356


State 231

   42 ANYTHING: ';' .
   85 CLASS_UNIT: ';' .

    l_name         reduce using rule 42 (ANYTHING)
    l_name         [reduce using rule 85 (CLASS_UNIT)]
    l_num          reduce using rule 42 (ANYTHING)
    l_num          [reduce using rule 85 (CLASS_UNIT)]
    l_str          reduce using rule 42 (ANYTHING)
    l_str          [reduce using rule 85 (CLASS_UNIT)]
    l_constructor  reduce using rule 85 (CLASS_UNIT)
    l_get          reduce using rule 85 (CLASS_UNIT)
    l_set          reduce using rule 85 (CLASS_UNIT)
    l_static       reduce using rule 85 (CLASS_UNIT)
    ','            reduce using rule 85 (CLASS_UNIT)
    ';'            reduce using rule 42 (ANYTHING)
    ';'            [reduce using rule 85 (CLASS_UNIT)]
    '['            reduce using rule 42 (ANYTHING)
    '['            [reduce using rule 85 (CLASS_UNIT)]
    '}'            reduce using rule 42 (ANYTHING)
    '}'            [reduce using rule 85 (CLASS_UNIT)]
    $default       reduce using rule 42 (ANYTHING)


State 232

  127 KEY_NAME: '[' . EXPR ']'
  128 ARRAY: '[' . ']'
  129      | '[' . ARRAY_EXPR_LIST ']'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    ']'         shift, and go to state 221
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF         go to state 76
    OBJECT           go to state 59
    ARRAY            go to state 60
    ARRAY_EXPR_LIST  go to state 222
    EXPR             go to state 362
    FUNC_EXPR        go to state 63
    FUNC_OBJ         go to state 64
    INEXPR           go to state 65
    NUM_EXPR         go to state 66
    TERM             go to state 67
    VAR_TERM         go to state 68
    REGSTR           go to state 69
    UNOOP            go to state 70


State 233

  113 OBJECT: '{' '}' .

    $default  reduce using rule 113 (OBJECT)


State 234

    3 CODE: CODE . ANYTHING
    6 CODE_MARK_LIST: CODE .

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    l_name    [reduce using rule 6 (CODE_MARK_LIST)]
    $default  reduce using rule 6 (CODE_MARK_LIST)

    ANYTHING       go to state 245
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 235

    7 CODE_MARK_LIST: CODE_MARK_LIST . l_name ':' CODE
   10 ANYTHING: '{' CODE_MARK_LIST . '}'

    l_name  shift, and go to state 363
    '}'     shift, and go to state 364


State 236

   78 CLASS_INTERNAL: CLASS_INTERNAL . ',' CLASS_UNIT
   79               | CLASS_INTERNAL . CLASS_UNIT
  115 OBJECT: '{' CLASS_INTERNAL . '}'

    l_name         shift, and go to state 295
    l_num          shift, and go to state 296
    l_str          shift, and go to state 297
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 228
    l_set          shift, and go to state 229
    l_static       shift, and go to state 230
    ','            shift, and go to state 365
    ';'            shift, and go to state 298
    '['            shift, and go to state 299
    '}'            shift, and go to state 366

    CLASS_UNIT       go to state 367
    CLASS_GSET_UNIT  go to state 368
    CLASS_FUNC       go to state 239
    CLASS_CONSTRUCT  go to state 240
    KEY_NAME         go to state 356


State 237

   77 CLASS_INTERNAL: CLASS_UNIT .

    $default  reduce using rule 77 (CLASS_INTERNAL)


State 238

   84 CLASS_UNIT: CLASS_GSET_UNIT .
  123 OBJECT_FLD: CLASS_GSET_UNIT .

    ','       reduce using rule 84 (CLASS_UNIT)
    ','       [reduce using rule 123 (OBJECT_FLD)]
    '}'       reduce using rule 84 (CLASS_UNIT)
    '}'       [reduce using rule 123 (OBJECT_FLD)]
    $default  reduce using rule 84 (CLASS_UNIT)


State 239

   80 CLASS_UNIT: CLASS_FUNC .

    $default  reduce using rule 80 (CLASS_UNIT)


State 240

   81 CLASS_UNIT: CLASS_CONSTRUCT .

    $default  reduce using rule 81 (CLASS_UNIT)


State 241

  114 OBJECT: '{' OBJECT_FLD_LIST . '}'

    '}'  shift, and go to state 369


State 242

  116 OBJECT_FLD_LIST: OBJECT_FLD .
  117                | OBJECT_FLD . ','
  118                | OBJECT_FLD . ',' OBJECT_FLD_LIST

    ','  shift, and go to state 370

    $default  reduce using rule 116 (OBJECT_FLD_LIST)


State 243

   90 CLASS_FUNC: KEY_NAME . '(' ')' '{' INTERNAL_CODE '}'
   91           | KEY_NAME . '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'
  119 OBJECT_FLD: KEY_NAME .
  120           | KEY_NAME . ':' EXPR
  121           | KEY_NAME . '(' ')' '{' INTERNAL_CODE '}'
  122           | KEY_NAME . '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

    '('  shift, and go to state 371
    ':'  shift, and go to state 372

    $default  reduce using rule 119 (OBJECT_FLD)


State 244

    0 $accept: START $end .

    $default  accept


State 245

    3 CODE: CODE ANYTHING .

    $default  reduce using rule 3 (CODE)


State 246

   38 ANYTHING: DO_WHILE_DEF ';' .

    $default  reduce using rule 38 (ANYTHING)


State 247

    8 ANYTHING: VAR_DEF ';' .

    $default  reduce using rule 8 (ANYTHING)


State 248

  134 EXPR_LIST: EXPR_LIST ',' . EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 373
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 249

   11 ANYTHING: EXPR_LIST ';' .

    $default  reduce using rule 11 (ANYTHING)


State 250

  100 FUNC_DEF: FUNC_OBJ '(' . EXPR_LIST ')'
  101         | FUNC_OBJ '(' . ')'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 374
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 375
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 251

  150 INEXPR: NUM_EXPR l_in . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 376
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 252

  174 NUM_EXPR: NUM_EXPR l_instanceof . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 378
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 253

  159 NUM_EXPR: NUM_EXPR o_and . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 379
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 254

  170 NUM_EXPR: NUM_EXPR o_eqeq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 380
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 255

  169 NUM_EXPR: NUM_EXPR o_lesseq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 381
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 256

  160 NUM_EXPR: NUM_EXPR o_lsh . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 382
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 257

  168 NUM_EXPR: NUM_EXPR o_moreeq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 383
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 258

  171 NUM_EXPR: NUM_EXPR o_noteq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 384
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 259

  153 NUM_EXPR: NUM_EXPR o_or . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 385
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 260

  154 NUM_EXPR: NUM_EXPR o_rsh . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 386
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 261

  173 NUM_EXPR: NUM_EXPR o_noteqeq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 387
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 262

  172 NUM_EXPR: NUM_EXPR o_eqeqeq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 388
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 263

  165 NUM_EXPR: NUM_EXPR o_rshsh . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 389
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 264

  158 NUM_EXPR: NUM_EXPR '%' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 390
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 265

  163 NUM_EXPR: NUM_EXPR '&' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 391
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 266

  162 NUM_EXPR: NUM_EXPR '*' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 392
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 267

  161 NUM_EXPR: NUM_EXPR '+' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 393
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 268

  164 NUM_EXPR: NUM_EXPR '-' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 394
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 269

  157 NUM_EXPR: NUM_EXPR '/' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 395
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 270

  166 NUM_EXPR: NUM_EXPR '<' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 396
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 271

  167 NUM_EXPR: NUM_EXPR '>' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 397
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 272

  152 NUM_EXPR: NUM_EXPR '?' . NUM_EXPR ':' NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 398
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 273

  156 NUM_EXPR: NUM_EXPR '^' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 399
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 274

  155 NUM_EXPR: NUM_EXPR '|' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 400
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 275

  183 NUM_EXPR: VAR_TERM o_addeq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 401
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 276

  185 NUM_EXPR: VAR_TERM o_andeq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 402
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 277

  147 FUNC_OBJ: VAR_TERM o_arrow . EXPR
  148         | VAR_TERM o_arrow . '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 403
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 404
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 278

  198 TERM: VAR_TERM o_dec .

    $default  reduce using rule 198 (TERM)


State 279

  181 NUM_EXPR: VAR_TERM o_diveq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 405
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 280

  197 TERM: VAR_TERM o_inc .

    $default  reduce using rule 197 (TERM)


State 281

  177 NUM_EXPR: VAR_TERM o_lsheq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 406
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 282

  184 NUM_EXPR: VAR_TERM o_mlteq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 407
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 283

  186 NUM_EXPR: VAR_TERM o_modeq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 408
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 284

  178 NUM_EXPR: VAR_TERM o_oreq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 409
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 285

  180 NUM_EXPR: VAR_TERM o_rsheq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 410
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 286

  182 NUM_EXPR: VAR_TERM o_subeq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 411
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 287

  179 NUM_EXPR: VAR_TERM o_xoreq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 412
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 288

  187 NUM_EXPR: VAR_TERM o_rshsheq . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 413
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 289

  220 VAR_TERM: VAR_TERM '(' . ')'
  221         | VAR_TERM '(' . EXPR_LIST ')'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 414
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 415
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 290

  212 VAR_TERM: VAR_TERM '.' . l_name
  213         | VAR_TERM '.' . l_get
  214         | VAR_TERM '.' . l_set
  215         | VAR_TERM '.' . l_constructor
  216         | VAR_TERM '.' . l_from
  217         | VAR_TERM '.' . l_new
  218         | VAR_TERM '.' . l_delete
  219         | VAR_TERM '.' . l_async

    l_delete       shift, and go to state 416
    l_name         shift, and go to state 417
    l_new          shift, and go to state 418
    l_constructor  shift, and go to state 419
    l_get          shift, and go to state 420
    l_set          shift, and go to state 421
    l_from         shift, and go to state 422
    l_async        shift, and go to state 423


State 291

  139 FUNC_EXPR: VAR_TERM '=' . FUNC_EXPR
  176 NUM_EXPR: VAR_TERM '=' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    FUNC_EXPR  go to state 424
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 425
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 292

  222 VAR_TERM: VAR_TERM '[' . NUM_EXPR ']'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 426
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 293

  199 TERM: UNOOP TERM .

    $default  reduce using rule 199 (TERM)


State 294

  134 EXPR_LIST: EXPR_LIST . ',' EXPR
  224 VAR_TERM: '(' EXPR_LIST . ')'

    ')'  shift, and go to state 427
    ','  shift, and go to state 248


State 295

  124 KEY_NAME: l_name .

    $default  reduce using rule 124 (KEY_NAME)


State 296

  125 KEY_NAME: l_num .

    $default  reduce using rule 125 (KEY_NAME)


State 297

  126 KEY_NAME: l_str .

    $default  reduce using rule 126 (KEY_NAME)


State 298

   85 CLASS_UNIT: ';' .

    $default  reduce using rule 85 (CLASS_UNIT)


State 299

  127 KEY_NAME: '[' . EXPR ']'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 428
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 300

   30 ANYTHING: l_break EXPR_LIST ';' .

    $default  reduce using rule 30 (ANYTHING)


State 301

   75 CLASS_DEF: l_class l_name l_extends . VAR_TERM '{' '}'
   76          | l_class l_name l_extends . VAR_TERM '{' CLASS_INTERNAL '}'

    l_name   shift, and go to state 15
    l_str    shift, and go to state 71
    l_super  shift, and go to state 21
    l_this   shift, and go to state 23
    l_from   shift, and go to state 32
    '('      shift, and go to state 72
    '['      shift, and go to state 42
    '{'      shift, and go to state 73

    OBJECT    go to state 59
    ARRAY     go to state 60
    VAR_TERM  go to state 429


State 302

   73 CLASS_DEF: l_class l_name '{' . '}'
   74          | l_class l_name '{' . CLASS_INTERNAL '}'

    l_name         shift, and go to state 295
    l_num          shift, and go to state 296
    l_str          shift, and go to state 297
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 228
    l_set          shift, and go to state 229
    l_static       shift, and go to state 230
    ';'            shift, and go to state 298
    '['            shift, and go to state 299
    '}'            shift, and go to state 430

    CLASS_INTERNAL   go to state 431
    CLASS_UNIT       go to state 237
    CLASS_GSET_UNIT  go to state 368
    CLASS_FUNC       go to state 239
    CLASS_CONSTRUCT  go to state 240
    KEY_NAME         go to state 356


State 303

  106 VAR_DEF_LIST: l_name '=' . EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 432
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 304

   51 NAME_LIST: l_name .

    $default  reduce using rule 51 (NAME_LIST)


State 305

   52 NAME_LIST: NAME_LIST . ',' l_name
  107 VAR_DEF_LIST: '[' NAME_LIST . ']'
  108             | '[' NAME_LIST . ']' '=' EXPR

    ','  shift, and go to state 433
    ']'  shift, and go to state 434


State 306

   52 NAME_LIST: NAME_LIST . ',' l_name
  109 VAR_DEF_LIST: '{' NAME_LIST . '}'
  110             | '{' NAME_LIST . '}' '=' EXPR

    ','  shift, and go to state 433
    '}'  shift, and go to state 435


State 307

  111 VAR_DEF_LIST: VAR_DEF_LIST ',' . l_name
  112             | VAR_DEF_LIST ',' . l_name '=' EXPR

    l_name  shift, and go to state 436


State 308

    3 CODE: CODE . ANYTHING
   66 DO_WHILE_DEF: l_do '{' CODE . '}' l_while '(' EXPR_LIST ')'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '}'         shift, and go to state 437
    '~'         shift, and go to state 44

    ANYTHING       go to state 245
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 309

   44 EXPORT_DEF: l_export l_name l_from . l_str

    l_str  shift, and go to state 438


State 310

   45 EXPORT_DEF: l_export '{' NAME_LIST . '}'
   46           | l_export '{' NAME_LIST . '}' l_from l_str
   52 NAME_LIST: NAME_LIST . ',' l_name

    ','  shift, and go to state 433
    '}'  shift, and go to state 439


State 311

   65 FOR_DEF: l_for '(' l_let . l_name l_in EXPR ')' ANYTHING
  103 VAR_DEF: l_let . VAR_DEF_LIST

    l_name  shift, and go to state 440
    '['     shift, and go to state 80
    '{'     shift, and go to state 81

    VAR_DEF_LIST  go to state 94


State 312

   64 FOR_DEF: l_for '(' l_var . l_name l_in EXPR ')' ANYTHING
  102 VAR_DEF: l_var . VAR_DEF_LIST

    l_name  shift, and go to state 441
    '['     shift, and go to state 80
    '{'     shift, and go to state 81

    VAR_DEF_LIST  go to state 107


State 313

   58 FOR_DEF: l_for '(' ';' . EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    $default  reduce using rule 56 (EMPTY_OR_EXPR)

    EMPTY_OR_EXPR  go to state 442
    FUNC_DEF       go to state 76
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 443
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 314

   62 FOR_DEF: l_for '(' CLASS_DEF . ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING

    ';'  shift, and go to state 444


State 315

   61 FOR_DEF: l_for '(' FUNC_DEF . ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
  149 FUNC_OBJ: FUNC_DEF .

    ';'  shift, and go to state 445

    ';'       [reduce using rule 149 (FUNC_OBJ)]
    $default  reduce using rule 149 (FUNC_OBJ)


State 316

   59 FOR_DEF: l_for '(' VAR_DEF . ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING

    ';'  shift, and go to state 446


State 317

   60 FOR_DEF: l_for '(' EXPR_LIST . ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ','  shift, and go to state 248
    ';'  shift, and go to state 447


State 318

   63 FOR_DEF: l_for '(' INEXPR . ')' ANYTHING
  175 NUM_EXPR: INEXPR .

    ')'  shift, and go to state 448

    $default  reduce using rule 175 (NUM_EXPR)


State 319

   94 FUNC_DEF: l_function l_name '(' . ')' '{' INTERNAL_CODE '}'
   95         | l_function l_name '(' . EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 449
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 450
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 320

  140 FUNC_OBJ: l_function '(' ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 451


State 321

  134 EXPR_LIST: EXPR_LIST . ',' EXPR
  141 FUNC_OBJ: l_function '(' EXPR_LIST . ')' '{' INTERNAL_CODE '}'

    ')'  shift, and go to state 452
    ','  shift, and go to state 248


State 322

   54 IF_DEF: l_if '(' EXPR_LIST . ')' ANYTHING
   55       | l_if '(' EXPR_LIST . ')' ANYTHING l_else ANYTHING
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 453
    ','  shift, and go to state 248


State 323

   48 IMPORT_DEF: l_import l_name l_from . l_str

    l_str  shift, and go to state 454


State 324

   49 IMPORT_DEF: l_import '{' NAME_LIST . '}'
   50           | l_import '{' NAME_LIST . '}' l_from l_str
   52 NAME_LIST: NAME_LIST . ',' l_name

    ','  shift, and go to state 433
    '}'  shift, and go to state 455


State 325

   36 ANYTHING: l_return EXPR_LIST ';' .

    $default  reduce using rule 36 (ANYTHING)


State 326

  209 VAR_TERM: l_str '.' l_name .

    $default  reduce using rule 209 (VAR_TERM)


State 327

   68 SWITCH_DEF: l_switch '(' EXPR_LIST . ')' '{' SWITCH_INTERNAL '}'
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 456
    ','  shift, and go to state 248


State 328

   34 ANYTHING: l_throw EXPR_LIST ';' .

    $default  reduce using rule 34 (ANYTHING)


State 329

    3 CODE: CODE . ANYTHING
    5 INTERNAL_CODE: CODE .

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 5 (INTERNAL_CODE)

    ANYTHING       go to state 245
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 330

   53 TRY_CATCH_DEF: l_try '{' INTERNAL_CODE . '}' l_catch '(' EXPR ')' '{' INTERNAL_CODE '}'

    '}'  shift, and go to state 457


State 331

   96 FUNC_DEF: l_async l_function . l_name '(' ')' '{' INTERNAL_CODE '}'
   97         | l_async l_function . l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_name  shift, and go to state 458


State 332

   67 WHILE_DEF: l_while '(' EXPR_LIST . ')' ANYTHING
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 459
    ','  shift, and go to state 248


State 333

   32 ANYTHING: l_yield EXPR_LIST ';' .

    $default  reduce using rule 32 (ANYTHING)


State 334

   94 FUNC_DEF: l_function l_name . '(' ')' '{' INTERNAL_CODE '}'
   95         | l_function l_name . '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'
   96         | l_async l_function l_name . '(' ')' '{' INTERNAL_CODE '}'
   97         | l_async l_function l_name . '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

    '('  shift, and go to state 460


State 335

  142 FUNC_OBJ: '(' ')' o_arrow . EXPR
  144         | '(' ')' o_arrow . '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 461
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 462
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 336

  143 FUNC_OBJ: '(' EXPR_LIST ')' . o_arrow EXPR
  145         | '(' EXPR_LIST ')' . o_arrow '{' INTERNAL_CODE '}'
  224 VAR_TERM: '(' EXPR_LIST ')' .

    o_arrow  shift, and go to state 463

    o_arrow   [reduce using rule 224 (VAR_TERM)]
    $default  reduce using rule 224 (VAR_TERM)


State 337

  146 FUNC_OBJ: '(' FUNC_EXPR ')' .

    $default  reduce using rule 146 (FUNC_OBJ)


State 338

   98 FUNC_DEF: '(' FUNC_OBJ ')' . '(' EXPR_LIST ')'
   99         | '(' FUNC_OBJ ')' . '(' ')'

    '('  shift, and go to state 464


State 339

  223 VAR_TERM: '(' NUM_EXPR ')' .

    $default  reduce using rule 223 (VAR_TERM)


State 340

  244 REG_SET_SYMB: '/' .

    $default  reduce using rule 244 (REG_SET_SYMB)


State 341

  243 REG_SET_SYMB: '[' .

    $default  reduce using rule 243 (REG_SET_SYMB)


State 342

  239 REG_SET_SYMB: '\\' . SOME_LEXEMS
  240             | '\\' . '['
  241             | '\\' . '/'
  242             | '\\' . '\\'

    l_await        shift, and go to state 122
    l_break        shift, and go to state 123
    l_case         shift, and go to state 124
    l_catch        shift, and go to state 125
    l_class        shift, and go to state 126
    l_const        shift, and go to state 127
    l_continue     shift, and go to state 128
    l_debugger     shift, and go to state 129
    l_default      shift, and go to state 130
    l_delete       shift, and go to state 131
    l_do           shift, and go to state 132
    l_else         shift, and go to state 133
    l_enum         shift, and go to state 134
    l_export       shift, and go to state 135
    l_extends      shift, and go to state 136
    l_false        shift, and go to state 137
    l_finally      shift, and go to state 138
    l_for          shift, and go to state 139
    l_function     shift, and go to state 140
    l_if           shift, and go to state 141
    l_import       shift, and go to state 142
    l_in           shift, and go to state 143
    l_instanceof   shift, and go to state 144
    l_let          shift, and go to state 145
    l_name         shift, and go to state 146
    l_new          shift, and go to state 147
    l_null         shift, and go to state 148
    l_num          shift, and go to state 149
    l_return       shift, and go to state 150
    l_str          shift, and go to state 151
    l_super        shift, and go to state 152
    l_switch       shift, and go to state 153
    l_this         shift, and go to state 154
    l_throw        shift, and go to state 155
    l_true         shift, and go to state 156
    l_try          shift, and go to state 157
    l_typeof       shift, and go to state 158
    l_var          shift, and go to state 159
    l_void         shift, and go to state 160
    l_while        shift, and go to state 161
    l_with         shift, and go to state 162
    l_yield        shift, and go to state 163
    l_constructor  shift, and go to state 164
    l_get          shift, and go to state 165
    l_set          shift, and go to state 166
    l_static       shift, and go to state 167
    l_any_char     shift, and go to state 168
    o_addeq        shift, and go to state 169
    o_and          shift, and go to state 170
    o_andeq        shift, and go to state 171
    o_arrow        shift, and go to state 172
    o_dblcolon     shift, and go to state 173
    o_dec          shift, and go to state 174
    o_eqeq         shift, and go to state 175
    o_inc          shift, and go to state 176
    o_lesseq       shift, and go to state 177
    o_lsh          shift, and go to state 178
    o_lsheq        shift, and go to state 179
    o_mlteq        shift, and go to state 180
    o_modeq        shift, and go to state 181
    o_moreeq       shift, and go to state 182
    o_noteq        shift, and go to state 183
    o_or           shift, and go to state 184
    o_oreq         shift, and go to state 185
    o_rsh          shift, and go to state 186
    o_rsheq        shift, and go to state 187
    o_subeq        shift, and go to state 188
    o_xoreq        shift, and go to state 189
    o_noteqeq      shift, and go to state 190
    o_eqeqeq       shift, and go to state 191
    o_rshsh        shift, and go to state 192
    o_rshsheq      shift, and go to state 193
    '!'            shift, and go to state 194
    '%'            shift, and go to state 195
    '&'            shift, and go to state 196
    '('            shift, and go to state 197
    ')'            shift, and go to state 198
    '*'            shift, and go to state 199
    '+'            shift, and go to state 200
    ','            shift, and go to state 201
    '-'            shift, and go to state 202
    '.'            shift, and go to state 203
    '/'            shift, and go to state 465
    ':'            shift, and go to state 204
    ';'            shift, and go to state 205
    '<'            shift, and go to state 206
    '='            shift, and go to state 207
    '>'            shift, and go to state 208
    '?'            shift, and go to state 209
    '['            shift, and go to state 466
    '\\'           shift, and go to state 467
    ']'            shift, and go to state 212
    '^'            shift, and go to state 213
    '{'            shift, and go to state 214
    '|'            shift, and go to state 215
    '}'            shift, and go to state 216
    '~'            shift, and go to state 217

    SOME_LEXEMS  go to state 468


State 343

  235 REGSTRSYMB: '[' REG_SET . ']'
  237 REG_SET: REG_SET . REG_SET_SYMB

    l_await        shift, and go to state 122
    l_break        shift, and go to state 123
    l_case         shift, and go to state 124
    l_catch        shift, and go to state 125
    l_class        shift, and go to state 126
    l_const        shift, and go to state 127
    l_continue     shift, and go to state 128
    l_debugger     shift, and go to state 129
    l_default      shift, and go to state 130
    l_delete       shift, and go to state 131
    l_do           shift, and go to state 132
    l_else         shift, and go to state 133
    l_enum         shift, and go to state 134
    l_export       shift, and go to state 135
    l_extends      shift, and go to state 136
    l_false        shift, and go to state 137
    l_finally      shift, and go to state 138
    l_for          shift, and go to state 139
    l_function     shift, and go to state 140
    l_if           shift, and go to state 141
    l_import       shift, and go to state 142
    l_in           shift, and go to state 143
    l_instanceof   shift, and go to state 144
    l_let          shift, and go to state 145
    l_name         shift, and go to state 146
    l_new          shift, and go to state 147
    l_null         shift, and go to state 148
    l_num          shift, and go to state 149
    l_return       shift, and go to state 150
    l_str          shift, and go to state 151
    l_super        shift, and go to state 152
    l_switch       shift, and go to state 153
    l_this         shift, and go to state 154
    l_throw        shift, and go to state 155
    l_true         shift, and go to state 156
    l_try          shift, and go to state 157
    l_typeof       shift, and go to state 158
    l_var          shift, and go to state 159
    l_void         shift, and go to state 160
    l_while        shift, and go to state 161
    l_with         shift, and go to state 162
    l_yield        shift, and go to state 163
    l_constructor  shift, and go to state 164
    l_get          shift, and go to state 165
    l_set          shift, and go to state 166
    l_static       shift, and go to state 167
    l_any_char     shift, and go to state 168
    o_addeq        shift, and go to state 169
    o_and          shift, and go to state 170
    o_andeq        shift, and go to state 171
    o_arrow        shift, and go to state 172
    o_dblcolon     shift, and go to state 173
    o_dec          shift, and go to state 174
    o_eqeq         shift, and go to state 175
    o_inc          shift, and go to state 176
    o_lesseq       shift, and go to state 177
    o_lsh          shift, and go to state 178
    o_lsheq        shift, and go to state 179
    o_mlteq        shift, and go to state 180
    o_modeq        shift, and go to state 181
    o_moreeq       shift, and go to state 182
    o_noteq        shift, and go to state 183
    o_or           shift, and go to state 184
    o_oreq         shift, and go to state 185
    o_rsh          shift, and go to state 186
    o_rsheq        shift, and go to state 187
    o_subeq        shift, and go to state 188
    o_xoreq        shift, and go to state 189
    o_noteqeq      shift, and go to state 190
    o_eqeqeq       shift, and go to state 191
    o_rshsh        shift, and go to state 192
    o_rshsheq      shift, and go to state 193
    '!'            shift, and go to state 194
    '%'            shift, and go to state 195
    '&'            shift, and go to state 196
    '('            shift, and go to state 197
    ')'            shift, and go to state 198
    '*'            shift, and go to state 199
    '+'            shift, and go to state 200
    ','            shift, and go to state 201
    '-'            shift, and go to state 202
    '.'            shift, and go to state 203
    '/'            shift, and go to state 340
    ':'            shift, and go to state 204
    ';'            shift, and go to state 205
    '<'            shift, and go to state 206
    '='            shift, and go to state 207
    '>'            shift, and go to state 208
    '?'            shift, and go to state 209
    '['            shift, and go to state 341
    '\\'           shift, and go to state 342
    ']'            shift, and go to state 469
    '^'            shift, and go to state 213
    '{'            shift, and go to state 214
    '|'            shift, and go to state 215
    '}'            shift, and go to state 216
    '~'            shift, and go to state 217

    REG_SET_SYMB  go to state 470
    SOME_LEXEMS   go to state 345


State 344

  236 REG_SET: REG_SET_SYMB .

    $default  reduce using rule 236 (REG_SET)


State 345

  238 REG_SET_SYMB: SOME_LEXEMS .

    $default  reduce using rule 238 (REG_SET_SYMB)


State 346

  233 REGSTRSYMB: '\\' '/' .

    $default  reduce using rule 233 (REGSTRSYMB)


State 347

  232 REGSTRSYMB: '\\' '[' .

    $default  reduce using rule 232 (REGSTRSYMB)


State 348

  234 REGSTRSYMB: '\\' '\\' .

    $default  reduce using rule 234 (REGSTRSYMB)


State 349

  231 REGSTRSYMB: '\\' SOME_LEXEMS .

    $default  reduce using rule 231 (REGSTRSYMB)


State 350

  226 REGSTR: '/' REGSTRSYMB_INS '/' .
  227       | '/' REGSTRSYMB_INS '/' . l_name

    l_name  shift, and go to state 471

    l_name    [reduce using rule 226 (REGSTR)]
    $default  reduce using rule 226 (REGSTR)


State 351

  229 REGSTRSYMB_INS: REGSTRSYMB_INS REGSTRSYMB .

    $default  reduce using rule 229 (REGSTRSYMB_INS)


State 352

  131 ARRAY_EXPR_LIST: ARRAY_EXPR_LIST ',' . EXPR
  132                | ARRAY_EXPR_LIST ',' .

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    $default  reduce using rule 132 (ARRAY_EXPR_LIST)

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 472
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 353

  129 ARRAY: '[' ARRAY_EXPR_LIST ']' .

    $default  reduce using rule 129 (ARRAY)


State 354

   92 CLASS_CONSTRUCT: l_constructor '(' . ')' '{' INTERNAL_CODE '}'
   93                | l_constructor '(' . EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 473
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 474
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 355

   86 CLASS_GSET_UNIT: l_get CLASS_FUNC .

    $default  reduce using rule 86 (CLASS_GSET_UNIT)


State 356

   90 CLASS_FUNC: KEY_NAME . '(' ')' '{' INTERNAL_CODE '}'
   91           | KEY_NAME . '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

    '('  shift, and go to state 475


State 357

   87 CLASS_GSET_UNIT: l_set CLASS_FUNC .

    $default  reduce using rule 87 (CLASS_GSET_UNIT)


State 358

   88 CLASS_GSET_UNIT: l_static l_get . CLASS_FUNC

    l_name  shift, and go to state 295
    l_num   shift, and go to state 296
    l_str   shift, and go to state 297
    '['     shift, and go to state 299

    CLASS_FUNC  go to state 476
    KEY_NAME    go to state 356


State 359

   89 CLASS_GSET_UNIT: l_static l_set . CLASS_FUNC

    l_name  shift, and go to state 295
    l_num   shift, and go to state 296
    l_str   shift, and go to state 297
    '['     shift, and go to state 299

    CLASS_FUNC  go to state 477
    KEY_NAME    go to state 356


State 360

   82 CLASS_UNIT: l_static CLASS_FUNC .

    $default  reduce using rule 82 (CLASS_UNIT)


State 361

   83 CLASS_UNIT: l_static CLASS_CONSTRUCT .

    $default  reduce using rule 83 (CLASS_UNIT)


State 362

  127 KEY_NAME: '[' EXPR . ']'
  130 ARRAY_EXPR_LIST: EXPR .

    ']'  shift, and go to state 478

    ']'       [reduce using rule 130 (ARRAY_EXPR_LIST)]
    $default  reduce using rule 130 (ARRAY_EXPR_LIST)


State 363

    7 CODE_MARK_LIST: CODE_MARK_LIST l_name . ':' CODE

    ':'  shift, and go to state 479


State 364

   10 ANYTHING: '{' CODE_MARK_LIST '}' .

    $default  reduce using rule 10 (ANYTHING)


State 365

   78 CLASS_INTERNAL: CLASS_INTERNAL ',' . CLASS_UNIT

    l_name         shift, and go to state 295
    l_num          shift, and go to state 296
    l_str          shift, and go to state 297
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 228
    l_set          shift, and go to state 229
    l_static       shift, and go to state 230
    ';'            shift, and go to state 298
    '['            shift, and go to state 299

    CLASS_UNIT       go to state 480
    CLASS_GSET_UNIT  go to state 368
    CLASS_FUNC       go to state 239
    CLASS_CONSTRUCT  go to state 240
    KEY_NAME         go to state 356


State 366

  115 OBJECT: '{' CLASS_INTERNAL '}' .

    $default  reduce using rule 115 (OBJECT)


State 367

   79 CLASS_INTERNAL: CLASS_INTERNAL CLASS_UNIT .

    $default  reduce using rule 79 (CLASS_INTERNAL)


State 368

   84 CLASS_UNIT: CLASS_GSET_UNIT .

    $default  reduce using rule 84 (CLASS_UNIT)


State 369

  114 OBJECT: '{' OBJECT_FLD_LIST '}' .

    $default  reduce using rule 114 (OBJECT)


State 370

  117 OBJECT_FLD_LIST: OBJECT_FLD ',' .
  118                | OBJECT_FLD ',' . OBJECT_FLD_LIST

    l_name    shift, and go to state 295
    l_num     shift, and go to state 296
    l_str     shift, and go to state 297
    l_get     shift, and go to state 228
    l_set     shift, and go to state 229
    l_static  shift, and go to state 481
    '['       shift, and go to state 299

    $default  reduce using rule 117 (OBJECT_FLD_LIST)

    CLASS_GSET_UNIT  go to state 482
    OBJECT_FLD_LIST  go to state 483
    OBJECT_FLD       go to state 242
    KEY_NAME         go to state 484


State 371

   90 CLASS_FUNC: KEY_NAME '(' . ')' '{' INTERNAL_CODE '}'
   91           | KEY_NAME '(' . EXPR_LIST ')' '{' INTERNAL_CODE '}'
  121 OBJECT_FLD: KEY_NAME '(' . ')' '{' INTERNAL_CODE '}'
  122           | KEY_NAME '(' . EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 485
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 486
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 372

  120 OBJECT_FLD: KEY_NAME ':' . EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 487
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 373

  134 EXPR_LIST: EXPR_LIST ',' EXPR .

    $default  reduce using rule 134 (EXPR_LIST)


State 374

  101 FUNC_DEF: FUNC_OBJ '(' ')' .

    $default  reduce using rule 101 (FUNC_DEF)


State 375

  100 FUNC_DEF: FUNC_OBJ '(' EXPR_LIST . ')'
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 488
    ','  shift, and go to state 248


State 376

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  150       | NUM_EXPR l_in NUM_EXPR .
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    o_lsh    shift, and go to state 256
    o_rsh    shift, and go to state 260
    o_rshsh  shift, and go to state 263
    '%'      shift, and go to state 264
    '*'      shift, and go to state 266
    '+'      shift, and go to state 267
    '-'      shift, and go to state 268
    '/'      shift, and go to state 269

    $default  reduce using rule 150 (INEXPR)


State 377

  147 FUNC_OBJ: VAR_TERM . o_arrow EXPR
  148         | VAR_TERM . o_arrow '{' INTERNAL_CODE '}'
  176 NUM_EXPR: VAR_TERM . '=' NUM_EXPR
  177         | VAR_TERM . o_lsheq NUM_EXPR
  178         | VAR_TERM . o_oreq NUM_EXPR
  179         | VAR_TERM . o_xoreq NUM_EXPR
  180         | VAR_TERM . o_rsheq NUM_EXPR
  181         | VAR_TERM . o_diveq NUM_EXPR
  182         | VAR_TERM . o_subeq NUM_EXPR
  183         | VAR_TERM . o_addeq NUM_EXPR
  184         | VAR_TERM . o_mlteq NUM_EXPR
  185         | VAR_TERM . o_andeq NUM_EXPR
  186         | VAR_TERM . o_modeq NUM_EXPR
  187         | VAR_TERM . o_rshsheq NUM_EXPR
  194 TERM: VAR_TERM .
  197     | VAR_TERM . o_inc
  198     | VAR_TERM . o_dec
  212 VAR_TERM: VAR_TERM . '.' l_name
  213         | VAR_TERM . '.' l_get
  214         | VAR_TERM . '.' l_set
  215         | VAR_TERM . '.' l_constructor
  216         | VAR_TERM . '.' l_from
  217         | VAR_TERM . '.' l_new
  218         | VAR_TERM . '.' l_delete
  219         | VAR_TERM . '.' l_async
  220         | VAR_TERM . '(' ')'
  221         | VAR_TERM . '(' EXPR_LIST ')'
  222         | VAR_TERM . '[' NUM_EXPR ']'

    o_addeq    shift, and go to state 275
    o_andeq    shift, and go to state 276
    o_arrow    shift, and go to state 277
    o_dec      shift, and go to state 278
    o_diveq    shift, and go to state 279
    o_inc      shift, and go to state 280
    o_lsheq    shift, and go to state 281
    o_mlteq    shift, and go to state 282
    o_modeq    shift, and go to state 283
    o_oreq     shift, and go to state 284
    o_rsheq    shift, and go to state 285
    o_subeq    shift, and go to state 286
    o_xoreq    shift, and go to state 287
    o_rshsheq  shift, and go to state 288
    '('        shift, and go to state 289
    '.'        shift, and go to state 290
    '='        shift, and go to state 489
    '['        shift, and go to state 292

    o_dec     [reduce using rule 194 (TERM)]
    o_inc     [reduce using rule 194 (TERM)]
    '('       [reduce using rule 194 (TERM)]
    '['       [reduce using rule 194 (TERM)]
    $default  reduce using rule 194 (TERM)


State 378

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  174         | NUM_EXPR l_instanceof NUM_EXPR .

    o_lsh    shift, and go to state 256
    o_rsh    shift, and go to state 260
    o_rshsh  shift, and go to state 263
    '%'      shift, and go to state 264
    '*'      shift, and go to state 266
    '+'      shift, and go to state 267
    '-'      shift, and go to state 268
    '/'      shift, and go to state 269

    $default  reduce using rule 174 (NUM_EXPR)


State 379

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  159         | NUM_EXPR o_and NUM_EXPR .
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 159 (NUM_EXPR)


State 380

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  170         | NUM_EXPR o_eqeq NUM_EXPR .
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_rsh         shift, and go to state 260
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271

    $default  reduce using rule 170 (NUM_EXPR)


State 381

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  169         | NUM_EXPR o_lesseq NUM_EXPR .
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    o_lsh    shift, and go to state 256
    o_rsh    shift, and go to state 260
    o_rshsh  shift, and go to state 263
    '%'      shift, and go to state 264
    '*'      shift, and go to state 266
    '+'      shift, and go to state 267
    '-'      shift, and go to state 268
    '/'      shift, and go to state 269

    $default  reduce using rule 169 (NUM_EXPR)


State 382

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  160         | NUM_EXPR o_lsh NUM_EXPR .
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    '%'  shift, and go to state 264
    '*'  shift, and go to state 266
    '+'  shift, and go to state 267
    '-'  shift, and go to state 268
    '/'  shift, and go to state 269

    $default  reduce using rule 160 (NUM_EXPR)


State 383

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  168         | NUM_EXPR o_moreeq NUM_EXPR .
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    o_lsh    shift, and go to state 256
    o_rsh    shift, and go to state 260
    o_rshsh  shift, and go to state 263
    '%'      shift, and go to state 264
    '*'      shift, and go to state 266
    '+'      shift, and go to state 267
    '-'      shift, and go to state 268
    '/'      shift, and go to state 269

    $default  reduce using rule 168 (NUM_EXPR)


State 384

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  171         | NUM_EXPR o_noteq NUM_EXPR .
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_rsh         shift, and go to state 260
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271

    $default  reduce using rule 171 (NUM_EXPR)


State 385

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  153         | NUM_EXPR o_or NUM_EXPR .
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 153 (NUM_EXPR)


State 386

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  154         | NUM_EXPR o_rsh NUM_EXPR .
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    '%'  shift, and go to state 264
    '*'  shift, and go to state 266
    '+'  shift, and go to state 267
    '-'  shift, and go to state 268
    '/'  shift, and go to state 269

    $default  reduce using rule 154 (NUM_EXPR)


State 387

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  173         | NUM_EXPR o_noteqeq NUM_EXPR .
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_rsh         shift, and go to state 260
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271

    $default  reduce using rule 173 (NUM_EXPR)


State 388

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  172         | NUM_EXPR o_eqeqeq NUM_EXPR .
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_rsh         shift, and go to state 260
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271

    $default  reduce using rule 172 (NUM_EXPR)


State 389

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  165         | NUM_EXPR o_rshsh NUM_EXPR .
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    '%'  shift, and go to state 264
    '*'  shift, and go to state 266
    '+'  shift, and go to state 267
    '-'  shift, and go to state 268
    '/'  shift, and go to state 269

    $default  reduce using rule 165 (NUM_EXPR)


State 390

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  158         | NUM_EXPR '%' NUM_EXPR .
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    $default  reduce using rule 158 (NUM_EXPR)


State 391

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  163         | NUM_EXPR '&' NUM_EXPR .
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271

    $default  reduce using rule 163 (NUM_EXPR)


State 392

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  162         | NUM_EXPR '*' NUM_EXPR .
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    $default  reduce using rule 162 (NUM_EXPR)


State 393

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  161         | NUM_EXPR '+' NUM_EXPR .
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    '%'  shift, and go to state 264
    '*'  shift, and go to state 266
    '/'  shift, and go to state 269

    $default  reduce using rule 161 (NUM_EXPR)


State 394

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  164         | NUM_EXPR '-' NUM_EXPR .
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    '%'  shift, and go to state 264
    '*'  shift, and go to state 266
    '/'  shift, and go to state 269

    $default  reduce using rule 164 (NUM_EXPR)


State 395

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  157         | NUM_EXPR '/' NUM_EXPR .
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    $default  reduce using rule 157 (NUM_EXPR)


State 396

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  166         | NUM_EXPR '<' NUM_EXPR .
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    o_lsh    shift, and go to state 256
    o_rsh    shift, and go to state 260
    o_rshsh  shift, and go to state 263
    '%'      shift, and go to state 264
    '*'      shift, and go to state 266
    '+'      shift, and go to state 267
    '-'      shift, and go to state 268
    '/'      shift, and go to state 269

    $default  reduce using rule 166 (NUM_EXPR)


State 397

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  167         | NUM_EXPR '>' NUM_EXPR .
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    o_lsh    shift, and go to state 256
    o_rsh    shift, and go to state 260
    o_rshsh  shift, and go to state 263
    '%'      shift, and go to state 264
    '*'      shift, and go to state 266
    '+'      shift, and go to state 267
    '-'      shift, and go to state 268
    '/'      shift, and go to state 269

    $default  reduce using rule 167 (NUM_EXPR)


State 398

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  152         | NUM_EXPR '?' NUM_EXPR . ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    ':'           shift, and go to state 490
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274


State 399

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  156         | NUM_EXPR '^' NUM_EXPR .
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271

    $default  reduce using rule 156 (NUM_EXPR)


State 400

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  155         | NUM_EXPR '|' NUM_EXPR .
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '^'           shift, and go to state 273

    $default  reduce using rule 155 (NUM_EXPR)


State 401

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  183         | VAR_TERM o_addeq NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 183 (NUM_EXPR)


State 402

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  185         | VAR_TERM o_andeq NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 185 (NUM_EXPR)


State 403

  113 OBJECT: '{' . '}'
  114       | '{' . OBJECT_FLD_LIST '}'
  115       | '{' . CLASS_INTERNAL '}'
  148 FUNC_OBJ: VAR_TERM o_arrow '{' . INTERNAL_CODE '}'

    l_await        shift, and go to state 1
    l_break        shift, and go to state 2
    l_class        shift, and go to state 3
    l_const        shift, and go to state 4
    l_continue     shift, and go to state 5
    l_delete       shift, and go to state 6
    l_do           shift, and go to state 7
    l_export       shift, and go to state 8
    l_false        shift, and go to state 9
    l_for          shift, and go to state 10
    l_function     shift, and go to state 11
    l_if           shift, and go to state 12
    l_import       shift, and go to state 13
    l_let          shift, and go to state 14
    l_name         shift, and go to state 224
    l_new          shift, and go to state 16
    l_null         shift, and go to state 17
    l_num          shift, and go to state 225
    l_return       shift, and go to state 19
    l_str          shift, and go to state 226
    l_super        shift, and go to state 21
    l_switch       shift, and go to state 22
    l_this         shift, and go to state 23
    l_throw        shift, and go to state 24
    l_true         shift, and go to state 25
    l_try          shift, and go to state 26
    l_typeof       shift, and go to state 27
    l_var          shift, and go to state 28
    l_void         shift, and go to state 29
    l_while        shift, and go to state 30
    l_yield        shift, and go to state 31
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 228
    l_set          shift, and go to state 229
    l_static       shift, and go to state 230
    l_from         shift, and go to state 32
    l_async        shift, and go to state 33
    o_dec          shift, and go to state 34
    o_inc          shift, and go to state 35
    '!'            shift, and go to state 36
    '('            shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '/'            shift, and go to state 40
    ';'            shift, and go to state 231
    '['            shift, and go to state 232
    '{'            shift, and go to state 43
    '}'            shift, and go to state 233
    '~'            shift, and go to state 44

    '}'  [reduce using rule 4 (INTERNAL_CODE)]

    CODE             go to state 329
    INTERNAL_CODE    go to state 491
    ANYTHING         go to state 47
    EXPORT_DEF       go to state 48
    IMPORT_DEF       go to state 49
    TRY_CATCH_DEF    go to state 50
    IF_DEF           go to state 51
    FOR_DEF          go to state 52
    DO_WHILE_DEF     go to state 53
    WHILE_DEF        go to state 54
    SWITCH_DEF       go to state 55
    CLASS_DEF        go to state 56
    CLASS_INTERNAL   go to state 236
    CLASS_UNIT       go to state 237
    CLASS_GSET_UNIT  go to state 238
    CLASS_FUNC       go to state 239
    CLASS_CONSTRUCT  go to state 240
    FUNC_DEF         go to state 57
    VAR_DEF          go to state 58
    OBJECT           go to state 59
    OBJECT_FLD_LIST  go to state 241
    OBJECT_FLD       go to state 242
    KEY_NAME         go to state 243
    ARRAY            go to state 60
    EXPR_LIST        go to state 61
    EXPR             go to state 62
    FUNC_EXPR        go to state 63
    FUNC_OBJ         go to state 64
    INEXPR           go to state 65
    NUM_EXPR         go to state 66
    TERM             go to state 67
    VAR_TERM         go to state 68
    REGSTR           go to state 69
    UNOOP            go to state 70


State 404

  147 FUNC_OBJ: VAR_TERM o_arrow EXPR .

    $default  reduce using rule 147 (FUNC_OBJ)


State 405

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  181         | VAR_TERM o_diveq NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 181 (NUM_EXPR)


State 406

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  177         | VAR_TERM o_lsheq NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 177 (NUM_EXPR)


State 407

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  184         | VAR_TERM o_mlteq NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 184 (NUM_EXPR)


State 408

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  186         | VAR_TERM o_modeq NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 186 (NUM_EXPR)


State 409

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  178         | VAR_TERM o_oreq NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 178 (NUM_EXPR)


State 410

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  180         | VAR_TERM o_rsheq NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 180 (NUM_EXPR)


State 411

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  182         | VAR_TERM o_subeq NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 182 (NUM_EXPR)


State 412

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  179         | VAR_TERM o_xoreq NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 179 (NUM_EXPR)


State 413

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  187         | VAR_TERM o_rshsheq NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 187 (NUM_EXPR)


State 414

  220 VAR_TERM: VAR_TERM '(' ')' .

    $default  reduce using rule 220 (VAR_TERM)


State 415

  134 EXPR_LIST: EXPR_LIST . ',' EXPR
  221 VAR_TERM: VAR_TERM '(' EXPR_LIST . ')'

    ')'  shift, and go to state 492
    ','  shift, and go to state 248


State 416

  218 VAR_TERM: VAR_TERM '.' l_delete .

    $default  reduce using rule 218 (VAR_TERM)


State 417

  212 VAR_TERM: VAR_TERM '.' l_name .

    $default  reduce using rule 212 (VAR_TERM)


State 418

  217 VAR_TERM: VAR_TERM '.' l_new .

    $default  reduce using rule 217 (VAR_TERM)


State 419

  215 VAR_TERM: VAR_TERM '.' l_constructor .

    $default  reduce using rule 215 (VAR_TERM)


State 420

  213 VAR_TERM: VAR_TERM '.' l_get .

    $default  reduce using rule 213 (VAR_TERM)


State 421

  214 VAR_TERM: VAR_TERM '.' l_set .

    $default  reduce using rule 214 (VAR_TERM)


State 422

  216 VAR_TERM: VAR_TERM '.' l_from .

    $default  reduce using rule 216 (VAR_TERM)


State 423

  219 VAR_TERM: VAR_TERM '.' l_async .

    $default  reduce using rule 219 (VAR_TERM)


State 424

  139 FUNC_EXPR: VAR_TERM '=' FUNC_EXPR .

    $default  reduce using rule 139 (FUNC_EXPR)


State 425

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  176         | VAR_TERM '=' NUM_EXPR .

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 176 (NUM_EXPR)


State 426

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR
  222 VAR_TERM: VAR_TERM '[' NUM_EXPR . ']'

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    ']'           shift, and go to state 493
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274


State 427

  224 VAR_TERM: '(' EXPR_LIST ')' .

    $default  reduce using rule 224 (VAR_TERM)


State 428

  127 KEY_NAME: '[' EXPR . ']'

    ']'  shift, and go to state 478


State 429

   75 CLASS_DEF: l_class l_name l_extends VAR_TERM . '{' '}'
   76          | l_class l_name l_extends VAR_TERM . '{' CLASS_INTERNAL '}'
  212 VAR_TERM: VAR_TERM . '.' l_name
  213         | VAR_TERM . '.' l_get
  214         | VAR_TERM . '.' l_set
  215         | VAR_TERM . '.' l_constructor
  216         | VAR_TERM . '.' l_from
  217         | VAR_TERM . '.' l_new
  218         | VAR_TERM . '.' l_delete
  219         | VAR_TERM . '.' l_async
  220         | VAR_TERM . '(' ')'
  221         | VAR_TERM . '(' EXPR_LIST ')'
  222         | VAR_TERM . '[' NUM_EXPR ']'

    '('  shift, and go to state 289
    '.'  shift, and go to state 290
    '['  shift, and go to state 292
    '{'  shift, and go to state 494


State 430

   73 CLASS_DEF: l_class l_name '{' '}' .

    $default  reduce using rule 73 (CLASS_DEF)


State 431

   74 CLASS_DEF: l_class l_name '{' CLASS_INTERNAL . '}'
   78 CLASS_INTERNAL: CLASS_INTERNAL . ',' CLASS_UNIT
   79               | CLASS_INTERNAL . CLASS_UNIT

    l_name         shift, and go to state 295
    l_num          shift, and go to state 296
    l_str          shift, and go to state 297
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 228
    l_set          shift, and go to state 229
    l_static       shift, and go to state 230
    ','            shift, and go to state 365
    ';'            shift, and go to state 298
    '['            shift, and go to state 299
    '}'            shift, and go to state 495

    CLASS_UNIT       go to state 367
    CLASS_GSET_UNIT  go to state 368
    CLASS_FUNC       go to state 239
    CLASS_CONSTRUCT  go to state 240
    KEY_NAME         go to state 356


State 432

  106 VAR_DEF_LIST: l_name '=' EXPR .

    $default  reduce using rule 106 (VAR_DEF_LIST)


State 433

   52 NAME_LIST: NAME_LIST ',' . l_name

    l_name  shift, and go to state 496


State 434

  107 VAR_DEF_LIST: '[' NAME_LIST ']' .
  108             | '[' NAME_LIST ']' . '=' EXPR

    '='  shift, and go to state 497

    $default  reduce using rule 107 (VAR_DEF_LIST)


State 435

  109 VAR_DEF_LIST: '{' NAME_LIST '}' .
  110             | '{' NAME_LIST '}' . '=' EXPR

    '='  shift, and go to state 498

    $default  reduce using rule 109 (VAR_DEF_LIST)


State 436

  111 VAR_DEF_LIST: VAR_DEF_LIST ',' l_name .
  112             | VAR_DEF_LIST ',' l_name . '=' EXPR

    '='  shift, and go to state 499

    $default  reduce using rule 111 (VAR_DEF_LIST)


State 437

   66 DO_WHILE_DEF: l_do '{' CODE '}' . l_while '(' EXPR_LIST ')'

    l_while  shift, and go to state 500


State 438

   44 EXPORT_DEF: l_export l_name l_from l_str .

    $default  reduce using rule 44 (EXPORT_DEF)


State 439

   45 EXPORT_DEF: l_export '{' NAME_LIST '}' .
   46           | l_export '{' NAME_LIST '}' . l_from l_str

    l_from  shift, and go to state 501

    l_from    [reduce using rule 45 (EXPORT_DEF)]
    $default  reduce using rule 45 (EXPORT_DEF)


State 440

   65 FOR_DEF: l_for '(' l_let l_name . l_in EXPR ')' ANYTHING
  105 VAR_DEF_LIST: l_name .
  106             | l_name . '=' EXPR

    l_in  shift, and go to state 502
    '='   shift, and go to state 303

    $default  reduce using rule 105 (VAR_DEF_LIST)


State 441

   64 FOR_DEF: l_for '(' l_var l_name . l_in EXPR ')' ANYTHING
  105 VAR_DEF_LIST: l_name .
  106             | l_name . '=' EXPR

    l_in  shift, and go to state 503
    '='   shift, and go to state 303

    $default  reduce using rule 105 (VAR_DEF_LIST)


State 442

   58 FOR_DEF: l_for '(' ';' EMPTY_OR_EXPR . ';' EMPTY_OR_EXPR ')' ANYTHING

    ';'  shift, and go to state 504


State 443

   57 EMPTY_OR_EXPR: EXPR_LIST .
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ','  shift, and go to state 248

    $default  reduce using rule 57 (EMPTY_OR_EXPR)


State 444

   62 FOR_DEF: l_for '(' CLASS_DEF ';' . EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    $default  reduce using rule 56 (EMPTY_OR_EXPR)

    EMPTY_OR_EXPR  go to state 505
    FUNC_DEF       go to state 76
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 443
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 445

   61 FOR_DEF: l_for '(' FUNC_DEF ';' . EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    $default  reduce using rule 56 (EMPTY_OR_EXPR)

    EMPTY_OR_EXPR  go to state 506
    FUNC_DEF       go to state 76
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 443
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 446

   59 FOR_DEF: l_for '(' VAR_DEF ';' . EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    $default  reduce using rule 56 (EMPTY_OR_EXPR)

    EMPTY_OR_EXPR  go to state 507
    FUNC_DEF       go to state 76
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 443
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 447

   60 FOR_DEF: l_for '(' EXPR_LIST ';' . EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    $default  reduce using rule 56 (EMPTY_OR_EXPR)

    EMPTY_OR_EXPR  go to state 508
    FUNC_DEF       go to state 76
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 443
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 448

   63 FOR_DEF: l_for '(' INEXPR ')' . ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    ANYTHING       go to state 509
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 449

   94 FUNC_DEF: l_function l_name '(' ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 510


State 450

   95 FUNC_DEF: l_function l_name '(' EXPR_LIST . ')' '{' INTERNAL_CODE '}'
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 511
    ','  shift, and go to state 248


State 451

  140 FUNC_OBJ: l_function '(' ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 512
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 452

  141 FUNC_OBJ: l_function '(' EXPR_LIST ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 513


State 453

   54 IF_DEF: l_if '(' EXPR_LIST ')' . ANYTHING
   55       | l_if '(' EXPR_LIST ')' . ANYTHING l_else ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    ANYTHING       go to state 514
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 454

   48 IMPORT_DEF: l_import l_name l_from l_str .

    $default  reduce using rule 48 (IMPORT_DEF)


State 455

   49 IMPORT_DEF: l_import '{' NAME_LIST '}' .
   50           | l_import '{' NAME_LIST '}' . l_from l_str

    l_from  shift, and go to state 515

    l_from    [reduce using rule 49 (IMPORT_DEF)]
    $default  reduce using rule 49 (IMPORT_DEF)


State 456

   68 SWITCH_DEF: l_switch '(' EXPR_LIST ')' . '{' SWITCH_INTERNAL '}'

    '{'  shift, and go to state 516


State 457

   53 TRY_CATCH_DEF: l_try '{' INTERNAL_CODE '}' . l_catch '(' EXPR ')' '{' INTERNAL_CODE '}'

    l_catch  shift, and go to state 517


State 458

   96 FUNC_DEF: l_async l_function l_name . '(' ')' '{' INTERNAL_CODE '}'
   97         | l_async l_function l_name . '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

    '('  shift, and go to state 518


State 459

   67 WHILE_DEF: l_while '(' EXPR_LIST ')' . ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    ANYTHING       go to state 519
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 460

   94 FUNC_DEF: l_function l_name '(' . ')' '{' INTERNAL_CODE '}'
   95         | l_function l_name '(' . EXPR_LIST ')' '{' INTERNAL_CODE '}'
   96         | l_async l_function l_name '(' . ')' '{' INTERNAL_CODE '}'
   97         | l_async l_function l_name '(' . EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 520
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 521
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 461

  113 OBJECT: '{' . '}'
  114       | '{' . OBJECT_FLD_LIST '}'
  115       | '{' . CLASS_INTERNAL '}'
  144 FUNC_OBJ: '(' ')' o_arrow '{' . INTERNAL_CODE '}'

    l_await        shift, and go to state 1
    l_break        shift, and go to state 2
    l_class        shift, and go to state 3
    l_const        shift, and go to state 4
    l_continue     shift, and go to state 5
    l_delete       shift, and go to state 6
    l_do           shift, and go to state 7
    l_export       shift, and go to state 8
    l_false        shift, and go to state 9
    l_for          shift, and go to state 10
    l_function     shift, and go to state 11
    l_if           shift, and go to state 12
    l_import       shift, and go to state 13
    l_let          shift, and go to state 14
    l_name         shift, and go to state 224
    l_new          shift, and go to state 16
    l_null         shift, and go to state 17
    l_num          shift, and go to state 225
    l_return       shift, and go to state 19
    l_str          shift, and go to state 226
    l_super        shift, and go to state 21
    l_switch       shift, and go to state 22
    l_this         shift, and go to state 23
    l_throw        shift, and go to state 24
    l_true         shift, and go to state 25
    l_try          shift, and go to state 26
    l_typeof       shift, and go to state 27
    l_var          shift, and go to state 28
    l_void         shift, and go to state 29
    l_while        shift, and go to state 30
    l_yield        shift, and go to state 31
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 228
    l_set          shift, and go to state 229
    l_static       shift, and go to state 230
    l_from         shift, and go to state 32
    l_async        shift, and go to state 33
    o_dec          shift, and go to state 34
    o_inc          shift, and go to state 35
    '!'            shift, and go to state 36
    '('            shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '/'            shift, and go to state 40
    ';'            shift, and go to state 231
    '['            shift, and go to state 232
    '{'            shift, and go to state 43
    '}'            shift, and go to state 233
    '~'            shift, and go to state 44

    '}'  [reduce using rule 4 (INTERNAL_CODE)]

    CODE             go to state 329
    INTERNAL_CODE    go to state 522
    ANYTHING         go to state 47
    EXPORT_DEF       go to state 48
    IMPORT_DEF       go to state 49
    TRY_CATCH_DEF    go to state 50
    IF_DEF           go to state 51
    FOR_DEF          go to state 52
    DO_WHILE_DEF     go to state 53
    WHILE_DEF        go to state 54
    SWITCH_DEF       go to state 55
    CLASS_DEF        go to state 56
    CLASS_INTERNAL   go to state 236
    CLASS_UNIT       go to state 237
    CLASS_GSET_UNIT  go to state 238
    CLASS_FUNC       go to state 239
    CLASS_CONSTRUCT  go to state 240
    FUNC_DEF         go to state 57
    VAR_DEF          go to state 58
    OBJECT           go to state 59
    OBJECT_FLD_LIST  go to state 241
    OBJECT_FLD       go to state 242
    KEY_NAME         go to state 243
    ARRAY            go to state 60
    EXPR_LIST        go to state 61
    EXPR             go to state 62
    FUNC_EXPR        go to state 63
    FUNC_OBJ         go to state 64
    INEXPR           go to state 65
    NUM_EXPR         go to state 66
    TERM             go to state 67
    VAR_TERM         go to state 68
    REGSTR           go to state 69
    UNOOP            go to state 70


State 462

  142 FUNC_OBJ: '(' ')' o_arrow EXPR .

    $default  reduce using rule 142 (FUNC_OBJ)


State 463

  143 FUNC_OBJ: '(' EXPR_LIST ')' o_arrow . EXPR
  145         | '(' EXPR_LIST ')' o_arrow . '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 523
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 524
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 464

   98 FUNC_DEF: '(' FUNC_OBJ ')' '(' . EXPR_LIST ')'
   99         | '(' FUNC_OBJ ')' '(' . ')'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 525
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 526
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 465

  241 REG_SET_SYMB: '\\' '/' .

    $default  reduce using rule 241 (REG_SET_SYMB)


State 466

  240 REG_SET_SYMB: '\\' '[' .

    $default  reduce using rule 240 (REG_SET_SYMB)


State 467

  242 REG_SET_SYMB: '\\' '\\' .

    $default  reduce using rule 242 (REG_SET_SYMB)


State 468

  239 REG_SET_SYMB: '\\' SOME_LEXEMS .

    $default  reduce using rule 239 (REG_SET_SYMB)


State 469

  235 REGSTRSYMB: '[' REG_SET ']' .
  336 SOME_LEXEMS: ']' .

    l_await        reduce using rule 235 (REGSTRSYMB)
    l_await        [reduce using rule 336 (SOME_LEXEMS)]
    l_break        reduce using rule 235 (REGSTRSYMB)
    l_break        [reduce using rule 336 (SOME_LEXEMS)]
    l_case         reduce using rule 235 (REGSTRSYMB)
    l_case         [reduce using rule 336 (SOME_LEXEMS)]
    l_catch        reduce using rule 235 (REGSTRSYMB)
    l_catch        [reduce using rule 336 (SOME_LEXEMS)]
    l_class        reduce using rule 235 (REGSTRSYMB)
    l_class        [reduce using rule 336 (SOME_LEXEMS)]
    l_const        reduce using rule 235 (REGSTRSYMB)
    l_const        [reduce using rule 336 (SOME_LEXEMS)]
    l_continue     reduce using rule 235 (REGSTRSYMB)
    l_continue     [reduce using rule 336 (SOME_LEXEMS)]
    l_debugger     reduce using rule 235 (REGSTRSYMB)
    l_debugger     [reduce using rule 336 (SOME_LEXEMS)]
    l_default      reduce using rule 235 (REGSTRSYMB)
    l_default      [reduce using rule 336 (SOME_LEXEMS)]
    l_delete       reduce using rule 235 (REGSTRSYMB)
    l_delete       [reduce using rule 336 (SOME_LEXEMS)]
    l_do           reduce using rule 235 (REGSTRSYMB)
    l_do           [reduce using rule 336 (SOME_LEXEMS)]
    l_else         reduce using rule 235 (REGSTRSYMB)
    l_else         [reduce using rule 336 (SOME_LEXEMS)]
    l_enum         reduce using rule 235 (REGSTRSYMB)
    l_enum         [reduce using rule 336 (SOME_LEXEMS)]
    l_export       reduce using rule 235 (REGSTRSYMB)
    l_export       [reduce using rule 336 (SOME_LEXEMS)]
    l_extends      reduce using rule 235 (REGSTRSYMB)
    l_extends      [reduce using rule 336 (SOME_LEXEMS)]
    l_false        reduce using rule 235 (REGSTRSYMB)
    l_false        [reduce using rule 336 (SOME_LEXEMS)]
    l_finally      reduce using rule 235 (REGSTRSYMB)
    l_finally      [reduce using rule 336 (SOME_LEXEMS)]
    l_for          reduce using rule 235 (REGSTRSYMB)
    l_for          [reduce using rule 336 (SOME_LEXEMS)]
    l_function     reduce using rule 235 (REGSTRSYMB)
    l_function     [reduce using rule 336 (SOME_LEXEMS)]
    l_if           reduce using rule 235 (REGSTRSYMB)
    l_if           [reduce using rule 336 (SOME_LEXEMS)]
    l_import       reduce using rule 235 (REGSTRSYMB)
    l_import       [reduce using rule 336 (SOME_LEXEMS)]
    l_in           reduce using rule 235 (REGSTRSYMB)
    l_in           [reduce using rule 336 (SOME_LEXEMS)]
    l_instanceof   reduce using rule 235 (REGSTRSYMB)
    l_instanceof   [reduce using rule 336 (SOME_LEXEMS)]
    l_let          reduce using rule 235 (REGSTRSYMB)
    l_let          [reduce using rule 336 (SOME_LEXEMS)]
    l_name         reduce using rule 235 (REGSTRSYMB)
    l_name         [reduce using rule 336 (SOME_LEXEMS)]
    l_new          reduce using rule 235 (REGSTRSYMB)
    l_new          [reduce using rule 336 (SOME_LEXEMS)]
    l_null         reduce using rule 235 (REGSTRSYMB)
    l_null         [reduce using rule 336 (SOME_LEXEMS)]
    l_num          reduce using rule 235 (REGSTRSYMB)
    l_num          [reduce using rule 336 (SOME_LEXEMS)]
    l_return       reduce using rule 235 (REGSTRSYMB)
    l_return       [reduce using rule 336 (SOME_LEXEMS)]
    l_str          reduce using rule 235 (REGSTRSYMB)
    l_str          [reduce using rule 336 (SOME_LEXEMS)]
    l_super        reduce using rule 235 (REGSTRSYMB)
    l_super        [reduce using rule 336 (SOME_LEXEMS)]
    l_switch       reduce using rule 235 (REGSTRSYMB)
    l_switch       [reduce using rule 336 (SOME_LEXEMS)]
    l_this         reduce using rule 235 (REGSTRSYMB)
    l_this         [reduce using rule 336 (SOME_LEXEMS)]
    l_throw        reduce using rule 235 (REGSTRSYMB)
    l_throw        [reduce using rule 336 (SOME_LEXEMS)]
    l_true         reduce using rule 235 (REGSTRSYMB)
    l_true         [reduce using rule 336 (SOME_LEXEMS)]
    l_try          reduce using rule 235 (REGSTRSYMB)
    l_try          [reduce using rule 336 (SOME_LEXEMS)]
    l_typeof       reduce using rule 235 (REGSTRSYMB)
    l_typeof       [reduce using rule 336 (SOME_LEXEMS)]
    l_var          reduce using rule 235 (REGSTRSYMB)
    l_var          [reduce using rule 336 (SOME_LEXEMS)]
    l_void         reduce using rule 235 (REGSTRSYMB)
    l_void         [reduce using rule 336 (SOME_LEXEMS)]
    l_while        reduce using rule 235 (REGSTRSYMB)
    l_while        [reduce using rule 336 (SOME_LEXEMS)]
    l_with         reduce using rule 235 (REGSTRSYMB)
    l_with         [reduce using rule 336 (SOME_LEXEMS)]
    l_yield        reduce using rule 235 (REGSTRSYMB)
    l_yield        [reduce using rule 336 (SOME_LEXEMS)]
    l_constructor  reduce using rule 235 (REGSTRSYMB)
    l_constructor  [reduce using rule 336 (SOME_LEXEMS)]
    l_get          reduce using rule 235 (REGSTRSYMB)
    l_get          [reduce using rule 336 (SOME_LEXEMS)]
    l_set          reduce using rule 235 (REGSTRSYMB)
    l_set          [reduce using rule 336 (SOME_LEXEMS)]
    l_static       reduce using rule 235 (REGSTRSYMB)
    l_static       [reduce using rule 336 (SOME_LEXEMS)]
    l_any_char     reduce using rule 235 (REGSTRSYMB)
    l_any_char     [reduce using rule 336 (SOME_LEXEMS)]
    o_addeq        reduce using rule 235 (REGSTRSYMB)
    o_addeq        [reduce using rule 336 (SOME_LEXEMS)]
    o_and          reduce using rule 235 (REGSTRSYMB)
    o_and          [reduce using rule 336 (SOME_LEXEMS)]
    o_andeq        reduce using rule 235 (REGSTRSYMB)
    o_andeq        [reduce using rule 336 (SOME_LEXEMS)]
    o_arrow        reduce using rule 235 (REGSTRSYMB)
    o_arrow        [reduce using rule 336 (SOME_LEXEMS)]
    o_dblcolon     reduce using rule 235 (REGSTRSYMB)
    o_dblcolon     [reduce using rule 336 (SOME_LEXEMS)]
    o_dec          reduce using rule 235 (REGSTRSYMB)
    o_dec          [reduce using rule 336 (SOME_LEXEMS)]
    o_eqeq         reduce using rule 235 (REGSTRSYMB)
    o_eqeq         [reduce using rule 336 (SOME_LEXEMS)]
    o_inc          reduce using rule 235 (REGSTRSYMB)
    o_inc          [reduce using rule 336 (SOME_LEXEMS)]
    o_lesseq       reduce using rule 235 (REGSTRSYMB)
    o_lesseq       [reduce using rule 336 (SOME_LEXEMS)]
    o_lsh          reduce using rule 235 (REGSTRSYMB)
    o_lsh          [reduce using rule 336 (SOME_LEXEMS)]
    o_lsheq        reduce using rule 235 (REGSTRSYMB)
    o_lsheq        [reduce using rule 336 (SOME_LEXEMS)]
    o_mlteq        reduce using rule 235 (REGSTRSYMB)
    o_mlteq        [reduce using rule 336 (SOME_LEXEMS)]
    o_modeq        reduce using rule 235 (REGSTRSYMB)
    o_modeq        [reduce using rule 336 (SOME_LEXEMS)]
    o_moreeq       reduce using rule 235 (REGSTRSYMB)
    o_moreeq       [reduce using rule 336 (SOME_LEXEMS)]
    o_noteq        reduce using rule 235 (REGSTRSYMB)
    o_noteq        [reduce using rule 336 (SOME_LEXEMS)]
    o_or           reduce using rule 235 (REGSTRSYMB)
    o_or           [reduce using rule 336 (SOME_LEXEMS)]
    o_oreq         reduce using rule 235 (REGSTRSYMB)
    o_oreq         [reduce using rule 336 (SOME_LEXEMS)]
    o_rsh          reduce using rule 235 (REGSTRSYMB)
    o_rsh          [reduce using rule 336 (SOME_LEXEMS)]
    o_rsheq        reduce using rule 235 (REGSTRSYMB)
    o_rsheq        [reduce using rule 336 (SOME_LEXEMS)]
    o_subeq        reduce using rule 235 (REGSTRSYMB)
    o_subeq        [reduce using rule 336 (SOME_LEXEMS)]
    o_xoreq        reduce using rule 235 (REGSTRSYMB)
    o_xoreq        [reduce using rule 336 (SOME_LEXEMS)]
    o_noteqeq      reduce using rule 235 (REGSTRSYMB)
    o_noteqeq      [reduce using rule 336 (SOME_LEXEMS)]
    o_eqeqeq       reduce using rule 235 (REGSTRSYMB)
    o_eqeqeq       [reduce using rule 336 (SOME_LEXEMS)]
    o_rshsh        reduce using rule 235 (REGSTRSYMB)
    o_rshsh        [reduce using rule 336 (SOME_LEXEMS)]
    o_rshsheq      reduce using rule 235 (REGSTRSYMB)
    o_rshsheq      [reduce using rule 336 (SOME_LEXEMS)]
    '!'            reduce using rule 235 (REGSTRSYMB)
    '!'            [reduce using rule 336 (SOME_LEXEMS)]
    '%'            reduce using rule 235 (REGSTRSYMB)
    '%'            [reduce using rule 336 (SOME_LEXEMS)]
    '&'            reduce using rule 235 (REGSTRSYMB)
    '&'            [reduce using rule 336 (SOME_LEXEMS)]
    '('            reduce using rule 235 (REGSTRSYMB)
    '('            [reduce using rule 336 (SOME_LEXEMS)]
    ')'            reduce using rule 235 (REGSTRSYMB)
    ')'            [reduce using rule 336 (SOME_LEXEMS)]
    '*'            reduce using rule 235 (REGSTRSYMB)
    '*'            [reduce using rule 336 (SOME_LEXEMS)]
    '+'            reduce using rule 235 (REGSTRSYMB)
    '+'            [reduce using rule 336 (SOME_LEXEMS)]
    ','            reduce using rule 235 (REGSTRSYMB)
    ','            [reduce using rule 336 (SOME_LEXEMS)]
    '-'            reduce using rule 235 (REGSTRSYMB)
    '-'            [reduce using rule 336 (SOME_LEXEMS)]
    '.'            reduce using rule 235 (REGSTRSYMB)
    '.'            [reduce using rule 336 (SOME_LEXEMS)]
    '/'            reduce using rule 235 (REGSTRSYMB)
    '/'            [reduce using rule 336 (SOME_LEXEMS)]
    ':'            reduce using rule 235 (REGSTRSYMB)
    ':'            [reduce using rule 336 (SOME_LEXEMS)]
    ';'            reduce using rule 235 (REGSTRSYMB)
    ';'            [reduce using rule 336 (SOME_LEXEMS)]
    '<'            reduce using rule 235 (REGSTRSYMB)
    '<'            [reduce using rule 336 (SOME_LEXEMS)]
    '='            reduce using rule 235 (REGSTRSYMB)
    '='            [reduce using rule 336 (SOME_LEXEMS)]
    '>'            reduce using rule 235 (REGSTRSYMB)
    '>'            [reduce using rule 336 (SOME_LEXEMS)]
    '?'            reduce using rule 235 (REGSTRSYMB)
    '?'            [reduce using rule 336 (SOME_LEXEMS)]
    '['            reduce using rule 235 (REGSTRSYMB)
    '['            [reduce using rule 336 (SOME_LEXEMS)]
    '\\'           reduce using rule 235 (REGSTRSYMB)
    '\\'           [reduce using rule 336 (SOME_LEXEMS)]
    ']'            reduce using rule 235 (REGSTRSYMB)
    ']'            [reduce using rule 336 (SOME_LEXEMS)]
    '^'            reduce using rule 235 (REGSTRSYMB)
    '^'            [reduce using rule 336 (SOME_LEXEMS)]
    '{'            reduce using rule 235 (REGSTRSYMB)
    '{'            [reduce using rule 336 (SOME_LEXEMS)]
    '|'            reduce using rule 235 (REGSTRSYMB)
    '|'            [reduce using rule 336 (SOME_LEXEMS)]
    '}'            reduce using rule 235 (REGSTRSYMB)
    '}'            [reduce using rule 336 (SOME_LEXEMS)]
    '~'            reduce using rule 235 (REGSTRSYMB)
    '~'            [reduce using rule 336 (SOME_LEXEMS)]
    $default       reduce using rule 235 (REGSTRSYMB)


State 470

  237 REG_SET: REG_SET REG_SET_SYMB .

    $default  reduce using rule 237 (REG_SET)


State 471

  227 REGSTR: '/' REGSTRSYMB_INS '/' l_name .

    $default  reduce using rule 227 (REGSTR)


State 472

  131 ARRAY_EXPR_LIST: ARRAY_EXPR_LIST ',' EXPR .

    $default  reduce using rule 131 (ARRAY_EXPR_LIST)


State 473

   92 CLASS_CONSTRUCT: l_constructor '(' ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 527


State 474

   93 CLASS_CONSTRUCT: l_constructor '(' EXPR_LIST . ')' '{' INTERNAL_CODE '}'
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 528
    ','  shift, and go to state 248


State 475

   90 CLASS_FUNC: KEY_NAME '(' . ')' '{' INTERNAL_CODE '}'
   91           | KEY_NAME '(' . EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 529
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 530
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 476

   88 CLASS_GSET_UNIT: l_static l_get CLASS_FUNC .

    $default  reduce using rule 88 (CLASS_GSET_UNIT)


State 477

   89 CLASS_GSET_UNIT: l_static l_set CLASS_FUNC .

    $default  reduce using rule 89 (CLASS_GSET_UNIT)


State 478

  127 KEY_NAME: '[' EXPR ']' .

    $default  reduce using rule 127 (KEY_NAME)


State 479

    7 CODE_MARK_LIST: CODE_MARK_LIST l_name ':' . CODE

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    CODE           go to state 531
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 480

   78 CLASS_INTERNAL: CLASS_INTERNAL ',' CLASS_UNIT .

    $default  reduce using rule 78 (CLASS_INTERNAL)


State 481

   88 CLASS_GSET_UNIT: l_static . l_get CLASS_FUNC
   89                | l_static . l_set CLASS_FUNC

    l_get  shift, and go to state 358
    l_set  shift, and go to state 359


State 482

  123 OBJECT_FLD: CLASS_GSET_UNIT .

    $default  reduce using rule 123 (OBJECT_FLD)


State 483

  118 OBJECT_FLD_LIST: OBJECT_FLD ',' OBJECT_FLD_LIST .

    $default  reduce using rule 118 (OBJECT_FLD_LIST)


State 484

  119 OBJECT_FLD: KEY_NAME .
  120           | KEY_NAME . ':' EXPR
  121           | KEY_NAME . '(' ')' '{' INTERNAL_CODE '}'
  122           | KEY_NAME . '(' EXPR_LIST ')' '{' INTERNAL_CODE '}'

    '('  shift, and go to state 532
    ':'  shift, and go to state 372

    $default  reduce using rule 119 (OBJECT_FLD)


State 485

   90 CLASS_FUNC: KEY_NAME '(' ')' . '{' INTERNAL_CODE '}'
  121 OBJECT_FLD: KEY_NAME '(' ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 533


State 486

   91 CLASS_FUNC: KEY_NAME '(' EXPR_LIST . ')' '{' INTERNAL_CODE '}'
  122 OBJECT_FLD: KEY_NAME '(' EXPR_LIST . ')' '{' INTERNAL_CODE '}'
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 534
    ','  shift, and go to state 248


State 487

  120 OBJECT_FLD: KEY_NAME ':' EXPR .

    $default  reduce using rule 120 (OBJECT_FLD)


State 488

  100 FUNC_DEF: FUNC_OBJ '(' EXPR_LIST ')' .

    $default  reduce using rule 100 (FUNC_DEF)


State 489

  176 NUM_EXPR: VAR_TERM '=' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 425
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 490

  152 NUM_EXPR: NUM_EXPR '?' NUM_EXPR ':' . NUM_EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 103
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF  go to state 76
    OBJECT    go to state 59
    ARRAY     go to state 60
    FUNC_OBJ  go to state 104
    INEXPR    go to state 65
    NUM_EXPR  go to state 535
    TERM      go to state 67
    VAR_TERM  go to state 377
    REGSTR    go to state 69
    UNOOP     go to state 70


State 491

  148 FUNC_OBJ: VAR_TERM o_arrow '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 536


State 492

  221 VAR_TERM: VAR_TERM '(' EXPR_LIST ')' .

    $default  reduce using rule 221 (VAR_TERM)


State 493

  222 VAR_TERM: VAR_TERM '[' NUM_EXPR ']' .

    $default  reduce using rule 222 (VAR_TERM)


State 494

   75 CLASS_DEF: l_class l_name l_extends VAR_TERM '{' . '}'
   76          | l_class l_name l_extends VAR_TERM '{' . CLASS_INTERNAL '}'

    l_name         shift, and go to state 295
    l_num          shift, and go to state 296
    l_str          shift, and go to state 297
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 228
    l_set          shift, and go to state 229
    l_static       shift, and go to state 230
    ';'            shift, and go to state 298
    '['            shift, and go to state 299
    '}'            shift, and go to state 537

    CLASS_INTERNAL   go to state 538
    CLASS_UNIT       go to state 237
    CLASS_GSET_UNIT  go to state 368
    CLASS_FUNC       go to state 239
    CLASS_CONSTRUCT  go to state 240
    KEY_NAME         go to state 356


State 495

   74 CLASS_DEF: l_class l_name '{' CLASS_INTERNAL '}' .

    $default  reduce using rule 74 (CLASS_DEF)


State 496

   52 NAME_LIST: NAME_LIST ',' l_name .

    $default  reduce using rule 52 (NAME_LIST)


State 497

  108 VAR_DEF_LIST: '[' NAME_LIST ']' '=' . EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 539
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 498

  110 VAR_DEF_LIST: '{' NAME_LIST '}' '=' . EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 540
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 499

  112 VAR_DEF_LIST: VAR_DEF_LIST ',' l_name '=' . EXPR

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 541
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 500

   66 DO_WHILE_DEF: l_do '{' CODE '}' l_while . '(' EXPR_LIST ')'

    '('  shift, and go to state 542


State 501

   46 EXPORT_DEF: l_export '{' NAME_LIST '}' l_from . l_str

    l_str  shift, and go to state 543


State 502

   65 FOR_DEF: l_for '(' l_let l_name l_in . EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 544
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 503

   64 FOR_DEF: l_for '(' l_var l_name l_in . EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 545
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 504

   58 FOR_DEF: l_for '(' ';' EMPTY_OR_EXPR ';' . EMPTY_OR_EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    $default  reduce using rule 56 (EMPTY_OR_EXPR)

    EMPTY_OR_EXPR  go to state 546
    FUNC_DEF       go to state 76
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 443
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 505

   62 FOR_DEF: l_for '(' CLASS_DEF ';' EMPTY_OR_EXPR . ';' EMPTY_OR_EXPR ')' ANYTHING

    ';'  shift, and go to state 547


State 506

   61 FOR_DEF: l_for '(' FUNC_DEF ';' EMPTY_OR_EXPR . ';' EMPTY_OR_EXPR ')' ANYTHING

    ';'  shift, and go to state 548


State 507

   59 FOR_DEF: l_for '(' VAR_DEF ';' EMPTY_OR_EXPR . ';' EMPTY_OR_EXPR ')' ANYTHING

    ';'  shift, and go to state 549


State 508

   60 FOR_DEF: l_for '(' EXPR_LIST ';' EMPTY_OR_EXPR . ';' EMPTY_OR_EXPR ')' ANYTHING

    ';'  shift, and go to state 550


State 509

   63 FOR_DEF: l_for '(' INEXPR ')' ANYTHING .

    $default  reduce using rule 63 (FOR_DEF)


State 510

   94 FUNC_DEF: l_function l_name '(' ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 551
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 511

   95 FUNC_DEF: l_function l_name '(' EXPR_LIST ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 552


State 512

  140 FUNC_OBJ: l_function '(' ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 553


State 513

  141 FUNC_OBJ: l_function '(' EXPR_LIST ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 554
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 514

   54 IF_DEF: l_if '(' EXPR_LIST ')' ANYTHING .
   55       | l_if '(' EXPR_LIST ')' ANYTHING . l_else ANYTHING

    l_else  shift, and go to state 555

    l_else    [reduce using rule 54 (IF_DEF)]
    $default  reduce using rule 54 (IF_DEF)


State 515

   50 IMPORT_DEF: l_import '{' NAME_LIST '}' l_from . l_str

    l_str  shift, and go to state 556


State 516

   68 SWITCH_DEF: l_switch '(' EXPR_LIST ')' '{' . SWITCH_INTERNAL '}'

    l_case     shift, and go to state 557
    l_default  shift, and go to state 558

    SWITCH_INTERNAL  go to state 559
    SWITCH_UNIT      go to state 560


State 517

   53 TRY_CATCH_DEF: l_try '{' INTERNAL_CODE '}' l_catch . '(' EXPR ')' '{' INTERNAL_CODE '}'

    '('  shift, and go to state 561


State 518

   96 FUNC_DEF: l_async l_function l_name '(' . ')' '{' INTERNAL_CODE '}'
   97         | l_async l_function l_name '(' . EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 562
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 563
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 519

   67 WHILE_DEF: l_while '(' EXPR_LIST ')' ANYTHING .

    $default  reduce using rule 67 (WHILE_DEF)


State 520

   94 FUNC_DEF: l_function l_name '(' ')' . '{' INTERNAL_CODE '}'
   96         | l_async l_function l_name '(' ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 564


State 521

   95 FUNC_DEF: l_function l_name '(' EXPR_LIST . ')' '{' INTERNAL_CODE '}'
   97         | l_async l_function l_name '(' EXPR_LIST . ')' '{' INTERNAL_CODE '}'
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 565
    ','  shift, and go to state 248


State 522

  144 FUNC_OBJ: '(' ')' o_arrow '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 566


State 523

  113 OBJECT: '{' . '}'
  114       | '{' . OBJECT_FLD_LIST '}'
  115       | '{' . CLASS_INTERNAL '}'
  145 FUNC_OBJ: '(' EXPR_LIST ')' o_arrow '{' . INTERNAL_CODE '}'

    l_await        shift, and go to state 1
    l_break        shift, and go to state 2
    l_class        shift, and go to state 3
    l_const        shift, and go to state 4
    l_continue     shift, and go to state 5
    l_delete       shift, and go to state 6
    l_do           shift, and go to state 7
    l_export       shift, and go to state 8
    l_false        shift, and go to state 9
    l_for          shift, and go to state 10
    l_function     shift, and go to state 11
    l_if           shift, and go to state 12
    l_import       shift, and go to state 13
    l_let          shift, and go to state 14
    l_name         shift, and go to state 224
    l_new          shift, and go to state 16
    l_null         shift, and go to state 17
    l_num          shift, and go to state 225
    l_return       shift, and go to state 19
    l_str          shift, and go to state 226
    l_super        shift, and go to state 21
    l_switch       shift, and go to state 22
    l_this         shift, and go to state 23
    l_throw        shift, and go to state 24
    l_true         shift, and go to state 25
    l_try          shift, and go to state 26
    l_typeof       shift, and go to state 27
    l_var          shift, and go to state 28
    l_void         shift, and go to state 29
    l_while        shift, and go to state 30
    l_yield        shift, and go to state 31
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 228
    l_set          shift, and go to state 229
    l_static       shift, and go to state 230
    l_from         shift, and go to state 32
    l_async        shift, and go to state 33
    o_dec          shift, and go to state 34
    o_inc          shift, and go to state 35
    '!'            shift, and go to state 36
    '('            shift, and go to state 37
    '+'            shift, and go to state 38
    '-'            shift, and go to state 39
    '/'            shift, and go to state 40
    ';'            shift, and go to state 231
    '['            shift, and go to state 232
    '{'            shift, and go to state 43
    '}'            shift, and go to state 233
    '~'            shift, and go to state 44

    '}'  [reduce using rule 4 (INTERNAL_CODE)]

    CODE             go to state 329
    INTERNAL_CODE    go to state 567
    ANYTHING         go to state 47
    EXPORT_DEF       go to state 48
    IMPORT_DEF       go to state 49
    TRY_CATCH_DEF    go to state 50
    IF_DEF           go to state 51
    FOR_DEF          go to state 52
    DO_WHILE_DEF     go to state 53
    WHILE_DEF        go to state 54
    SWITCH_DEF       go to state 55
    CLASS_DEF        go to state 56
    CLASS_INTERNAL   go to state 236
    CLASS_UNIT       go to state 237
    CLASS_GSET_UNIT  go to state 238
    CLASS_FUNC       go to state 239
    CLASS_CONSTRUCT  go to state 240
    FUNC_DEF         go to state 57
    VAR_DEF          go to state 58
    OBJECT           go to state 59
    OBJECT_FLD_LIST  go to state 241
    OBJECT_FLD       go to state 242
    KEY_NAME         go to state 243
    ARRAY            go to state 60
    EXPR_LIST        go to state 61
    EXPR             go to state 62
    FUNC_EXPR        go to state 63
    FUNC_OBJ         go to state 64
    INEXPR           go to state 65
    NUM_EXPR         go to state 66
    TERM             go to state 67
    VAR_TERM         go to state 68
    REGSTR           go to state 69
    UNOOP            go to state 70


State 524

  143 FUNC_OBJ: '(' EXPR_LIST ')' o_arrow EXPR .

    $default  reduce using rule 143 (FUNC_OBJ)


State 525

   99 FUNC_DEF: '(' FUNC_OBJ ')' '(' ')' .

    $default  reduce using rule 99 (FUNC_DEF)


State 526

   98 FUNC_DEF: '(' FUNC_OBJ ')' '(' EXPR_LIST . ')'
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 568
    ','  shift, and go to state 248


State 527

   92 CLASS_CONSTRUCT: l_constructor '(' ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 569
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 528

   93 CLASS_CONSTRUCT: l_constructor '(' EXPR_LIST ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 570


State 529

   90 CLASS_FUNC: KEY_NAME '(' ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 571


State 530

   91 CLASS_FUNC: KEY_NAME '(' EXPR_LIST . ')' '{' INTERNAL_CODE '}'
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 572
    ','  shift, and go to state 248


State 531

    3 CODE: CODE . ANYTHING
    7 CODE_MARK_LIST: CODE_MARK_LIST l_name ':' CODE .

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    l_name    [reduce using rule 7 (CODE_MARK_LIST)]
    $default  reduce using rule 7 (CODE_MARK_LIST)

    ANYTHING       go to state 245
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 532

  121 OBJECT_FLD: KEY_NAME '(' . ')' '{' INTERNAL_CODE '}'
  122           | KEY_NAME '(' . EXPR_LIST ')' '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    ')'         shift, and go to state 573
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 574
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 533

   90 CLASS_FUNC: KEY_NAME '(' ')' '{' . INTERNAL_CODE '}'
  121 OBJECT_FLD: KEY_NAME '(' ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 575
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 534

   91 CLASS_FUNC: KEY_NAME '(' EXPR_LIST ')' . '{' INTERNAL_CODE '}'
  122 OBJECT_FLD: KEY_NAME '(' EXPR_LIST ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 576


State 535

  150 INEXPR: NUM_EXPR . l_in NUM_EXPR
  152 NUM_EXPR: NUM_EXPR . '?' NUM_EXPR ':' NUM_EXPR
  152         | NUM_EXPR '?' NUM_EXPR ':' NUM_EXPR .
  153         | NUM_EXPR . o_or NUM_EXPR
  154         | NUM_EXPR . o_rsh NUM_EXPR
  155         | NUM_EXPR . '|' NUM_EXPR
  156         | NUM_EXPR . '^' NUM_EXPR
  157         | NUM_EXPR . '/' NUM_EXPR
  158         | NUM_EXPR . '%' NUM_EXPR
  159         | NUM_EXPR . o_and NUM_EXPR
  160         | NUM_EXPR . o_lsh NUM_EXPR
  161         | NUM_EXPR . '+' NUM_EXPR
  162         | NUM_EXPR . '*' NUM_EXPR
  163         | NUM_EXPR . '&' NUM_EXPR
  164         | NUM_EXPR . '-' NUM_EXPR
  165         | NUM_EXPR . o_rshsh NUM_EXPR
  166         | NUM_EXPR . '<' NUM_EXPR
  167         | NUM_EXPR . '>' NUM_EXPR
  168         | NUM_EXPR . o_moreeq NUM_EXPR
  169         | NUM_EXPR . o_lesseq NUM_EXPR
  170         | NUM_EXPR . o_eqeq NUM_EXPR
  171         | NUM_EXPR . o_noteq NUM_EXPR
  172         | NUM_EXPR . o_eqeqeq NUM_EXPR
  173         | NUM_EXPR . o_noteqeq NUM_EXPR
  174         | NUM_EXPR . l_instanceof NUM_EXPR

    l_in          shift, and go to state 251
    l_instanceof  shift, and go to state 252
    o_and         shift, and go to state 253
    o_eqeq        shift, and go to state 254
    o_lesseq      shift, and go to state 255
    o_lsh         shift, and go to state 256
    o_moreeq      shift, and go to state 257
    o_noteq       shift, and go to state 258
    o_or          shift, and go to state 259
    o_rsh         shift, and go to state 260
    o_noteqeq     shift, and go to state 261
    o_eqeqeq      shift, and go to state 262
    o_rshsh       shift, and go to state 263
    '%'           shift, and go to state 264
    '&'           shift, and go to state 265
    '*'           shift, and go to state 266
    '+'           shift, and go to state 267
    '-'           shift, and go to state 268
    '/'           shift, and go to state 269
    '<'           shift, and go to state 270
    '>'           shift, and go to state 271
    '?'           shift, and go to state 272
    '^'           shift, and go to state 273
    '|'           shift, and go to state 274

    $default  reduce using rule 152 (NUM_EXPR)


State 536

  148 FUNC_OBJ: VAR_TERM o_arrow '{' INTERNAL_CODE '}' .

    $default  reduce using rule 148 (FUNC_OBJ)


State 537

   75 CLASS_DEF: l_class l_name l_extends VAR_TERM '{' '}' .

    $default  reduce using rule 75 (CLASS_DEF)


State 538

   76 CLASS_DEF: l_class l_name l_extends VAR_TERM '{' CLASS_INTERNAL . '}'
   78 CLASS_INTERNAL: CLASS_INTERNAL . ',' CLASS_UNIT
   79               | CLASS_INTERNAL . CLASS_UNIT

    l_name         shift, and go to state 295
    l_num          shift, and go to state 296
    l_str          shift, and go to state 297
    l_constructor  shift, and go to state 227
    l_get          shift, and go to state 228
    l_set          shift, and go to state 229
    l_static       shift, and go to state 230
    ','            shift, and go to state 365
    ';'            shift, and go to state 298
    '['            shift, and go to state 299
    '}'            shift, and go to state 577

    CLASS_UNIT       go to state 367
    CLASS_GSET_UNIT  go to state 368
    CLASS_FUNC       go to state 239
    CLASS_CONSTRUCT  go to state 240
    KEY_NAME         go to state 356


State 539

  108 VAR_DEF_LIST: '[' NAME_LIST ']' '=' EXPR .

    $default  reduce using rule 108 (VAR_DEF_LIST)


State 540

  110 VAR_DEF_LIST: '{' NAME_LIST '}' '=' EXPR .

    $default  reduce using rule 110 (VAR_DEF_LIST)


State 541

  112 VAR_DEF_LIST: VAR_DEF_LIST ',' l_name '=' EXPR .

    $default  reduce using rule 112 (VAR_DEF_LIST)


State 542

   66 DO_WHILE_DEF: l_do '{' CODE '}' l_while '(' . EXPR_LIST ')'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR_LIST  go to state 578
    EXPR       go to state 62
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 543

   46 EXPORT_DEF: l_export '{' NAME_LIST '}' l_from l_str .

    $default  reduce using rule 46 (EXPORT_DEF)


State 544

   65 FOR_DEF: l_for '(' l_let l_name l_in EXPR . ')' ANYTHING

    ')'  shift, and go to state 579


State 545

   64 FOR_DEF: l_for '(' l_var l_name l_in EXPR . ')' ANYTHING

    ')'  shift, and go to state 580


State 546

   58 FOR_DEF: l_for '(' ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR . ')' ANYTHING

    ')'  shift, and go to state 581


State 547

   62 FOR_DEF: l_for '(' CLASS_DEF ';' EMPTY_OR_EXPR ';' . EMPTY_OR_EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    $default  reduce using rule 56 (EMPTY_OR_EXPR)

    EMPTY_OR_EXPR  go to state 582
    FUNC_DEF       go to state 76
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 443
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 548

   61 FOR_DEF: l_for '(' FUNC_DEF ';' EMPTY_OR_EXPR ';' . EMPTY_OR_EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    $default  reduce using rule 56 (EMPTY_OR_EXPR)

    EMPTY_OR_EXPR  go to state 583
    FUNC_DEF       go to state 76
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 443
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 549

   59 FOR_DEF: l_for '(' VAR_DEF ';' EMPTY_OR_EXPR ';' . EMPTY_OR_EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    $default  reduce using rule 56 (EMPTY_OR_EXPR)

    EMPTY_OR_EXPR  go to state 584
    FUNC_DEF       go to state 76
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 443
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 550

   60 FOR_DEF: l_for '(' EXPR_LIST ';' EMPTY_OR_EXPR ';' . EMPTY_OR_EXPR ')' ANYTHING

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    $default  reduce using rule 56 (EMPTY_OR_EXPR)

    EMPTY_OR_EXPR  go to state 585
    FUNC_DEF       go to state 76
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 443
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 551

   94 FUNC_DEF: l_function l_name '(' ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 586


State 552

   95 FUNC_DEF: l_function l_name '(' EXPR_LIST ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 587
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 553

  140 FUNC_OBJ: l_function '(' ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 140 (FUNC_OBJ)


State 554

  141 FUNC_OBJ: l_function '(' EXPR_LIST ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 588


State 555

   55 IF_DEF: l_if '(' EXPR_LIST ')' ANYTHING l_else . ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    ANYTHING       go to state 589
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 556

   50 IMPORT_DEF: l_import '{' NAME_LIST '}' l_from l_str .

    $default  reduce using rule 50 (IMPORT_DEF)


State 557

   71 SWITCH_UNIT: l_case . EXPR ':' INTERNAL_CODE

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 590
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 558

   72 SWITCH_UNIT: l_default . ':' INTERNAL_CODE

    ':'  shift, and go to state 591


State 559

   68 SWITCH_DEF: l_switch '(' EXPR_LIST ')' '{' SWITCH_INTERNAL . '}'
   70 SWITCH_INTERNAL: SWITCH_INTERNAL . SWITCH_UNIT

    l_case     shift, and go to state 557
    l_default  shift, and go to state 558
    '}'        shift, and go to state 592

    SWITCH_UNIT  go to state 593


State 560

   69 SWITCH_INTERNAL: SWITCH_UNIT .

    $default  reduce using rule 69 (SWITCH_INTERNAL)


State 561

   53 TRY_CATCH_DEF: l_try '{' INTERNAL_CODE '}' l_catch '(' . EXPR ')' '{' INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_delete    shift, and go to state 6
    l_false     shift, and go to state 9
    l_function  shift, and go to state 11
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_this      shift, and go to state 23
    l_true      shift, and go to state 25
    l_typeof    shift, and go to state 27
    l_void      shift, and go to state 29
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    '['         shift, and go to state 42
    '{'         shift, and go to state 73
    '~'         shift, and go to state 44

    FUNC_DEF   go to state 76
    OBJECT     go to state 59
    ARRAY      go to state 60
    EXPR       go to state 594
    FUNC_EXPR  go to state 63
    FUNC_OBJ   go to state 64
    INEXPR     go to state 65
    NUM_EXPR   go to state 66
    TERM       go to state 67
    VAR_TERM   go to state 68
    REGSTR     go to state 69
    UNOOP      go to state 70


State 562

   96 FUNC_DEF: l_async l_function l_name '(' ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 595


State 563

   97 FUNC_DEF: l_async l_function l_name '(' EXPR_LIST . ')' '{' INTERNAL_CODE '}'
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 596
    ','  shift, and go to state 248


State 564

   94 FUNC_DEF: l_function l_name '(' ')' '{' . INTERNAL_CODE '}'
   96         | l_async l_function l_name '(' ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 597
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 565

   95 FUNC_DEF: l_function l_name '(' EXPR_LIST ')' . '{' INTERNAL_CODE '}'
   97         | l_async l_function l_name '(' EXPR_LIST ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 598


State 566

  144 FUNC_OBJ: '(' ')' o_arrow '{' INTERNAL_CODE '}' .

    $default  reduce using rule 144 (FUNC_OBJ)


State 567

  145 FUNC_OBJ: '(' EXPR_LIST ')' o_arrow '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 599


State 568

   98 FUNC_DEF: '(' FUNC_OBJ ')' '(' EXPR_LIST ')' .

    $default  reduce using rule 98 (FUNC_DEF)


State 569

   92 CLASS_CONSTRUCT: l_constructor '(' ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 600


State 570

   93 CLASS_CONSTRUCT: l_constructor '(' EXPR_LIST ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 601
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 571

   90 CLASS_FUNC: KEY_NAME '(' ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 602
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 572

   91 CLASS_FUNC: KEY_NAME '(' EXPR_LIST ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 603


State 573

  121 OBJECT_FLD: KEY_NAME '(' ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 604


State 574

  122 OBJECT_FLD: KEY_NAME '(' EXPR_LIST . ')' '{' INTERNAL_CODE '}'
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 605
    ','  shift, and go to state 248


State 575

   90 CLASS_FUNC: KEY_NAME '(' ')' '{' INTERNAL_CODE . '}'
  121 OBJECT_FLD: KEY_NAME '(' ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 606


State 576

   91 CLASS_FUNC: KEY_NAME '(' EXPR_LIST ')' '{' . INTERNAL_CODE '}'
  122 OBJECT_FLD: KEY_NAME '(' EXPR_LIST ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 607
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 577

   76 CLASS_DEF: l_class l_name l_extends VAR_TERM '{' CLASS_INTERNAL '}' .

    $default  reduce using rule 76 (CLASS_DEF)


State 578

   66 DO_WHILE_DEF: l_do '{' CODE '}' l_while '(' EXPR_LIST . ')'
  134 EXPR_LIST: EXPR_LIST . ',' EXPR

    ')'  shift, and go to state 608
    ','  shift, and go to state 248


State 579

   65 FOR_DEF: l_for '(' l_let l_name l_in EXPR ')' . ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    ANYTHING       go to state 609
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 580

   64 FOR_DEF: l_for '(' l_var l_name l_in EXPR ')' . ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    ANYTHING       go to state 610
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 581

   58 FOR_DEF: l_for '(' ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' . ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    ANYTHING       go to state 611
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 582

   62 FOR_DEF: l_for '(' CLASS_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR . ')' ANYTHING

    ')'  shift, and go to state 612


State 583

   61 FOR_DEF: l_for '(' FUNC_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR . ')' ANYTHING

    ')'  shift, and go to state 613


State 584

   59 FOR_DEF: l_for '(' VAR_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR . ')' ANYTHING

    ')'  shift, and go to state 614


State 585

   60 FOR_DEF: l_for '(' EXPR_LIST ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR . ')' ANYTHING

    ')'  shift, and go to state 615


State 586

   94 FUNC_DEF: l_function l_name '(' ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 94 (FUNC_DEF)


State 587

   95 FUNC_DEF: l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 616


State 588

  141 FUNC_OBJ: l_function '(' EXPR_LIST ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 141 (FUNC_OBJ)


State 589

   55 IF_DEF: l_if '(' EXPR_LIST ')' ANYTHING l_else ANYTHING .

    $default  reduce using rule 55 (IF_DEF)


State 590

   71 SWITCH_UNIT: l_case EXPR . ':' INTERNAL_CODE

    ':'  shift, and go to state 617


State 591

   72 SWITCH_UNIT: l_default ':' . INTERNAL_CODE

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 618
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 592

   68 SWITCH_DEF: l_switch '(' EXPR_LIST ')' '{' SWITCH_INTERNAL '}' .

    $default  reduce using rule 68 (SWITCH_DEF)


State 593

   70 SWITCH_INTERNAL: SWITCH_INTERNAL SWITCH_UNIT .

    $default  reduce using rule 70 (SWITCH_INTERNAL)


State 594

   53 TRY_CATCH_DEF: l_try '{' INTERNAL_CODE '}' l_catch '(' EXPR . ')' '{' INTERNAL_CODE '}'

    ')'  shift, and go to state 619


State 595

   96 FUNC_DEF: l_async l_function l_name '(' ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 620
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 596

   97 FUNC_DEF: l_async l_function l_name '(' EXPR_LIST ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 621


State 597

   94 FUNC_DEF: l_function l_name '(' ')' '{' INTERNAL_CODE . '}'
   96         | l_async l_function l_name '(' ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 622


State 598

   95 FUNC_DEF: l_function l_name '(' EXPR_LIST ')' '{' . INTERNAL_CODE '}'
   97         | l_async l_function l_name '(' EXPR_LIST ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 623
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 599

  145 FUNC_OBJ: '(' EXPR_LIST ')' o_arrow '{' INTERNAL_CODE '}' .

    $default  reduce using rule 145 (FUNC_OBJ)


State 600

   92 CLASS_CONSTRUCT: l_constructor '(' ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 92 (CLASS_CONSTRUCT)


State 601

   93 CLASS_CONSTRUCT: l_constructor '(' EXPR_LIST ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 624


State 602

   90 CLASS_FUNC: KEY_NAME '(' ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 625


State 603

   91 CLASS_FUNC: KEY_NAME '(' EXPR_LIST ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 626
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 604

  121 OBJECT_FLD: KEY_NAME '(' ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 627
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 605

  122 OBJECT_FLD: KEY_NAME '(' EXPR_LIST ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 628


State 606

   90 CLASS_FUNC: KEY_NAME '(' ')' '{' INTERNAL_CODE '}' .
  121 OBJECT_FLD: KEY_NAME '(' ')' '{' INTERNAL_CODE '}' .

    ','       reduce using rule 90 (CLASS_FUNC)
    ','       [reduce using rule 121 (OBJECT_FLD)]
    '}'       reduce using rule 90 (CLASS_FUNC)
    '}'       [reduce using rule 121 (OBJECT_FLD)]
    $default  reduce using rule 90 (CLASS_FUNC)


State 607

   91 CLASS_FUNC: KEY_NAME '(' EXPR_LIST ')' '{' INTERNAL_CODE . '}'
  122 OBJECT_FLD: KEY_NAME '(' EXPR_LIST ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 629


State 608

   66 DO_WHILE_DEF: l_do '{' CODE '}' l_while '(' EXPR_LIST ')' .

    $default  reduce using rule 66 (DO_WHILE_DEF)


State 609

   65 FOR_DEF: l_for '(' l_let l_name l_in EXPR ')' ANYTHING .

    $default  reduce using rule 65 (FOR_DEF)


State 610

   64 FOR_DEF: l_for '(' l_var l_name l_in EXPR ')' ANYTHING .

    $default  reduce using rule 64 (FOR_DEF)


State 611

   58 FOR_DEF: l_for '(' ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING .

    $default  reduce using rule 58 (FOR_DEF)


State 612

   62 FOR_DEF: l_for '(' CLASS_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' . ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    ANYTHING       go to state 630
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 613

   61 FOR_DEF: l_for '(' FUNC_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' . ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    ANYTHING       go to state 631
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 614

   59 FOR_DEF: l_for '(' VAR_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' . ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    ANYTHING       go to state 632
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 615

   60 FOR_DEF: l_for '(' EXPR_LIST ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' . ANYTHING

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    ANYTHING       go to state 633
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 616

   95 FUNC_DEF: l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 95 (FUNC_DEF)


State 617

   71 SWITCH_UNIT: l_case EXPR ':' . INTERNAL_CODE

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 634
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 618

   72 SWITCH_UNIT: l_default ':' INTERNAL_CODE .

    $default  reduce using rule 72 (SWITCH_UNIT)


State 619

   53 TRY_CATCH_DEF: l_try '{' INTERNAL_CODE '}' l_catch '(' EXPR ')' . '{' INTERNAL_CODE '}'

    '{'  shift, and go to state 635


State 620

   96 FUNC_DEF: l_async l_function l_name '(' ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 636


State 621

   97 FUNC_DEF: l_async l_function l_name '(' EXPR_LIST ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 637
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 622

   94 FUNC_DEF: l_function l_name '(' ')' '{' INTERNAL_CODE '}' .
   96         | l_async l_function l_name '(' ')' '{' INTERNAL_CODE '}' .

    $end          reduce using rule 94 (FUNC_DEF)
    $end          [reduce using rule 96 (FUNC_DEF)]
    l_await       reduce using rule 94 (FUNC_DEF)
    l_await       [reduce using rule 96 (FUNC_DEF)]
    l_break       reduce using rule 94 (FUNC_DEF)
    l_break       [reduce using rule 96 (FUNC_DEF)]
    l_case        reduce using rule 94 (FUNC_DEF)
    l_case        [reduce using rule 96 (FUNC_DEF)]
    l_class       reduce using rule 94 (FUNC_DEF)
    l_class       [reduce using rule 96 (FUNC_DEF)]
    l_const       reduce using rule 94 (FUNC_DEF)
    l_const       [reduce using rule 96 (FUNC_DEF)]
    l_continue    reduce using rule 94 (FUNC_DEF)
    l_continue    [reduce using rule 96 (FUNC_DEF)]
    l_default     reduce using rule 94 (FUNC_DEF)
    l_default     [reduce using rule 96 (FUNC_DEF)]
    l_delete      reduce using rule 94 (FUNC_DEF)
    l_delete      [reduce using rule 96 (FUNC_DEF)]
    l_do          reduce using rule 94 (FUNC_DEF)
    l_do          [reduce using rule 96 (FUNC_DEF)]
    l_else        reduce using rule 94 (FUNC_DEF)
    l_else        [reduce using rule 96 (FUNC_DEF)]
    l_export      reduce using rule 94 (FUNC_DEF)
    l_export      [reduce using rule 96 (FUNC_DEF)]
    l_false       reduce using rule 94 (FUNC_DEF)
    l_false       [reduce using rule 96 (FUNC_DEF)]
    l_for         reduce using rule 94 (FUNC_DEF)
    l_for         [reduce using rule 96 (FUNC_DEF)]
    l_function    reduce using rule 94 (FUNC_DEF)
    l_function    [reduce using rule 96 (FUNC_DEF)]
    l_if          reduce using rule 94 (FUNC_DEF)
    l_if          [reduce using rule 96 (FUNC_DEF)]
    l_import      reduce using rule 94 (FUNC_DEF)
    l_import      [reduce using rule 96 (FUNC_DEF)]
    l_in          reduce using rule 94 (FUNC_DEF)
    l_in          [reduce using rule 96 (FUNC_DEF)]
    l_instanceof  reduce using rule 94 (FUNC_DEF)
    l_instanceof  [reduce using rule 96 (FUNC_DEF)]
    l_let         reduce using rule 94 (FUNC_DEF)
    l_let         [reduce using rule 96 (FUNC_DEF)]
    l_name        reduce using rule 94 (FUNC_DEF)
    l_name        [reduce using rule 96 (FUNC_DEF)]
    l_new         reduce using rule 94 (FUNC_DEF)
    l_new         [reduce using rule 96 (FUNC_DEF)]
    l_null        reduce using rule 94 (FUNC_DEF)
    l_null        [reduce using rule 96 (FUNC_DEF)]
    l_num         reduce using rule 94 (FUNC_DEF)
    l_num         [reduce using rule 96 (FUNC_DEF)]
    l_return      reduce using rule 94 (FUNC_DEF)
    l_return      [reduce using rule 96 (FUNC_DEF)]
    l_str         reduce using rule 94 (FUNC_DEF)
    l_str         [reduce using rule 96 (FUNC_DEF)]
    l_super       reduce using rule 94 (FUNC_DEF)
    l_super       [reduce using rule 96 (FUNC_DEF)]
    l_switch      reduce using rule 94 (FUNC_DEF)
    l_switch      [reduce using rule 96 (FUNC_DEF)]
    l_this        reduce using rule 94 (FUNC_DEF)
    l_this        [reduce using rule 96 (FUNC_DEF)]
    l_throw       reduce using rule 94 (FUNC_DEF)
    l_throw       [reduce using rule 96 (FUNC_DEF)]
    l_true        reduce using rule 94 (FUNC_DEF)
    l_true        [reduce using rule 96 (FUNC_DEF)]
    l_try         reduce using rule 94 (FUNC_DEF)
    l_try         [reduce using rule 96 (FUNC_DEF)]
    l_typeof      reduce using rule 94 (FUNC_DEF)
    l_typeof      [reduce using rule 96 (FUNC_DEF)]
    l_var         reduce using rule 94 (FUNC_DEF)
    l_var         [reduce using rule 96 (FUNC_DEF)]
    l_void        reduce using rule 94 (FUNC_DEF)
    l_void        [reduce using rule 96 (FUNC_DEF)]
    l_while       reduce using rule 94 (FUNC_DEF)
    l_while       [reduce using rule 96 (FUNC_DEF)]
    l_yield       reduce using rule 94 (FUNC_DEF)
    l_yield       [reduce using rule 96 (FUNC_DEF)]
    l_from        reduce using rule 94 (FUNC_DEF)
    l_from        [reduce using rule 96 (FUNC_DEF)]
    l_async       reduce using rule 94 (FUNC_DEF)
    l_async       [reduce using rule 96 (FUNC_DEF)]
    o_and         reduce using rule 94 (FUNC_DEF)
    o_and         [reduce using rule 96 (FUNC_DEF)]
    o_dec         reduce using rule 94 (FUNC_DEF)
    o_dec         [reduce using rule 96 (FUNC_DEF)]
    o_eqeq        reduce using rule 94 (FUNC_DEF)
    o_eqeq        [reduce using rule 96 (FUNC_DEF)]
    o_inc         reduce using rule 94 (FUNC_DEF)
    o_inc         [reduce using rule 96 (FUNC_DEF)]
    o_lesseq      reduce using rule 94 (FUNC_DEF)
    o_lesseq      [reduce using rule 96 (FUNC_DEF)]
    o_lsh         reduce using rule 94 (FUNC_DEF)
    o_lsh         [reduce using rule 96 (FUNC_DEF)]
    o_moreeq      reduce using rule 94 (FUNC_DEF)
    o_moreeq      [reduce using rule 96 (FUNC_DEF)]
    o_noteq       reduce using rule 94 (FUNC_DEF)
    o_noteq       [reduce using rule 96 (FUNC_DEF)]
    o_or          reduce using rule 94 (FUNC_DEF)
    o_or          [reduce using rule 96 (FUNC_DEF)]
    o_rsh         reduce using rule 94 (FUNC_DEF)
    o_rsh         [reduce using rule 96 (FUNC_DEF)]
    o_noteqeq     reduce using rule 94 (FUNC_DEF)
    o_noteqeq     [reduce using rule 96 (FUNC_DEF)]
    o_eqeqeq      reduce using rule 94 (FUNC_DEF)
    o_eqeqeq      [reduce using rule 96 (FUNC_DEF)]
    o_rshsh       reduce using rule 94 (FUNC_DEF)
    o_rshsh       [reduce using rule 96 (FUNC_DEF)]
    '!'           reduce using rule 94 (FUNC_DEF)
    '!'           [reduce using rule 96 (FUNC_DEF)]
    '%'           reduce using rule 94 (FUNC_DEF)
    '%'           [reduce using rule 96 (FUNC_DEF)]
    '&'           reduce using rule 94 (FUNC_DEF)
    '&'           [reduce using rule 96 (FUNC_DEF)]
    '('           reduce using rule 94 (FUNC_DEF)
    '('           [reduce using rule 96 (FUNC_DEF)]
    ')'           reduce using rule 94 (FUNC_DEF)
    ')'           [reduce using rule 96 (FUNC_DEF)]
    '*'           reduce using rule 94 (FUNC_DEF)
    '*'           [reduce using rule 96 (FUNC_DEF)]
    '+'           reduce using rule 94 (FUNC_DEF)
    '+'           [reduce using rule 96 (FUNC_DEF)]
    ','           reduce using rule 94 (FUNC_DEF)
    ','           [reduce using rule 96 (FUNC_DEF)]
    '-'           reduce using rule 94 (FUNC_DEF)
    '-'           [reduce using rule 96 (FUNC_DEF)]
    '/'           reduce using rule 94 (FUNC_DEF)
    '/'           [reduce using rule 96 (FUNC_DEF)]
    ':'           reduce using rule 94 (FUNC_DEF)
    ':'           [reduce using rule 96 (FUNC_DEF)]
    ';'           reduce using rule 94 (FUNC_DEF)
    ';'           [reduce using rule 96 (FUNC_DEF)]
    '<'           reduce using rule 94 (FUNC_DEF)
    '<'           [reduce using rule 96 (FUNC_DEF)]
    '>'           reduce using rule 94 (FUNC_DEF)
    '>'           [reduce using rule 96 (FUNC_DEF)]
    '?'           reduce using rule 94 (FUNC_DEF)
    '?'           [reduce using rule 96 (FUNC_DEF)]
    '['           reduce using rule 94 (FUNC_DEF)
    '['           [reduce using rule 96 (FUNC_DEF)]
    ']'           reduce using rule 94 (FUNC_DEF)
    ']'           [reduce using rule 96 (FUNC_DEF)]
    '^'           reduce using rule 94 (FUNC_DEF)
    '^'           [reduce using rule 96 (FUNC_DEF)]
    '{'           reduce using rule 94 (FUNC_DEF)
    '{'           [reduce using rule 96 (FUNC_DEF)]
    '|'           reduce using rule 94 (FUNC_DEF)
    '|'           [reduce using rule 96 (FUNC_DEF)]
    '}'           reduce using rule 94 (FUNC_DEF)
    '}'           [reduce using rule 96 (FUNC_DEF)]
    '~'           reduce using rule 94 (FUNC_DEF)
    '~'           [reduce using rule 96 (FUNC_DEF)]
    $default      reduce using rule 94 (FUNC_DEF)


State 623

   95 FUNC_DEF: l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE . '}'
   97         | l_async l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 638


State 624

   93 CLASS_CONSTRUCT: l_constructor '(' EXPR_LIST ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 93 (CLASS_CONSTRUCT)


State 625

   90 CLASS_FUNC: KEY_NAME '(' ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 90 (CLASS_FUNC)


State 626

   91 CLASS_FUNC: KEY_NAME '(' EXPR_LIST ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 639


State 627

  121 OBJECT_FLD: KEY_NAME '(' ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 640


State 628

  122 OBJECT_FLD: KEY_NAME '(' EXPR_LIST ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 641
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 629

   91 CLASS_FUNC: KEY_NAME '(' EXPR_LIST ')' '{' INTERNAL_CODE '}' .
  122 OBJECT_FLD: KEY_NAME '(' EXPR_LIST ')' '{' INTERNAL_CODE '}' .

    ','       reduce using rule 91 (CLASS_FUNC)
    ','       [reduce using rule 122 (OBJECT_FLD)]
    '}'       reduce using rule 91 (CLASS_FUNC)
    '}'       [reduce using rule 122 (OBJECT_FLD)]
    $default  reduce using rule 91 (CLASS_FUNC)


State 630

   62 FOR_DEF: l_for '(' CLASS_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING .

    $default  reduce using rule 62 (FOR_DEF)


State 631

   61 FOR_DEF: l_for '(' FUNC_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING .

    $default  reduce using rule 61 (FOR_DEF)


State 632

   59 FOR_DEF: l_for '(' VAR_DEF ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING .

    $default  reduce using rule 59 (FOR_DEF)


State 633

   60 FOR_DEF: l_for '(' EXPR_LIST ';' EMPTY_OR_EXPR ';' EMPTY_OR_EXPR ')' ANYTHING .

    $default  reduce using rule 60 (FOR_DEF)


State 634

   71 SWITCH_UNIT: l_case EXPR ':' INTERNAL_CODE .

    $default  reduce using rule 71 (SWITCH_UNIT)


State 635

   53 TRY_CATCH_DEF: l_try '{' INTERNAL_CODE '}' l_catch '(' EXPR ')' '{' . INTERNAL_CODE '}'

    l_await     shift, and go to state 1
    l_break     shift, and go to state 2
    l_class     shift, and go to state 3
    l_const     shift, and go to state 4
    l_continue  shift, and go to state 5
    l_delete    shift, and go to state 6
    l_do        shift, and go to state 7
    l_export    shift, and go to state 8
    l_false     shift, and go to state 9
    l_for       shift, and go to state 10
    l_function  shift, and go to state 11
    l_if        shift, and go to state 12
    l_import    shift, and go to state 13
    l_let       shift, and go to state 14
    l_name      shift, and go to state 15
    l_new       shift, and go to state 16
    l_null      shift, and go to state 17
    l_num       shift, and go to state 18
    l_return    shift, and go to state 19
    l_str       shift, and go to state 20
    l_super     shift, and go to state 21
    l_switch    shift, and go to state 22
    l_this      shift, and go to state 23
    l_throw     shift, and go to state 24
    l_true      shift, and go to state 25
    l_try       shift, and go to state 26
    l_typeof    shift, and go to state 27
    l_var       shift, and go to state 28
    l_void      shift, and go to state 29
    l_while     shift, and go to state 30
    l_yield     shift, and go to state 31
    l_from      shift, and go to state 32
    l_async     shift, and go to state 33
    o_dec       shift, and go to state 34
    o_inc       shift, and go to state 35
    '!'         shift, and go to state 36
    '('         shift, and go to state 37
    '+'         shift, and go to state 38
    '-'         shift, and go to state 39
    '/'         shift, and go to state 40
    ';'         shift, and go to state 41
    '['         shift, and go to state 42
    '{'         shift, and go to state 43
    '~'         shift, and go to state 44

    $default  reduce using rule 4 (INTERNAL_CODE)

    CODE           go to state 329
    INTERNAL_CODE  go to state 642
    ANYTHING       go to state 47
    EXPORT_DEF     go to state 48
    IMPORT_DEF     go to state 49
    TRY_CATCH_DEF  go to state 50
    IF_DEF         go to state 51
    FOR_DEF        go to state 52
    DO_WHILE_DEF   go to state 53
    WHILE_DEF      go to state 54
    SWITCH_DEF     go to state 55
    CLASS_DEF      go to state 56
    FUNC_DEF       go to state 57
    VAR_DEF        go to state 58
    OBJECT         go to state 59
    ARRAY          go to state 60
    EXPR_LIST      go to state 61
    EXPR           go to state 62
    FUNC_EXPR      go to state 63
    FUNC_OBJ       go to state 64
    INEXPR         go to state 65
    NUM_EXPR       go to state 66
    TERM           go to state 67
    VAR_TERM       go to state 68
    REGSTR         go to state 69
    UNOOP          go to state 70


State 636

   96 FUNC_DEF: l_async l_function l_name '(' ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 96 (FUNC_DEF)


State 637

   97 FUNC_DEF: l_async l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 643


State 638

   95 FUNC_DEF: l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}' .
   97         | l_async l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}' .

    $end          reduce using rule 95 (FUNC_DEF)
    $end          [reduce using rule 97 (FUNC_DEF)]
    l_await       reduce using rule 95 (FUNC_DEF)
    l_await       [reduce using rule 97 (FUNC_DEF)]
    l_break       reduce using rule 95 (FUNC_DEF)
    l_break       [reduce using rule 97 (FUNC_DEF)]
    l_case        reduce using rule 95 (FUNC_DEF)
    l_case        [reduce using rule 97 (FUNC_DEF)]
    l_class       reduce using rule 95 (FUNC_DEF)
    l_class       [reduce using rule 97 (FUNC_DEF)]
    l_const       reduce using rule 95 (FUNC_DEF)
    l_const       [reduce using rule 97 (FUNC_DEF)]
    l_continue    reduce using rule 95 (FUNC_DEF)
    l_continue    [reduce using rule 97 (FUNC_DEF)]
    l_default     reduce using rule 95 (FUNC_DEF)
    l_default     [reduce using rule 97 (FUNC_DEF)]
    l_delete      reduce using rule 95 (FUNC_DEF)
    l_delete      [reduce using rule 97 (FUNC_DEF)]
    l_do          reduce using rule 95 (FUNC_DEF)
    l_do          [reduce using rule 97 (FUNC_DEF)]
    l_else        reduce using rule 95 (FUNC_DEF)
    l_else        [reduce using rule 97 (FUNC_DEF)]
    l_export      reduce using rule 95 (FUNC_DEF)
    l_export      [reduce using rule 97 (FUNC_DEF)]
    l_false       reduce using rule 95 (FUNC_DEF)
    l_false       [reduce using rule 97 (FUNC_DEF)]
    l_for         reduce using rule 95 (FUNC_DEF)
    l_for         [reduce using rule 97 (FUNC_DEF)]
    l_function    reduce using rule 95 (FUNC_DEF)
    l_function    [reduce using rule 97 (FUNC_DEF)]
    l_if          reduce using rule 95 (FUNC_DEF)
    l_if          [reduce using rule 97 (FUNC_DEF)]
    l_import      reduce using rule 95 (FUNC_DEF)
    l_import      [reduce using rule 97 (FUNC_DEF)]
    l_in          reduce using rule 95 (FUNC_DEF)
    l_in          [reduce using rule 97 (FUNC_DEF)]
    l_instanceof  reduce using rule 95 (FUNC_DEF)
    l_instanceof  [reduce using rule 97 (FUNC_DEF)]
    l_let         reduce using rule 95 (FUNC_DEF)
    l_let         [reduce using rule 97 (FUNC_DEF)]
    l_name        reduce using rule 95 (FUNC_DEF)
    l_name        [reduce using rule 97 (FUNC_DEF)]
    l_new         reduce using rule 95 (FUNC_DEF)
    l_new         [reduce using rule 97 (FUNC_DEF)]
    l_null        reduce using rule 95 (FUNC_DEF)
    l_null        [reduce using rule 97 (FUNC_DEF)]
    l_num         reduce using rule 95 (FUNC_DEF)
    l_num         [reduce using rule 97 (FUNC_DEF)]
    l_return      reduce using rule 95 (FUNC_DEF)
    l_return      [reduce using rule 97 (FUNC_DEF)]
    l_str         reduce using rule 95 (FUNC_DEF)
    l_str         [reduce using rule 97 (FUNC_DEF)]
    l_super       reduce using rule 95 (FUNC_DEF)
    l_super       [reduce using rule 97 (FUNC_DEF)]
    l_switch      reduce using rule 95 (FUNC_DEF)
    l_switch      [reduce using rule 97 (FUNC_DEF)]
    l_this        reduce using rule 95 (FUNC_DEF)
    l_this        [reduce using rule 97 (FUNC_DEF)]
    l_throw       reduce using rule 95 (FUNC_DEF)
    l_throw       [reduce using rule 97 (FUNC_DEF)]
    l_true        reduce using rule 95 (FUNC_DEF)
    l_true        [reduce using rule 97 (FUNC_DEF)]
    l_try         reduce using rule 95 (FUNC_DEF)
    l_try         [reduce using rule 97 (FUNC_DEF)]
    l_typeof      reduce using rule 95 (FUNC_DEF)
    l_typeof      [reduce using rule 97 (FUNC_DEF)]
    l_var         reduce using rule 95 (FUNC_DEF)
    l_var         [reduce using rule 97 (FUNC_DEF)]
    l_void        reduce using rule 95 (FUNC_DEF)
    l_void        [reduce using rule 97 (FUNC_DEF)]
    l_while       reduce using rule 95 (FUNC_DEF)
    l_while       [reduce using rule 97 (FUNC_DEF)]
    l_yield       reduce using rule 95 (FUNC_DEF)
    l_yield       [reduce using rule 97 (FUNC_DEF)]
    l_from        reduce using rule 95 (FUNC_DEF)
    l_from        [reduce using rule 97 (FUNC_DEF)]
    l_async       reduce using rule 95 (FUNC_DEF)
    l_async       [reduce using rule 97 (FUNC_DEF)]
    o_and         reduce using rule 95 (FUNC_DEF)
    o_and         [reduce using rule 97 (FUNC_DEF)]
    o_dec         reduce using rule 95 (FUNC_DEF)
    o_dec         [reduce using rule 97 (FUNC_DEF)]
    o_eqeq        reduce using rule 95 (FUNC_DEF)
    o_eqeq        [reduce using rule 97 (FUNC_DEF)]
    o_inc         reduce using rule 95 (FUNC_DEF)
    o_inc         [reduce using rule 97 (FUNC_DEF)]
    o_lesseq      reduce using rule 95 (FUNC_DEF)
    o_lesseq      [reduce using rule 97 (FUNC_DEF)]
    o_lsh         reduce using rule 95 (FUNC_DEF)
    o_lsh         [reduce using rule 97 (FUNC_DEF)]
    o_moreeq      reduce using rule 95 (FUNC_DEF)
    o_moreeq      [reduce using rule 97 (FUNC_DEF)]
    o_noteq       reduce using rule 95 (FUNC_DEF)
    o_noteq       [reduce using rule 97 (FUNC_DEF)]
    o_or          reduce using rule 95 (FUNC_DEF)
    o_or          [reduce using rule 97 (FUNC_DEF)]
    o_rsh         reduce using rule 95 (FUNC_DEF)
    o_rsh         [reduce using rule 97 (FUNC_DEF)]
    o_noteqeq     reduce using rule 95 (FUNC_DEF)
    o_noteqeq     [reduce using rule 97 (FUNC_DEF)]
    o_eqeqeq      reduce using rule 95 (FUNC_DEF)
    o_eqeqeq      [reduce using rule 97 (FUNC_DEF)]
    o_rshsh       reduce using rule 95 (FUNC_DEF)
    o_rshsh       [reduce using rule 97 (FUNC_DEF)]
    '!'           reduce using rule 95 (FUNC_DEF)
    '!'           [reduce using rule 97 (FUNC_DEF)]
    '%'           reduce using rule 95 (FUNC_DEF)
    '%'           [reduce using rule 97 (FUNC_DEF)]
    '&'           reduce using rule 95 (FUNC_DEF)
    '&'           [reduce using rule 97 (FUNC_DEF)]
    '('           reduce using rule 95 (FUNC_DEF)
    '('           [reduce using rule 97 (FUNC_DEF)]
    ')'           reduce using rule 95 (FUNC_DEF)
    ')'           [reduce using rule 97 (FUNC_DEF)]
    '*'           reduce using rule 95 (FUNC_DEF)
    '*'           [reduce using rule 97 (FUNC_DEF)]
    '+'           reduce using rule 95 (FUNC_DEF)
    '+'           [reduce using rule 97 (FUNC_DEF)]
    ','           reduce using rule 95 (FUNC_DEF)
    ','           [reduce using rule 97 (FUNC_DEF)]
    '-'           reduce using rule 95 (FUNC_DEF)
    '-'           [reduce using rule 97 (FUNC_DEF)]
    '/'           reduce using rule 95 (FUNC_DEF)
    '/'           [reduce using rule 97 (FUNC_DEF)]
    ':'           reduce using rule 95 (FUNC_DEF)
    ':'           [reduce using rule 97 (FUNC_DEF)]
    ';'           reduce using rule 95 (FUNC_DEF)
    ';'           [reduce using rule 97 (FUNC_DEF)]
    '<'           reduce using rule 95 (FUNC_DEF)
    '<'           [reduce using rule 97 (FUNC_DEF)]
    '>'           reduce using rule 95 (FUNC_DEF)
    '>'           [reduce using rule 97 (FUNC_DEF)]
    '?'           reduce using rule 95 (FUNC_DEF)
    '?'           [reduce using rule 97 (FUNC_DEF)]
    '['           reduce using rule 95 (FUNC_DEF)
    '['           [reduce using rule 97 (FUNC_DEF)]
    ']'           reduce using rule 95 (FUNC_DEF)
    ']'           [reduce using rule 97 (FUNC_DEF)]
    '^'           reduce using rule 95 (FUNC_DEF)
    '^'           [reduce using rule 97 (FUNC_DEF)]
    '{'           reduce using rule 95 (FUNC_DEF)
    '{'           [reduce using rule 97 (FUNC_DEF)]
    '|'           reduce using rule 95 (FUNC_DEF)
    '|'           [reduce using rule 97 (FUNC_DEF)]
    '}'           reduce using rule 95 (FUNC_DEF)
    '}'           [reduce using rule 97 (FUNC_DEF)]
    '~'           reduce using rule 95 (FUNC_DEF)
    '~'           [reduce using rule 97 (FUNC_DEF)]
    $default      reduce using rule 95 (FUNC_DEF)


State 639

   91 CLASS_FUNC: KEY_NAME '(' EXPR_LIST ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 91 (CLASS_FUNC)


State 640

  121 OBJECT_FLD: KEY_NAME '(' ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 121 (OBJECT_FLD)


State 641

  122 OBJECT_FLD: KEY_NAME '(' EXPR_LIST ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 644


State 642

   53 TRY_CATCH_DEF: l_try '{' INTERNAL_CODE '}' l_catch '(' EXPR ')' '{' INTERNAL_CODE . '}'

    '}'  shift, and go to state 645


State 643

   97 FUNC_DEF: l_async l_function l_name '(' EXPR_LIST ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 97 (FUNC_DEF)


State 644

  122 OBJECT_FLD: KEY_NAME '(' EXPR_LIST ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 122 (OBJECT_FLD)


State 645

   53 TRY_CATCH_DEF: l_try '{' INTERNAL_CODE '}' l_catch '(' EXPR ')' '{' INTERNAL_CODE '}' .

    $default  reduce using rule 53 (TRY_CATCH_DEF)
